This file documents the Red Pixel II script API.  In this document,
all type names start with a capital letter.


- Type: Nil

	The value `nil'.


- Type: String

	A string.


- Type: Int

	A number which will be treated as an integer.


- Type: Float

	A floating point number.


- Type: StoreKey

	A string that represents a key to a Store item.


- Type: Object

	A game object.


- Type: Method

	A function taking at least one argument, which is the object
	the function is being invoked on.


- Function: store_load (String filename, String prefix)

	Loads the datafile named by FILENAME, prefixing all the item
	names with PREFIX.  Returns nil on error.


- Function: tiles_load (String filename, String prefix)

	Loads the datafile containing tiles named by FILENAME,
	prefixing all the item names with PREFIX.  Returns nil on
	error.


- Function: lights_load (String filename, String prefix)

	Loads the datafile containing lights named by FILENAME,
	prefixing all the item names with PREFIX.  Returns nil on
	error.


- Function: store_index (String key)

	Returns the store index of item with key KEY, or nil on error.


- Function: objtype_register (String type, String name, StoreKey icon, 
				Nil | Method initfunc)

	Registers a new object type.

	- TYPE is used to categorise the type in the map editor.
	Current types include: item, objtile, food, player.

	- NAME is the name of the type.  This will be used for map
	loading and saving purposes, so should not be changed unless
	you really mean it.

	- ICON points to a Store image item, which will be used to
	represent the object in the map editor.  It will also be used
	as the default object layer for instances of this object type.
		
	- INITFUNC will be invoked on new instances of this object type.
	It may be `nil' if it is not necessary.

	Returns nil on error.


Objects have the following attributes, hooks and methods:


- Attribute: is_proxy

	True if the object is not a proxy object, but the real game
	object residing on the game server.


- Attribute: is_client

	True if the object represents the local client's player.


- Attribute: aim_angle

	The angle at which the local player is aiming the mouse.  This
	attribute only exists if `is_client' is true.


- Hook: client_update (Object self)

	Called every game tick for the client's local player object.
	This hook only functions if `is_client' is true.


- Method: add_layer (Object self, StoreKey image, Int xcentre, Int ycentre)

	Adds an image layer to SELF.  The layer will appear on top
	of the stack.

	Returns a layer id (Int) on success.


- Method: replace_layer (Object self, Int layerid, StoreKey image,
			 Int xcentre, Int ycentre)

	Replaces the image layer of SELF identified by LAYERID.
	Returns nil on error.


- Method: move_layer (Object self, Int layerid, Int xcentre, Int ycentre)

	Moves the layer source of SELF identified by LAYERID to a
	new centre.  Returns nil on error.


- Method: rotate_layer (Object self, Int angle)

	Rotates a layer.  The angle is in the range 0-255.
	Returns nil on error.


- Method: remove_layer (Object self, Int layerid)

	Removes an image layer from SELF.  Returns nil on error.


- Method: remove_all_layers (Object self)

	Removes all image layers from SELF.  Return nil on error.


- Method: add_light (Object self, StoreKey light, Int xoffset, Int yoffset)

	Adds a light source to SELF.  The light will appear on top
	of the stack.
	
	Returns a light id (Int) on success.


- Method: replace_light (Object self, Int lightid, StoreKey image,
			 Int xoffset, Int yoffset)

	Replaces the light source of SELF identified by LIGHTID.
	Returns nil on error.


- Method: move_light (Object self, Int lightid, Int xoffset, Int yoffset)

	Moves the light source of SELF identified by LIGHTID to a
	new offset.  Returns nil on error.


- Method: remove_light (Object self, Int lightid)

	Removes an light source from SELF.  Returns nil on error.


- Method: remove_all_lights (Object self)

	Removes all light sources from OBJECT.  Return nil on error.


- Method: set_mask (Object self, Int masknumber, StoreKey mask, 
		    Int xoffset, Int yoffset)

	Set collision mask of SELF to MASK.  MASKNUMBER is one of:
	mask_main, mask_top, mask_bottom, mask_left, mask_right.

	Returns nil on error.


- Method: remove_mask (Object SELF, Int masknumber)

	Remove collision mask of SELF.  Returns nil on error.


- Method: remove_all_masks (Object self)

	Remove all collision masks from SELF.

