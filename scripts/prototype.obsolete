/*
 *	init.sc
 */

void init()
{
	/* load tile packs */
	create_tile_table(200);
	add_tiles_pack("data/tiles.sc");

	/* add weapons */
	exec_script("scripts/rpg.sc", "init");
	exec_script("scripts/shotgun.sc", "init");
}


/*
 *	rpg.sc
 *	Returns zero on success, non-zero on error.
 */

export init;
export deinit;

DATAFILE *dat;
BITMAP *projectile, *status;
int number;

void ammo_handler(ITEM *i, int x, int y, int msg, PLAYER *p)
{
	switch (msg)
	{
		case MSG_TOUCHED:
			p->ammo[number] += 5;			
			destroy_item(i);
			break;
		default:		
	}	
}

void weapon_handler(ITEM *i, int x, int y, int msg, PLAYER *p)
{
	switch (msg)
	{
		case MSG_TOUCHED:
			p->have_weapon[number] = 1;
			destry_item(i);
			break;
		default:
	}
}

void rpg_handler(int msg, PLAYER *p)
{
	switch (msg)
	{
		case MSG_DRAW:
			draw_sprite(dbuf, status, STATUS_X, STATUS_Y);
			break;
		case MSG_FIRE:
			draw_sprite
	}
}

int init()
{
	dat = load_datafile("data/rpg.dat");
	if (!dat) return -1;

	number = add_weapon_type("rpg");
	if (number == -1)	/* too many weapon types */
		return -1;

	add_weapon(number, rpg_handler);

	add_item(df_get_item(d, "ammo"), ammo_handler);
	add_item(df_get_item(d, "weapon"), weapon_handler);

	projectile = df_get_item(d, "ejected");
	status = df_get_item(d, "status");

	return 0;
}

void deinit()
{
	destroy_datafile(dat);
}

