SeeRC debugger data:
 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void create_tiles_table(int size);     
262>import void add_tiles_pack(char *filename);   
263>
264> 
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>unsigned int x, y;
284>};
285>
286> 
287>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
288>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
289>typedef void weapon_type_t;	       
290>import int create_weapon_type(char *name);    
291>import int assign_weapon_handler(int typenum, seer_addr handler);
292>
293>#! 7 "scripts/imports.sh"
294>
295>
296>#! 7 "!!_internal_Script"
297>
298>export init;
299>
300>
301>
302>
303>
304>
305>int init()
306>{   
307>     
308>    create_tiles_table(200);
309>    add_tiles_pack("data/tiles.dat");
310>    
311>     
312>    add_script("scripts/rpg.sc");
313>    
314>
315>    return 0;
316>}
317>
318>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(80b73b8)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(80bba20)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(80bbaf8,80bbb50,80bbba8,80bbc00,80bbc58)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(80bf1d8,80bf230)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(80bf318,80bf370,80bf3c8)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(80bf4c0,80bf528,80bf580,80bf5d8,80bf630)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(80bf748)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(80bfbd0,80bfc28)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(80bfd18)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(80bfdf0,80bfe48,80bfea0,80bfef8)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(80bfff8,80c0050)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(80c0140)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(80c0218,80c0270,80c02c8)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(80c03c8)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(80c04a8,80c0510,80c0568)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(80c0670,80c06c8,80c0720,80c0778)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(80c0878,80c08d0,80c0928)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(80c0a18,80c0a70,80c0ac8)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(80c0bc0,80c0c18,80c0c70,80c0cc8)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(80c0dc8)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(80c0e98)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(80c0f68)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(80c1038,80c1090)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(80c1170,80c11c8)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(80c12a8,80c1300)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(80c13e0,80c1448,80c14a0,80c14f8)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(80c15f8,80c1660,80c16b8,80c1710,80c1768)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(80c1880,80c18d8,80c1940,80c1998)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(80c1a98)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80c1e68,80c1ec0,80c1f08,80c1f50)>...
Declaration of `do_line' as <(80c1be0,80c1c48,80c1ca0,80c1cf8,80c1d50,80c1da8,80c1e00)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(80c20c0,80c2128,80c2180,80c21d8,80c2230,80c2288,80c22e0,80c2338)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(80c2478,80c24e0,80c2538,80c25a0)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(80c26a0,80c2708,80c2760,80c27b8,80c2810,80c2868)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80c2bb8,80c2c10,80c2c58,80c2ca0)>...
Declaration of `do_circle' as <(80c2988,80c29f0,80c2a48,80c2aa0,80c2af8,80c2b50)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(80c2e00,80c2e68,80c2ec0,80c2f18,80c2f70)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(80c3080,80c30e8,80c3140,80c3198,80c31f0)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80c3588,80c35e0,80c3628,80c3670)>...
Declaration of `do_ellipse' as <(80c3300,80c3368,80c33c0,80c3418,80c3470,80c34c8,80c3520)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(80c37e0,80c3848,80c38a0,80c38f8,80c3950,80c39a8)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(80c3ac8,80c3b30,80c3b88,80c3be0,80c3c38,80c3c90)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(80c3db0,80c3e18,80c3e70,80c3ed8)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(80c3fe8,80c4050,80c40b8)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(80c41a8,80c4210,80c4268,80c42c0)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(80c43c0,80c4428,80c4490,80c44e8,80c4540,80c4598,80c45f0,80c4648)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(80c4788,80c47f0,80c4858,80c48b0,80c4908,80c4960,80c49b8,80c4a10)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(80c4b58,80c4bc0,80c4c28,80c4c80,80c4cd8,80c4d30,80c4d88,80c4de0,80c4e38,80c4e90)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(80c4ff8,80c5060,80c50c8,80c5120,80c5178,80c51d0)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(80c52f8,80c5360,80c53c8,80c5420,80c5478)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(80c5598,80c5600,80c5668,80c56c0,80c5718,80c5770)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(80c5890)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(80c5978,80c59e0,80c5a48,80c5aa0)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(80c5ba0)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(80c5c70,80c5cd8,80c5d40,80c5da8,80c5e00,80c5e58)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(80c5f80,80c5fe8,80c6050,80c60b8,80c6110,80c6168)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(80c6290,80c62f8,80c6360,80c63c8,80c6420,80c6478,80c64d0,80c6528)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(80c6668,80c66d0,80c6738,80c6790,80c67e8,80c6840,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(80c6988,80c69f0,80c6a58,80c6ab0,80c6b08,80c6b60,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(80c6ca0,80c6d08)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(80c6df8)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(80c6ee0)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(80c6fc0,80c7028,80c7090,80c70e8)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(80c7210,80c7278,80c72e0,80c7338)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(80c7458)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(80c7540)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(80c76a0)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(80c7910,80c7968,80c79c0)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(80c7ac0,80c7b18)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(80c7c00)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(80c7ce8)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(80c7dc8)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(80c7ea8)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(80c7f88)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(80c8070)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(80c8150,80c81b8,80c8210,80c8268,80c82c0)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(80c83d0)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(80c84b8,80c8520,80c8578,80c85d0,80c8628)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(80c8738)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(80c8820)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(80c8900,80c8968)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(80c8a50,80c8ab8,80c8b10)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(80c8d68)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(80c8e38,80c8ea0)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(80c9008)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(80c90e8,80c9150)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(80c9240)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(80c9320,80c9388)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(80c9470,80c94d8)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(80c95c0)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(80c96a0)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(80c9780)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(80c9860,80c98b8)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(80c99a8,80c9a00)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(80c9af0)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(80c9bd0)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(80c9cb0,80c9d08)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(80c9df8,80c9e50)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(80c9f40,80c9fa8,80ca000)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(80ca100,80ca168,80ca1c0)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(80ca2c0,80ca328,80ca380)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(80ca480,80ca4e8)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(80ca5e0)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(80ca6c0,80ca728)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(80ca800,80ca868)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(80ca958,80ca9c0)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(80caab0,80cab18)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(80cac08,80cac70)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(80cad60,80cadc8,80cae30)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(80caf10,80caf78,80cafe0)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(80cb0e0,80cb148,80cb1b0)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(80cb2b0,80cb318,80cb380)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(80cb468,80cb4d0,80cb528)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(80cb620,80cb688,80cb6e0,80cb738,80cb790,80cb7e8)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(80cb910,80cb978,80cb9d0,80cba28,80cba80,80cbad8)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(80cbd28,80cbd80,80cbdd8)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(80cbc00,80cbc68,80cbcc0,80cbe70)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(80cc338)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(80cc418,80cc480)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(80cc570)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void create_tiles_table(int size);     
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `size'...
Declaration of `create_tiles_table' as <(80cc658)>...
Count...
End.
Adding import create_tiles_table with 4 params
Type is:void
at 2863

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(80cc730)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2886

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(80cc810,80cc878)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2906

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(80cc950,80cc9b8)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2922

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(80cca98)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2937

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(80ccb78,80ccbe0)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2954

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(80ccd90)>...
Declaration of `df_foreach' as <(80cccc0,80ccd28)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2973

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(80ccea0,80ccf08)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2990

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(80ccfe8)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3004

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(80cd0c8)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3018

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(80cd1a8,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3033

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(80cd358,80cd3c0,80cd418)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3060

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(80cd680,80cd6d8)>...
Defining type 'weapon_handler_t' as *(80cd680,80cd6d8)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(80cd7e0,80cd838,80cd8a0)>...
Defining type 'object_handler_t' as *(80cd7e0,80cd838,80cd8a0)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(80cda08)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3087

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(80cdaf8,80cdb50)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3117

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export init;

>int init()
Reading declaration:type is a standard `int'
Declaration of `init' as <()>...
Address:0
=======================>>ENTERING function `init'!
   0: ENTER 

>    create_tiles_table(200);
Symbol:create_tiles_table
   4: PUSH 200
  12: CALLEX 2863 , 4
  24: ADD SP , 4

>    add_tiles_pack("data/tiles.dat");
Symbol:add_tiles_pack
  32: MOV a0 , 0
  40: ADD a0 , ES
  44: PUSH a0
  48: CALLEX 2886 , 4
  60: ADD SP , 4

>    add_script("scripts/rpg.sc");
Symbol:add_script
  68: MOV a0 , 15
  76: ADD a0 , ES
  80: PUSH a0
  84: CALLEX 2836 , 4
  96: ADD SP , 4

>    return 0;
 104: MOV a0 , 0
 112: LEAVE 
 113: RET 
 114: LEAVE 
 115: RET 
+++
Local symbols:
=======================>>LEAVING  function `init'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(80cd7e0,80cd838,80cd8a0)'
 weapon_handler_t : `*(80cd680,80cd6d8)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->init

Global Symbols:
     init : `()' at CS+0
 assign_weapon_handler : `(80cdaf8,80cdb50)' at 3117
 create_weapon_type : `(80cda08)' at 3087
 create_object_type : `(80cd358,80cd3c0,80cd418)' at 3060
   printf : `(80cd1a8,...)' at 3033
    bmp_h : `(80cd0c8)' at 3018
    bmp_w : `(80ccfe8)' at 3004
 bmp_line : `(80ccea0,80ccf08)*' at 2990
 df_foreach : `(80cccc0,80ccd28)' at 2973
 df_count : `(80ccb78,80ccbe0)' at 2954
   df_dat : `(80cca98)*' at 2937
  df_item : `(80cc950,80cc9b8)*' at 2922
 df_get_item : `(80cc810,80cc878)*' at 2906
 add_tiles_pack : `(80cc730)' at 2886
 create_tiles_table : `(80cc658)' at 2863
 add_script : `(80cc570)' at 2836
 exec_script : `(80cc418,80cc480)' at 2817
 addressof : `(80cc338)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(80cbc00,80cbc68,80cbcc0,80cbe70)' at 2639
 create_trans_table : `(80cb910,80cb978,80cb9d0,80cba28,80cba80,80cbad8)' at 2612
 create_light_table : `(80cb620,80cb688,80cb6e0,80cb738,80cb790,80cb7e8)' at 2585
 create_rgb_table : `(80cb468,80cb4d0,80cb528)' at 2558
 save_tga : `(80cb2b0,80cb318,80cb380)' at 2533
 save_pcx : `(80cb0e0,80cb148,80cb1b0)' at 2516
 save_bmp : `(80caf10,80caf78,80cafe0)' at 2499
 save_bitmap : `(80cad60,80cadc8,80cae30)' at 2482
 load_tga : `(80cac08,80cac70)*' at 2462
 load_pcx : `(80caab0,80cab18)*' at 2445
 load_lbm : `(80ca958,80ca9c0)*' at 2428
 load_bmp : `(80ca800,80ca868)*' at 2411
 load_bitmap : `(80ca6c0,80ca728)*' at 2394
 get_filename : `(80ca5e0)*' at 2374
 pack_fputs : `(80ca480,80ca4e8)' at 2353
 pack_fgets : `(80ca2c0,80ca328,80ca380)*' at 2334
 pack_fwrite : `(80ca100,80ca168,80ca1c0)' at 2315
 pack_fread : `(80c9f40,80c9fa8,80ca000)' at 2295
 pack_mputl : `(80c9df8,80c9e50)' at 2276
 pack_mputw : `(80c9cb0,80c9d08)' at 2257
 pack_mgetl : `(80c9bd0)' at 2238
 pack_mgetw : `(80c9af0)' at 2219
 pack_iputl : `(80c99a8,80c9a00)' at 2200
 pack_iputw : `(80c9860,80c98b8)' at 2181
 pack_igetl : `(80c9780)' at 2162
 pack_igetw : `(80c96a0)' at 2143
 pack_fclose_chunk : `(80c95c0)*' at 2124
 pack_fopen_chunk : `(80c9470,80c94d8)*' at 2098
 pack_fseek : `(80c9320,80c9388)' at 2073
 pack_fclose : `(80c9240)' at 2054
 pack_fopen : `(80c90e8,80c9150)*' at 2034
 packfile_password : `(80c9008)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(80c8e38,80c8ea0)' at 1963
 midi_seek : `(80c8d68)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(80c8a50,80c8ab8,80c8b10)' at 1871
 play_midi : `(80c8900,80c8968)' at 1846
 destroy_midi : `(80c8820)' at 1828
 load_midi : `(80c8738)*' at 1807
 adjust_sample : `(80c84b8,80c8520,80c8578,80c85d0,80c8628)' at 1789
 stop_sample : `(80c83d0)' at 1767
 play_sample : `(80c8150,80c81b8,80c8210,80c8268,80c82c0)' at 1747
 destroy_sample : `(80c8070)' at 1727
 load_voc : `(80c7f88)*' at 1704
 load_wav : `(80c7ea8)*' at 1687
 load_sample : `(80c7dc8)*' at 1670
 unload_datafile : `(80c7ce8)' at 1650
 load_datafile : `(80c7c00)*' at 1626
 set_volume : `(80c7ac0,80c7b18)' at 1604
 install_sound : `(80c7910,80c7968,80c79c0)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(80c76a0)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(80c7540)' at 1437
 open_fli : `(80c7458)' at 1413
 play_memory_fli : `(80c7210,80c7278,80c72e0,80c7338)' at 1396
 play_fli : `(80c6fc0,80c7028,80c7090,80c70e8)' at 1372
 destroy_font : `(80c6ee0)' at 1355
 text_height : `(80c6df8)' at 1334
 text_length : `(80c6ca0,80c6d08)' at 1314
 textprintf_centre : `(80c6988,80c69f0,80c6a58,80c6ab0,80c6b08,80c6b60,...)' at 1294
 textprintf : `(80c6668,80c66d0,80c6738,80c6790,80c67e8,80c6840,...)' at 1268
 textout_justify : `(80c6290,80c62f8,80c6360,80c63c8,80c6420,80c6478,80c64d0,80c6528)' at 1249
 textout_centre : `(80c5f80,80c5fe8,80c6050,80c60b8,80c6110,80c6168)' at 1225
  textout : `(80c5c70,80c5cd8,80c5d40,80c5da8,80c5e00,80c5e58)' at 1202
 text_mode : `(80c5ba0)' at 1186
 draw_trans_sprite : `(80c5978,80c59e0,80c5a48,80c5aa0)' at 1168
    clear : `(80c5890)' at 1142
 rotate_scaled_sprite : `(80c5598,80c5600,80c5668,80c56c0,80c5718,80c5770)' at 1128
 rotate_sprite : `(80c52f8,80c5360,80c53c8,80c5420,80c5478)' at 1099
 stretch_sprite : `(80c4ff8,80c5060,80c50c8,80c5120,80c5178,80c51d0)' at 1077
 stretch_blit : `(80c4b58,80c4bc0,80c4c28,80c4c80,80c4cd8,80c4d30,80c4d88,80c4de0,80c4e38,80c4e90)' at 1054
 masked_blit : `(80c4788,80c47f0,80c4858,80c48b0,80c4908,80c4960,80c49b8,80c4a10)' at 1033
     blit : `(80c43c0,80c4428,80c4490,80c44e8,80c4540,80c4598,80c45f0,80c4648)' at 1013
 floodfill : `(80c41a8,80c4210,80c4268,80c42c0)' at 1000
   spline : `(80c3fe8,80c4050,80c40b8)' at 982
 calc_spline : `(80c3db0,80c3e18,80c3e70,80c3ed8)' at 967
 ellipsefill : `(80c3ac8,80c3b30,80c3b88,80c3be0,80c3c38,80c3c90)' at 947
  ellipse : `(80c37e0,80c3848,80c38a0,80c38f8,80c3950,80c39a8)' at 927
 do_ellipse : `(80c3300,80c3368,80c33c0,80c3418,80c3470,80c34c8,80c3520)' at 911
 circlefill : `(80c3080,80c30e8,80c3140,80c3198,80c31f0)' at 892
   circle : `(80c2e00,80c2e68,80c2ec0,80c2f18,80c2f70)' at 873
 do_circle : `(80c2988,80c29f0,80c2a48,80c2aa0,80c2af8,80c2b50)' at 858
     rect : `(80c26a0,80c2708,80c2760,80c27b8,80c2810,80c2868)' at 840
  polygon : `(80c2478,80c24e0,80c2538,80c25a0)' at 827
 triangle : `(80c20c0,80c2128,80c2180,80c21d8,80c2230,80c2288,80c22e0,80c2338)' at 811
  do_line : `(80c1be0,80c1c48,80c1ca0,80c1cf8,80c1d50,80c1da8,80c1e00)' at 794
 solid_mode : `()' at 778
 xor_mode : `(80c1a98)' at 759
 drawing_mode : `(80c1880,80c18d8,80c1940,80c1998)' at 742
 set_clip : `(80c15f8,80c1660,80c16b8,80c1710,80c1768)' at 721
 putpixel : `(80c13e0,80c1448,80c14a0,80c14f8)' at 704
 getb_depth : `(80c12a8,80c1300)' at 687
 getg_depth : `(80c1170,80c11c8)' at 668
 getr_depth : `(80c1038,80c1090)' at 649
     getb : `(80c0f68)' at 630
     getg : `(80c0e98)' at 617
     getr : `(80c0dc8)' at 604
 makecol_depth : `(80c0bc0,80c0c18,80c0c70,80c0cc8)' at 591
 makecol8 : `(80c0a18,80c0a70,80c0ac8)' at 569
  makecol : `(80c0878,80c08d0,80c0928)' at 552
 bestfit_color : `(80c0670,80c06c8,80c0720,80c0778)' at 536
 generate_optimized_palette : `(80c04a8,80c0510,80c0568)' at 514
 generate_332_palette : `(80c03c8)' at 479
 get_pallete_range : `(80c0218,80c0270,80c02c8)' at 450
 get_pallete : `(80c0140)' at 424
 get_color : `(80bfff8,80c0050)' at 404
 set_pallete_range : `(80bfdf0,80bfe48,80bfea0,80bfef8)' at 386
 set_pallete : `(80bfd18)' at 360
 set_color : `(80bfbd0,80bfc28)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(80bf748)' at 288
 create_sub_bitmap : `(80bf4c0,80bf528,80bf580,80bf5d8,80bf630)*' at 265
 create_bitmap_ex : `(80bf318,80bf370,80bf3c8)*' at 239
 create_bitmap : `(80bf1d8,80bf230)*' at 214
 set_gfx_mode : `(80bbaf8,80bbb50,80bbba8,80bbc00,80bbc58)' at 192
 set_color_conversion : `(80bba20)' at 171
 set_color_depth : `(80b73b8)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:116
Inits size:0
Consts size:30
Data size:0
Stack size:4000
Doing CleanUp....................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135064909
with addr:134522892 and params:0
Importing allegro_exit at 135064930
with addr:134522860 and params:0
Importing install_mouse at 135064952
with addr:134522012 and params:0
Importing install_timer at 135064974
with addr:134522844 and params:0
Importing install_keyboard at 135064999
with addr:134522828 and params:0
Importing screen at 135065014
with addr:134719068 and params:-1
Importing set_color_depth at 135065038
with addr:134522876 and params:4
Importing set_color_conversion at 135065067
with addr:134521212 and params:4
Importing set_gfx_mode at 135065088
with addr:134521052 and params:20
Importing create_bitmap at 135065110
with addr:134522220 and params:8
Importing create_bitmap_ex at 135065135
with addr:134521996 and params:12
Importing create_sub_bitmap at 135065161
with addr:134521180 and params:20
Importing destroy_bitmap at 135065184
with addr:134522732 and params:4
Importing rgb_map at 135065200
with addr:134720268 and params:-1
Importing color_map at 135065218
with addr:134720260 and params:-1
Importing set_color at 135065236
with addr:134522684 and params:8
Importing set_pallete at 135065256
with addr:134521484 and params:1024
Importing set_pallete_range at 135065282
with addr:134521580 and params:1036
Importing get_color at 135065300
with addr:134522620 and params:8
Importing get_pallete at 135065320
with addr:134521276 and params:1024
Importing get_pallete_range at 135065346
with addr:134523372 and params:1032
Importing generate_332_palette at 135065375
with addr:134520908 and params:1024
Importing generate_optimized_palette at 135065410
with addr:134522940 and params:1284
Importing bestfit_color at 135065432
with addr:134522124 and params:1036
Importing makecol at 135065448
with addr:134523244 and params:12
Importing makecol8 at 135065465
with addr:134523308 and params:12
Importing makecol_depth at 135065487
with addr:134521884 and params:16
Importing getr at 135065500
with addr:134522092 and params:4
Importing getg at 135065513
with addr:134522908 and params:4
Importing getb at 135065526
with addr:134523068 and params:4
Importing getr_depth at 135065545
with addr:134522988 and params:8
Importing getg_depth at 135065564
with addr:134521532 and params:8
Importing getb_depth at 135065583
with addr:134522476 and params:8
Importing putpixel at 135065600
with addr:134521196 and params:16
Importing set_clip at 135065617
with addr:134522812 and params:20
Importing drawing_mode at 135065638
with addr:134520876 and params:16
Importing xor_mode at 135065655
with addr:134521676 and params:4
Importing solid_mode at 135065674
with addr:134521116 and params:0
Importing do_line at 135065690
with addr:134522508 and params:28
Importing triangle at 135065707
with addr:134521132 and params:32
Importing polygon at 135065723
with addr:134521468 and params:16
Importing rect at 135065736
with addr:134522924 and params:24
Importing do_circle at 135065754
with addr:134520924 and params:24
Importing circle at 135065769
with addr:134521964 and params:20
Importing circlefill at 135065788
with addr:134522972 and params:20
Importing do_ellipse at 135065807
with addr:134521324 and params:28
Importing ellipse at 135065823
with addr:134523276 and params:24
Importing ellipsefill at 135065843
with addr:134521036 and params:24
Importing calc_spline at 135065863
with addr:134522076 and params:16
Importing spline at 135065878
with addr:134521068 and params:40
Importing floodfill at 135065896
with addr:134522284 and params:16
Importing blit at 135065909
with addr:134522492 and params:32
Importing masked_blit at 135065929
with addr:134523404 and params:32
Importing stretch_blit at 135065950
with addr:134523292 and params:40
Importing stretch_sprite at 135065973
with addr:134522796 and params:24
Importing rotate_sprite at 135065995
with addr:134523036 and params:20
Importing rotate_scaled_sprite at 135066024
with addr:134521564 and params:24
Importing clear at 135066038
with addr:134521852 and params:4
Importing draw_trans_sprite at 135066064
with addr:134521404 and params:16
Importing text_mode at 135066082
with addr:134522604 and params:4
Importing textout at 135066098
with addr:134521020 and params:24
Importing textout_centre at 135066121
with addr:134522140 and params:24
Importing textout_justify at 135066145
with addr:134521788 and params:32
Importing textprintf at 135066164
with addr:134520956 and params:24
Importing textprintf_centre at 135066190
with addr:134521932 and params:24
Importing text_length at 135066210
with addr:134522060 and params:8
Importing text_height at 135066230
with addr:134521084 and params:4
Importing destroy_font at 135066251
with addr:134522700 and params:4
Importing play_fli at 135066268
with addr:134523132 and params:16
Importing play_memory_fli at 135066292
with addr:134521724 and params:16
Importing open_fli at 135066309
with addr:134522780 and params:4
Importing open_memory_fli at 135066333
with addr:134520972 and params:4
Importing close_fli at 135066351
with addr:134521756 and params:0
Importing next_fli_frame at 135066374
with addr:134522172 and params:4
Importing reset_fli_variables at 135066402
with addr:134521164 and params:0
Importing fli_bitmap at 135066421
with addr:134719060 and params:-1
Importing fli_pallete at 135066441
with addr:134719088 and params:-1
Importing fli_frame at 135066459
with addr:134720264 and params:-1
Importing install_sound at 135066481
with addr:134523164 and params:12
Importing set_volume at 135066500
with addr:134521452 and params:8
Importing load_datafile at 135066522
with addr:134523324 and params:4
Importing unload_datafile at 135066546
with addr:134523116 and params:4
Importing load_sample at 135066566
with addr:134521628 and params:4
Importing load_wav at 135066583
with addr:134521900 and params:4
Importing load_voc at 135066600
with addr:134521308 and params:4
Importing destroy_sample at 135066623
with addr:134523196 and params:4
Importing play_sample at 135066643
with addr:134521516 and params:20
Importing stop_sample at 135066663
with addr:134523180 and params:4
Importing adjust_sample at 135066685
with addr:134521708 and params:20
Importing load_midi at 135066703
with addr:134522348 and params:4
Importing destroy_midi at 135066724
with addr:134521740 and params:4
Importing play_midi at 135066742
with addr:134521612 and params:8
Importing play_looped_midi at 135066767
with addr:134522572 and params:12
Importing stop_midi at 135066785
with addr:134521260 and params:0
Importing midi_pause at 135066804
with addr:134522428 and params:0
Importing midi_resume at 135066824
with addr:134522668 and params:0
Importing midi_seek at 135066842
with addr:134521804 and params:4
Importing midi_out at 135066859
with addr:134522108 and params:8
Importing load_midi_patches at 135066885
with addr:134521660 and params:0
Importing packfile_password at 135066911
with addr:134522540 and params:4
Importing pack_fopen at 135066930
with addr:134522300 and params:8
Importing pack_fclose at 135066950
with addr:134522252 and params:4
Importing pack_fseek at 135066969
with addr:134522716 and params:8
Importing pack_fopen_chunk at 135066994
with addr:134521148 and params:8
Importing pack_fclose_chunk at 135067020
with addr:134523228 and params:4
Importing pack_igetw at 135067039
with addr:134522444 and params:4
Importing pack_igetl at 135067058
with addr:134521644 and params:4
Importing pack_iputw at 135067077
with addr:134521340 and params:8
Importing pack_iputl at 135067096
with addr:134521356 and params:8
Importing pack_mgetw at 135067115
with addr:134521772 and params:4
Importing pack_mgetl at 135067134
with addr:134523260 and params:4
Importing pack_mputw at 135067153
with addr:134521596 and params:8
Importing pack_mputl at 135067172
with addr:134522588 and params:8
Importing pack_fread at 135067191
with addr:134522236 and params:12
Importing pack_fwrite at 135067211
with addr:134522764 and params:12
Importing pack_fgets at 135067230
with addr:134521388 and params:12
Importing pack_fputs at 135067249
with addr:134521372 and params:8
Importing get_filename at 135067270
with addr:134521868 and params:4
Importing load_bitmap at 135067290
with addr:134522204 and params:8
Importing load_bmp at 135067307
with addr:134520940 and params:8
Importing load_lbm at 135067324
with addr:134522748 and params:8
Importing load_pcx at 135067341
with addr:134521548 and params:8
Importing load_tga at 135067358
with addr:134522524 and params:8
Importing save_bitmap at 135067378
with addr:134521948 and params:12
Importing save_bmp at 135067395
with addr:134523052 and params:12
Importing save_pcx at 135067412
with addr:134521916 and params:12
Importing save_tga at 135067429
with addr:134522396 and params:12
Importing create_rgb_table at 135067454
with addr:134523084 and params:1032
Importing create_light_table at 135067481
with addr:134523340 and params:1044
Importing create_trans_table at 135067508
with addr:134522460 and params:1044
Importing create_color_table at 135067535
with addr:134522332 and params:1036
Importing mouse_x at 135067551
with addr:134719048 and params:-1
Importing mouse_y at 135067567
with addr:134720248 and params:-1
Importing mouse_b at 135067583
with addr:134719080 and params:-1
Importing mouse_pos at 135067601
with addr:134720252 and params:-1
Importing freeze_mouse_flag at 135067627
with addr:134720112 and params:-1
Importing keypressed at 135067646
with addr:134521980 and params:0
Importing readkey at 135067662
with addr:134523020 and params:0
Importing dbuf at 135067675
with addr:134729968 and params:-1
Importing addressof at 135067693
with addr:134525244 and params:4
Importing exec_script at 135067713
with addr:134525264 and params:8
Importing add_script at 135067732
with addr:134525504 and params:4
Importing create_tiles_table at 135067759
with addr:134525888 and params:4
Importing add_tiles_pack at 135067782
with addr:134525932 and params:4
Importing df_get_item at 135067802
with addr:134524932 and params:8
Importing df_item at 135067818
with addr:134525016 and params:8
Importing df_dat at 135067833
with addr:134525040 and params:4
Importing df_count at 135067850
with addr:134525060 and params:8
Importing df_foreach at 135067869
with addr:134525112 and params:8
Importing bmp_line at 135067886
with addr:134525172 and params:8
Importing bmp_w at 135067900
with addr:134525204 and params:4
Importing bmp_h at 135067914
with addr:134525224 and params:4
Importing printf at 135067929
with addr:134520988 and params:4
Importing create_object_type at 135067956
with addr:134532896 and params:12
Importing create_weapon_type at 135067983
with addr:134534112 and params:4
Importing assign_weapon_handler at 135068013
with addr:134534224 and params:8
Importing  at 135068022

0:Address 0, size 0,Calling 79
Size of params:0


Executing function from init.sc!
 0:ENTER 134995156 
NOP 
NOP 
NOP 
 4:$00c8(=$200) PUSH (SP=3992) 
 12:{$0b2f(=$2863),$0004(=$4)}CALLEX
 24:{a245(=$3992),$0004(=$4)}ADD
 32:{a0(=$134983280),$0000(=$0)}MOV
 40:{a0(=$0),a242(=$135068146)}ADD
 44:a0(=$135068146) PUSH (SP=3992) 
 48:{$0b46(=$2886),$0004(=$4)}CALLEX
 60:{a245(=$3992),$0004(=$4)}ADD
 68:{a0(=$16777216),$000f(=$15)}MOV
 76:{a0(=$15),a242(=$135068146)}ADD
 80:a0(=$135068161) PUSH (SP=3992) 
 84:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void create_tiles_table(int size);     
262>import void add_tiles_pack(char *filename);   
263>
264> 
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>unsigned int x, y;
284>};
285>
286> 
287>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
288>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
289>typedef void weapon_type_t;	       
290>import int create_weapon_type(char *name);    
291>import int assign_weapon_handler(int typenum, seer_addr handler);
292>
293>#! 7 "scripts/imports.sh"
294>
295>
296>#! 7 "!!_internal_Script"
297>
298>export script_main;
299>export script_exit;
300>
301>
302>DATAFILE *dat;
303>BITMAP *ammo, *weapon, *projectile, *status;
304>int typenum;
305>
306>
307>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
308>{
309>    
310>
311>
312>
313>
314>
315>
316>	
317>}
318>
319>
320>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
321>{
322>    
323>
324>
325>
326>
327>
328>
329>
330>
331>}
332>
333>
334>void rpg(msg_t msg, player_t *pl)
335>{
336>    
337>
338>
339>
340>
341>
342>
343>
344>
345>}
346>
347>
348>
349>
350>
351>
352>int script_main()
353>{
354>    dat = load_datafile("data/rpg.dat");
355>    if (!dat)
356>      return -1;
357>
358>    ammo 	= df_dat(df_get_item(dat, "ammo"));
359>    weapon 	= df_dat(df_get_item(dat, "weapon"));
360>    projectile  = df_dat(df_get_item(dat, "ejected"));
361>    status 	= df_dat(df_get_item(dat, "status"));
362>
363>    typenum = create_weapon_type("rpg");
364>    assign_weapon_handler(typenum, addressof("rpg"));
365>    
366>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
367>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
368>       
369>    return 0;
370>}
371>
372>
373>
374>
375>
376>
377>
378>void script_exit()
379>{
380>    unload_datafile(dat);
381>}
382>
383>
384>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(80bf068)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(80befc8)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(80be940,80be998,80be9f0,80bea48,80ce8c8)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(80ce9e0,80becc8)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(80bedb0,80bee08,80d2aa0)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(80d2b98,80d2c00,80d33e0,80d3438,80d3490)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(80d3578)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(80d4278,80d42d0)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(80d4768)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(80d4840,80d4898,80d48f0,80d4948)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(80d4a20,80d4e58)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(80d4f38)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(80d5010,80d5068,80d50c0)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(80d9ea8)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(80d9f78,80d9fe0,80da038)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(80da140,80da198,80da1f0,80da248)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(80d5a80,80d5ad8,80d5b30)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(80d5c20,80d5c78,80d5cd0)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(80d5dc8,80d5e20,80d5e78,80d5ed0)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(80d6d48)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(80d6e18)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(80d6ee8)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(80d6fb8,80d7010)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(80d70f0,80d7148)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(80d7228,80e01c0)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(80e02a0,80e0308,80e0360,80e03b8)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(80e04b8,80e0520,80e0578,80e05d0,80e0628)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(80e0740,80e0798,80e0800,80e0858)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(80e0958)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80e0d28,80e0d80,80e0dc8,80e0e10)>...
Declaration of `do_line' as <(80e0aa0,80e0b08,80e0b60,80e0bb8,80e0c10,80e0c68,80e0cc0)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(80e0f80,80e0fe8,80e1040,80e1098,80e10f0,80e1148,80e11a0,80e11f8)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(80e1338,80e13a0,80e13f8,80e1460)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(80e1560,80e15c8,80e1620,80e1678,80e16d0,80e1728)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80e1a78,80e1ad0,80e1b18,80e1b60)>...
Declaration of `do_circle' as <(80e1848,80e18b0,80e1908,80e1960,80e19b8,80e1a10)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(80e1cb0,80e1d18,80e1d70,80e1dc8,80e1e20)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(80e1f30,80e1f98,80e1ff0,80e2048,80e20a0)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80e2438,80e2490,80e24d8,80e2520)>...
Declaration of `do_ellipse' as <(80e21b0,80e2218,80e2270,80e22c8,80e2320,80e2378,80e23d0)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(80e2690,80e26f8,80e2750,80e27a8,80e2800,80e2858)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(80e2978,80e29e0,80e2a38,80e2a90,80e2ae8,80e2b40)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(80e2c60,80e2cc8,80e2d20,80e2d88)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(80e2e98,80e2f00,80e2f68)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(80e3058,80e30c0,80e3118,80e3170)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(80e3270,80e32d8,80e3340,80e3398,80e33f0,80e3448,80e34a0,80e34f8)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(80e3638,80e36a0,80e3708,80e3760,80e37b8,80e3810,80e3868,80e38c0)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(80e3a08,80e3a70,80e3ad8,80e3b30,80e3b88,80e3be0,80e3c38,80e3c90,80e3ce8,80e3d40)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(80e3ea8,80e3f10,80e3f78,80e3fd0,80e4028,80e4080)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(80e41a8,80e4210,80e4278,80e42d0,80e4328)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(80e4448,80e44b0,80e4518,80e4570,80e45c8,80e4620)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(80e4740)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(80e4828,80e4890,80e48f8,80e4950)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(80e4a50)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(80e4b20,80e4b88,80e4bf0,80e4c58,80e4cb0,80e4d08)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(80e4e30,80e4e98,80e4f00,80e4f68,80e4fc0,80e5018)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(80e5108,80e5170,80e51d8,80e5240,80e5298,80e52f0,80e5348,80e53a0)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(80e54e0,80e5548,80e55b0,80e5608,80e5660,80e56b8,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(80e5800,80e5868,80e58d0,80e5928,80e5980,80e59d8,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(80e5b18,80e5b80)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(80e5c70)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(80e5d58)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(80e5e38,80e5ea0,80e5f08,80e5f60)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(80e6070,80e60d8,80e6140,80e6198)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(80e62c8)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(80e63b0)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(80e6510)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(80e6780,80e67d8,80e6830)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(80e6930,80e6988)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(80e6a70)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(80e6b58)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(80e6c38)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(80e6d18)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(80e6df8)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(80e6ee0)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(80e6fc0,80e7028,80e7080,80e70d8,80e7130)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(80e7240)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(80e7328,80e7390,80e73e8,80e7440,80e7498)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(80e75a8)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(80e7690)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(80e7770,80e77d8)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(80e78c0,80e7928,80e7980)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(80e7bd8)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(80e7ca8,80e7d10)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(80e7e78)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(80e7f58,80e7fc0)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(80e80b0)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(80e8190,80e81f8)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(80e82e0,80e8348)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(80e8430)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(80e8510)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(80e85f0)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(80e86d0,80e8728)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(80e8818,80e8870)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(80e8948)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(80e8a28)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(80e8b08,80e8b60)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(80e8c50,80e8ca8)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(80e8d98,80e8e00,80e8e58)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(80e8f58,80e8fc0,80e9018)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(80e9118,80e9180,80e91d8)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(80e92d8,80e9340)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(80e9438)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(80e9518,80e9580)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(80e9670,80e96d8)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(80e97c8,80e9830)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(80e9920,80e9988)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(80e9a78,80e9ae0)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(80e9bd0,80e9c38,80e9ca0)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(80e9da0,80e9e08,80e9e70)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(80e9f70,80e9fd8,80ea040)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(80ea140,80ea1a8,80ea210)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(80ea318,80ea380,80ea3d8)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(80ea4d0,80ea538,80ea590,80ea5e8,80ea640,80ea698)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(80ea7c0,80ea828,80ea880,80ea8d8,80ea930,80ea988)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(80eabd8,80eac30,80eac88)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(80eaab0,80eab18,80eab70,80ead20)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(80eb1e8)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(80eb2c8,80eb330)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(80eb420)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void create_tiles_table(int size);     
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `size'...
Declaration of `create_tiles_table' as <(80eb508)>...
Count...
End.
Adding import create_tiles_table with 4 params
Type is:void
at 2863

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(80eb5e0)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2886

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(80eb6c0,80eb728)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2906

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(80eb800,80eb868)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2922

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(80eb948)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2937

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(80eba28,80eba90)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2954

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(80ebc40)>...
Declaration of `df_foreach' as <(80ebb70,80ebbd8)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2973

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(80ebd50,80ebdb8)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2990

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(80ebe98)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3004

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(80ebf78)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3018

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(80ec058,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3033

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(80ec208,80ec270,80ec2c8)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3060

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(80ec530,80ec588)>...
Defining type 'weapon_handler_t' as *(80ec530,80ec588)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(80ec690,80ec6e8,80ec750)>...
Defining type 'object_handler_t' as *(80ec690,80ec6e8,80ec750)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(80ec8b8)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3087

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(80ec9a8,80eca00)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3117

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *projectile, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `projectile' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(80ecdf0,80ece48,80eceb0)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(80ecfb8,80ed010,80ed078)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void rpg(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `rpg' as <(80ed158,80ed1b0)>...
Address:8
=======================>>ENTERING function `rpg'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `rpg'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/rpg.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 13
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2906 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2937 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 18
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2906 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2937 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    projectile  = df_dat(df_get_item(dat, "ejected"));
Symbol:projectile
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 25
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2906 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2937 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 320: MOV a0 , 33
 328: ADD a0 , ES
 332: PUSH a0
 336: PUSH [DS+4]
 344: CALLEX 2906 , 8
 356: ADD SP , 8
 364: PUSH a0
 368: CALLEX 2937 , 4
 380: ADD SP , 4
 388: MOV [DS+20] , a0

>    typenum = create_weapon_type("rpg");
Symbol:typenum
Symbol:create_weapon_type
 396: MOV a0 , 40
 404: ADD a0 , ES
 408: PUSH a0
 412: CALLEX 3087 , 4
 424: ADD SP , 4
 432: MOV [DS+24] , a0

>    assign_weapon_handler(typenum, addressof("rpg"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 440: MOV a0 , 44
 448: ADD a0 , ES
 452: PUSH a0
 456: CALLEX 2797 , 4
 468: ADD SP , 4
 476: PUSH a0
 480: PUSH [DS+24]
 488: CALLEX 3117 , 8
 500: ADD SP , 8

>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 508: MOV a0 , 48
 516: ADD a0 , ES
Symbol:addressof
 520: PUSH a0
 524: MOV a1 , 57
 532: ADD a1 , ES
 536: PUSH a1
 540: CALLEX 2797 , 4
 552: MOV a1 , a0
 556: ADD SP , 4
 564: POP a0
Symbol:ammo
 568: PUSH [DS+8]
 576: PUSH a1
 580: PUSH a0
 584: CALLEX 3060 , 12
 596: ADD SP , 12

>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 604: MOV a0 , 69
 612: ADD a0 , ES
Symbol:addressof
 616: PUSH a0
 620: MOV a1 , 80
 628: ADD a1 , ES
 632: PUSH a1
 636: CALLEX 2797 , 4
 648: MOV a1 , a0
 652: ADD SP , 4
 660: POP a0
Symbol:weapon
 664: PUSH [DS+12]
 672: PUSH a1
 676: PUSH a0
 680: CALLEX 3060 , 12
 692: ADD SP , 12

>    return 0;
 700: MOV a0 , 0
 708: LEAVE 
 709: RET 
 710: LEAVE 
 711: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:712
=======================>>ENTERING function `script_exit'!
 712: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 716: PUSH [DS+4]
 724: CALLEX 1650 , 4
 736: ADD SP , 4
 744: LEAVE 
 745: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(80ec690,80ec6e8,80ec750)'
 weapon_handler_t : `*(80ec530,80ec588)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+712
 script_main : `()' at CS+12
      rpg : `(80ed158,80ed1b0)' at CS+8
 weapon_pickup : `(80ecfb8,80ed010,80ed078)' at CS+4
 ammo_pickup : `(80ecdf0,80ece48,80eceb0)' at CS+0
  typenum : at DS+24
   status : `*' at DS+20
 projectile : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(80ec9a8,80eca00)' at 3117
 create_weapon_type : `(80ec8b8)' at 3087
 create_object_type : `(80ec208,80ec270,80ec2c8)' at 3060
   printf : `(80ec058,...)' at 3033
    bmp_h : `(80ebf78)' at 3018
    bmp_w : `(80ebe98)' at 3004
 bmp_line : `(80ebd50,80ebdb8)*' at 2990
 df_foreach : `(80ebb70,80ebbd8)' at 2973
 df_count : `(80eba28,80eba90)' at 2954
   df_dat : `(80eb948)*' at 2937
  df_item : `(80eb800,80eb868)*' at 2922
 df_get_item : `(80eb6c0,80eb728)*' at 2906
 add_tiles_pack : `(80eb5e0)' at 2886
 create_tiles_table : `(80eb508)' at 2863
 add_script : `(80eb420)' at 2836
 exec_script : `(80eb2c8,80eb330)' at 2817
 addressof : `(80eb1e8)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(80eaab0,80eab18,80eab70,80ead20)' at 2639
 create_trans_table : `(80ea7c0,80ea828,80ea880,80ea8d8,80ea930,80ea988)' at 2612
 create_light_table : `(80ea4d0,80ea538,80ea590,80ea5e8,80ea640,80ea698)' at 2585
 create_rgb_table : `(80ea318,80ea380,80ea3d8)' at 2558
 save_tga : `(80ea140,80ea1a8,80ea210)' at 2533
 save_pcx : `(80e9f70,80e9fd8,80ea040)' at 2516
 save_bmp : `(80e9da0,80e9e08,80e9e70)' at 2499
 save_bitmap : `(80e9bd0,80e9c38,80e9ca0)' at 2482
 load_tga : `(80e9a78,80e9ae0)*' at 2462
 load_pcx : `(80e9920,80e9988)*' at 2445
 load_lbm : `(80e97c8,80e9830)*' at 2428
 load_bmp : `(80e9670,80e96d8)*' at 2411
 load_bitmap : `(80e9518,80e9580)*' at 2394
 get_filename : `(80e9438)*' at 2374
 pack_fputs : `(80e92d8,80e9340)' at 2353
 pack_fgets : `(80e9118,80e9180,80e91d8)*' at 2334
 pack_fwrite : `(80e8f58,80e8fc0,80e9018)' at 2315
 pack_fread : `(80e8d98,80e8e00,80e8e58)' at 2295
 pack_mputl : `(80e8c50,80e8ca8)' at 2276
 pack_mputw : `(80e8b08,80e8b60)' at 2257
 pack_mgetl : `(80e8a28)' at 2238
 pack_mgetw : `(80e8948)' at 2219
 pack_iputl : `(80e8818,80e8870)' at 2200
 pack_iputw : `(80e86d0,80e8728)' at 2181
 pack_igetl : `(80e85f0)' at 2162
 pack_igetw : `(80e8510)' at 2143
 pack_fclose_chunk : `(80e8430)*' at 2124
 pack_fopen_chunk : `(80e82e0,80e8348)*' at 2098
 pack_fseek : `(80e8190,80e81f8)' at 2073
 pack_fclose : `(80e80b0)' at 2054
 pack_fopen : `(80e7f58,80e7fc0)*' at 2034
 packfile_password : `(80e7e78)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(80e7ca8,80e7d10)' at 1963
 midi_seek : `(80e7bd8)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(80e78c0,80e7928,80e7980)' at 1871
 play_midi : `(80e7770,80e77d8)' at 1846
 destroy_midi : `(80e7690)' at 1828
 load_midi : `(80e75a8)*' at 1807
 adjust_sample : `(80e7328,80e7390,80e73e8,80e7440,80e7498)' at 1789
 stop_sample : `(80e7240)' at 1767
 play_sample : `(80e6fc0,80e7028,80e7080,80e70d8,80e7130)' at 1747
 destroy_sample : `(80e6ee0)' at 1727
 load_voc : `(80e6df8)*' at 1704
 load_wav : `(80e6d18)*' at 1687
 load_sample : `(80e6c38)*' at 1670
 unload_datafile : `(80e6b58)' at 1650
 load_datafile : `(80e6a70)*' at 1626
 set_volume : `(80e6930,80e6988)' at 1604
 install_sound : `(80e6780,80e67d8,80e6830)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(80e6510)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(80e63b0)' at 1437
 open_fli : `(80e62c8)' at 1413
 play_memory_fli : `(80e6070,80e60d8,80e6140,80e6198)' at 1396
 play_fli : `(80e5e38,80e5ea0,80e5f08,80e5f60)' at 1372
 destroy_font : `(80e5d58)' at 1355
 text_height : `(80e5c70)' at 1334
 text_length : `(80e5b18,80e5b80)' at 1314
 textprintf_centre : `(80e5800,80e5868,80e58d0,80e5928,80e5980,80e59d8,...)' at 1294
 textprintf : `(80e54e0,80e5548,80e55b0,80e5608,80e5660,80e56b8,...)' at 1268
 textout_justify : `(80e5108,80e5170,80e51d8,80e5240,80e5298,80e52f0,80e5348,80e53a0)' at 1249
 textout_centre : `(80e4e30,80e4e98,80e4f00,80e4f68,80e4fc0,80e5018)' at 1225
  textout : `(80e4b20,80e4b88,80e4bf0,80e4c58,80e4cb0,80e4d08)' at 1202
 text_mode : `(80e4a50)' at 1186
 draw_trans_sprite : `(80e4828,80e4890,80e48f8,80e4950)' at 1168
    clear : `(80e4740)' at 1142
 rotate_scaled_sprite : `(80e4448,80e44b0,80e4518,80e4570,80e45c8,80e4620)' at 1128
 rotate_sprite : `(80e41a8,80e4210,80e4278,80e42d0,80e4328)' at 1099
 stretch_sprite : `(80e3ea8,80e3f10,80e3f78,80e3fd0,80e4028,80e4080)' at 1077
 stretch_blit : `(80e3a08,80e3a70,80e3ad8,80e3b30,80e3b88,80e3be0,80e3c38,80e3c90,80e3ce8,80e3d40)' at 1054
 masked_blit : `(80e3638,80e36a0,80e3708,80e3760,80e37b8,80e3810,80e3868,80e38c0)' at 1033
     blit : `(80e3270,80e32d8,80e3340,80e3398,80e33f0,80e3448,80e34a0,80e34f8)' at 1013
 floodfill : `(80e3058,80e30c0,80e3118,80e3170)' at 1000
   spline : `(80e2e98,80e2f00,80e2f68)' at 982
 calc_spline : `(80e2c60,80e2cc8,80e2d20,80e2d88)' at 967
 ellipsefill : `(80e2978,80e29e0,80e2a38,80e2a90,80e2ae8,80e2b40)' at 947
  ellipse : `(80e2690,80e26f8,80e2750,80e27a8,80e2800,80e2858)' at 927
 do_ellipse : `(80e21b0,80e2218,80e2270,80e22c8,80e2320,80e2378,80e23d0)' at 911
 circlefill : `(80e1f30,80e1f98,80e1ff0,80e2048,80e20a0)' at 892
   circle : `(80e1cb0,80e1d18,80e1d70,80e1dc8,80e1e20)' at 873
 do_circle : `(80e1848,80e18b0,80e1908,80e1960,80e19b8,80e1a10)' at 858
     rect : `(80e1560,80e15c8,80e1620,80e1678,80e16d0,80e1728)' at 840
  polygon : `(80e1338,80e13a0,80e13f8,80e1460)' at 827
 triangle : `(80e0f80,80e0fe8,80e1040,80e1098,80e10f0,80e1148,80e11a0,80e11f8)' at 811
  do_line : `(80e0aa0,80e0b08,80e0b60,80e0bb8,80e0c10,80e0c68,80e0cc0)' at 794
 solid_mode : `()' at 778
 xor_mode : `(80e0958)' at 759
 drawing_mode : `(80e0740,80e0798,80e0800,80e0858)' at 742
 set_clip : `(80e04b8,80e0520,80e0578,80e05d0,80e0628)' at 721
 putpixel : `(80e02a0,80e0308,80e0360,80e03b8)' at 704
 getb_depth : `(80d7228,80e01c0)' at 687
 getg_depth : `(80d70f0,80d7148)' at 668
 getr_depth : `(80d6fb8,80d7010)' at 649
     getb : `(80d6ee8)' at 630
     getg : `(80d6e18)' at 617
     getr : `(80d6d48)' at 604
 makecol_depth : `(80d5dc8,80d5e20,80d5e78,80d5ed0)' at 591
 makecol8 : `(80d5c20,80d5c78,80d5cd0)' at 569
  makecol : `(80d5a80,80d5ad8,80d5b30)' at 552
 bestfit_color : `(80da140,80da198,80da1f0,80da248)' at 536
 generate_optimized_palette : `(80d9f78,80d9fe0,80da038)' at 514
 generate_332_palette : `(80d9ea8)' at 479
 get_pallete_range : `(80d5010,80d5068,80d50c0)' at 450
 get_pallete : `(80d4f38)' at 424
 get_color : `(80d4a20,80d4e58)' at 404
 set_pallete_range : `(80d4840,80d4898,80d48f0,80d4948)' at 386
 set_pallete : `(80d4768)' at 360
 set_color : `(80d4278,80d42d0)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(80d3578)' at 288
 create_sub_bitmap : `(80d2b98,80d2c00,80d33e0,80d3438,80d3490)*' at 265
 create_bitmap_ex : `(80bedb0,80bee08,80d2aa0)*' at 239
 create_bitmap : `(80ce9e0,80becc8)*' at 214
 set_gfx_mode : `(80be940,80be998,80be9f0,80bea48,80ce8c8)' at 192
 set_color_conversion : `(80befc8)' at 171
 set_color_depth : `(80bf068)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:746
Inits size:0
Consts size:94
Data size:28
Stack size:4000
REALLOC from 4090 to 4712!!
Doing CleanUp..............................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135189511
with addr:134522892 and params:0
Importing allegro_exit at 135189532
with addr:134522860 and params:0
Importing install_mouse at 135189554
with addr:134522012 and params:0
Importing install_timer at 135189576
with addr:134522844 and params:0
Importing install_keyboard at 135189601
with addr:134522828 and params:0
Importing screen at 135189616
with addr:134719068 and params:-1
Importing set_color_depth at 135189640
with addr:134522876 and params:4
Importing set_color_conversion at 135189669
with addr:134521212 and params:4
Importing set_gfx_mode at 135189690
with addr:134521052 and params:20
Importing create_bitmap at 135189712
with addr:134522220 and params:8
Importing create_bitmap_ex at 135189737
with addr:134521996 and params:12
Importing create_sub_bitmap at 135189763
with addr:134521180 and params:20
Importing destroy_bitmap at 135189786
with addr:134522732 and params:4
Importing rgb_map at 135189802
with addr:134720268 and params:-1
Importing color_map at 135189820
with addr:134720260 and params:-1
Importing set_color at 135189838
with addr:134522684 and params:8
Importing set_pallete at 135189858
with addr:134521484 and params:1024
Importing set_pallete_range at 135189884
with addr:134521580 and params:1036
Importing get_color at 135189902
with addr:134522620 and params:8
Importing get_pallete at 135189922
with addr:134521276 and params:1024
Importing get_pallete_range at 135189948
with addr:134523372 and params:1032
Importing generate_332_palette at 135189977
with addr:134520908 and params:1024
Importing generate_optimized_palette at 135190012
with addr:134522940 and params:1284
Importing bestfit_color at 135190034
with addr:134522124 and params:1036
Importing makecol at 135190050
with addr:134523244 and params:12
Importing makecol8 at 135190067
with addr:134523308 and params:12
Importing makecol_depth at 135190089
with addr:134521884 and params:16
Importing getr at 135190102
with addr:134522092 and params:4
Importing getg at 135190115
with addr:134522908 and params:4
Importing getb at 135190128
with addr:134523068 and params:4
Importing getr_depth at 135190147
with addr:134522988 and params:8
Importing getg_depth at 135190166
with addr:134521532 and params:8
Importing getb_depth at 135190185
with addr:134522476 and params:8
Importing putpixel at 135190202
with addr:134521196 and params:16
Importing set_clip at 135190219
with addr:134522812 and params:20
Importing drawing_mode at 135190240
with addr:134520876 and params:16
Importing xor_mode at 135190257
with addr:134521676 and params:4
Importing solid_mode at 135190276
with addr:134521116 and params:0
Importing do_line at 135190292
with addr:134522508 and params:28
Importing triangle at 135190309
with addr:134521132 and params:32
Importing polygon at 135190325
with addr:134521468 and params:16
Importing rect at 135190338
with addr:134522924 and params:24
Importing do_circle at 135190356
with addr:134520924 and params:24
Importing circle at 135190371
with addr:134521964 and params:20
Importing circlefill at 135190390
with addr:134522972 and params:20
Importing do_ellipse at 135190409
with addr:134521324 and params:28
Importing ellipse at 135190425
with addr:134523276 and params:24
Importing ellipsefill at 135190445
with addr:134521036 and params:24
Importing calc_spline at 135190465
with addr:134522076 and params:16
Importing spline at 135190480
with addr:134521068 and params:40
Importing floodfill at 135190498
with addr:134522284 and params:16
Importing blit at 135190511
with addr:134522492 and params:32
Importing masked_blit at 135190531
with addr:134523404 and params:32
Importing stretch_blit at 135190552
with addr:134523292 and params:40
Importing stretch_sprite at 135190575
with addr:134522796 and params:24
Importing rotate_sprite at 135190597
with addr:134523036 and params:20
Importing rotate_scaled_sprite at 135190626
with addr:134521564 and params:24
Importing clear at 135190640
with addr:134521852 and params:4
Importing draw_trans_sprite at 135190666
with addr:134521404 and params:16
Importing text_mode at 135190684
with addr:134522604 and params:4
Importing textout at 135190700
with addr:134521020 and params:24
Importing textout_centre at 135190723
with addr:134522140 and params:24
Importing textout_justify at 135190747
with addr:134521788 and params:32
Importing textprintf at 135190766
with addr:134520956 and params:24
Importing textprintf_centre at 135190792
with addr:134521932 and params:24
Importing text_length at 135190812
with addr:134522060 and params:8
Importing text_height at 135190832
with addr:134521084 and params:4
Importing destroy_font at 135190853
with addr:134522700 and params:4
Importing play_fli at 135190870
with addr:134523132 and params:16
Importing play_memory_fli at 135190894
with addr:134521724 and params:16
Importing open_fli at 135190911
with addr:134522780 and params:4
Importing open_memory_fli at 135190935
with addr:134520972 and params:4
Importing close_fli at 135190953
with addr:134521756 and params:0
Importing next_fli_frame at 135190976
with addr:134522172 and params:4
Importing reset_fli_variables at 135191004
with addr:134521164 and params:0
Importing fli_bitmap at 135191023
with addr:134719060 and params:-1
Importing fli_pallete at 135191043
with addr:134719088 and params:-1
Importing fli_frame at 135191061
with addr:134720264 and params:-1
Importing install_sound at 135191083
with addr:134523164 and params:12
Importing set_volume at 135191102
with addr:134521452 and params:8
Importing load_datafile at 135191124
with addr:134523324 and params:4
Importing unload_datafile at 135191148
with addr:134523116 and params:4
Importing load_sample at 135191168
with addr:134521628 and params:4
Importing load_wav at 135191185
with addr:134521900 and params:4
Importing load_voc at 135191202
with addr:134521308 and params:4
Importing destroy_sample at 135191225
with addr:134523196 and params:4
Importing play_sample at 135191245
with addr:134521516 and params:20
Importing stop_sample at 135191265
with addr:134523180 and params:4
Importing adjust_sample at 135191287
with addr:134521708 and params:20
Importing load_midi at 135191305
with addr:134522348 and params:4
Importing destroy_midi at 135191326
with addr:134521740 and params:4
Importing play_midi at 135191344
with addr:134521612 and params:8
Importing play_looped_midi at 135191369
with addr:134522572 and params:12
Importing stop_midi at 135191387
with addr:134521260 and params:0
Importing midi_pause at 135191406
with addr:134522428 and params:0
Importing midi_resume at 135191426
with addr:134522668 and params:0
Importing midi_seek at 135191444
with addr:134521804 and params:4
Importing midi_out at 135191461
with addr:134522108 and params:8
Importing load_midi_patches at 135191487
with addr:134521660 and params:0
Importing packfile_password at 135191513
with addr:134522540 and params:4
Importing pack_fopen at 135191532
with addr:134522300 and params:8
Importing pack_fclose at 135191552
with addr:134522252 and params:4
Importing pack_fseek at 135191571
with addr:134522716 and params:8
Importing pack_fopen_chunk at 135191596
with addr:134521148 and params:8
Importing pack_fclose_chunk at 135191622
with addr:134523228 and params:4
Importing pack_igetw at 135191641
with addr:134522444 and params:4
Importing pack_igetl at 135191660
with addr:134521644 and params:4
Importing pack_iputw at 135191679
with addr:134521340 and params:8
Importing pack_iputl at 135191698
with addr:134521356 and params:8
Importing pack_mgetw at 135191717
with addr:134521772 and params:4
Importing pack_mgetl at 135191736
with addr:134523260 and params:4
Importing pack_mputw at 135191755
with addr:134521596 and params:8
Importing pack_mputl at 135191774
with addr:134522588 and params:8
Importing pack_fread at 135191793
with addr:134522236 and params:12
Importing pack_fwrite at 135191813
with addr:134522764 and params:12
Importing pack_fgets at 135191832
with addr:134521388 and params:12
Importing pack_fputs at 135191851
with addr:134521372 and params:8
Importing get_filename at 135191872
with addr:134521868 and params:4
Importing load_bitmap at 135191892
with addr:134522204 and params:8
Importing load_bmp at 135191909
with addr:134520940 and params:8
Importing load_lbm at 135191926
with addr:134522748 and params:8
Importing load_pcx at 135191943
with addr:134521548 and params:8
Importing load_tga at 135191960
with addr:134522524 and params:8
Importing save_bitmap at 135191980
with addr:134521948 and params:12
Importing save_bmp at 135191997
with addr:134523052 and params:12
Importing save_pcx at 135192014
with addr:134521916 and params:12
Importing save_tga at 135192031
with addr:134522396 and params:12
Importing create_rgb_table at 135192056
with addr:134523084 and params:1032
Importing create_light_table at 135192083
with addr:134523340 and params:1044
Importing create_trans_table at 135192110
with addr:134522460 and params:1044
Importing create_color_table at 135192137
with addr:134522332 and params:1036
Importing mouse_x at 135192153
with addr:134719048 and params:-1
Importing mouse_y at 135192169
with addr:134720248 and params:-1
Importing mouse_b at 135192185
with addr:134719080 and params:-1
Importing mouse_pos at 135192203
with addr:134720252 and params:-1
Importing freeze_mouse_flag at 135192229
with addr:134720112 and params:-1
Importing keypressed at 135192248
with addr:134521980 and params:0
Importing readkey at 135192264
with addr:134523020 and params:0
Importing dbuf at 135192277
with addr:134729968 and params:-1
Importing addressof at 135192295
with addr:134525244 and params:4
Importing exec_script at 135192315
with addr:134525264 and params:8
Importing add_script at 135192334
with addr:134525504 and params:4
Importing create_tiles_table at 135192361
with addr:134525888 and params:4
Importing add_tiles_pack at 135192384
with addr:134525932 and params:4
Importing df_get_item at 135192404
with addr:134524932 and params:8
Importing df_item at 135192420
with addr:134525016 and params:8
Importing df_dat at 135192435
with addr:134525040 and params:4
Importing df_count at 135192452
with addr:134525060 and params:8
Importing df_foreach at 135192471
with addr:134525112 and params:8
Importing bmp_line at 135192488
with addr:134525172 and params:8
Importing bmp_w at 135192502
with addr:134525204 and params:4
Importing bmp_h at 135192516
with addr:134525224 and params:4
Importing printf at 135192531
with addr:134520988 and params:4
Importing create_object_type at 135192558
with addr:134532896 and params:12
Importing create_weapon_type at 135192585
with addr:134534112 and params:4
Importing assign_weapon_handler at 135192615
with addr:134534224 and params:8
Importing  at 135192624

0:Address 0, size 0,Calling 105
Size of params:0


Executing function from rpg.sc!
 12:ENTER 135109152 
NOP 
NOP 
NOP 
 16:{a0(=$1075709784),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135193378)}ADD
 28:a0(=$135193378) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$135105200),a0(=$135132464)}MOV
 60:{a0(=$135132464),[4]DS(=$135132464)}MOV
 68:a0(=$135132464) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$000d(=$13)}MOV
 100:{a0(=$13),a242(=$135193378)}ADD
 104:a0(=$135193391) PUSH (SP=3992) 
 108:[4]DS(=$135132464) PUSH (SP=3988) 
 116:{$0b5a(=$2906),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135132464) PUSH (SP=3992) 
 140:{$0b79(=$2937),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$135105232),a0(=$135132768)}MOV
 168:{a0(=$135132768),$0012(=$18)}MOV
 176:{a0(=$18),a242(=$135193378)}ADD
 180:a0(=$135193396) PUSH (SP=3992) 
 184:[4]DS(=$135132464) PUSH (SP=3988) 
 192:{$0b5a(=$2906),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$0) PUSH (SP=3992) 
 216:{$0b79(=$2937),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$135105264),a0(=$0)}MOV
 244:{a0(=$0),$0019(=$25)}MOV
 252:{a0(=$25),a242(=$135193378)}ADD
 256:a0(=$135193403) PUSH (SP=3992) 
 260:[4]DS(=$135132464) PUSH (SP=3988) 
 268:{$0b5a(=$2906),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$0) PUSH (SP=3992) 
 292:{$0b79(=$2937),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$135105296),a0(=$0)}MOV
 320:{a0(=$0),$0021(=$33)}MOV
 328:{a0(=$33),a242(=$135193378)}ADD
 332:a0(=$135193411) PUSH (SP=3992) 
 336:[4]DS(=$135132464) PUSH (SP=3988) 
 344:{$0b5a(=$2906),$0008(=$8)}CALLEX
 356:{a245(=$3988),$0008(=$8)}ADD
 364:a0(=$135132608) PUSH (SP=3992) 
 368:{$0b79(=$2937),$0004(=$4)}CALLEX
 380:{a245(=$3992),$0004(=$4)}ADD
 388:{[20]DS(=$135105328),a0(=$135216680)}MOV
 396:{a0(=$135216680),$0028(=$40)}MOV
 404:{a0(=$40),a242(=$135193378)}ADD
 408:a0(=$135193418) PUSH (SP=3992) 
 412:{$0c0f(=$3087),$0004(=$4)}CALLEX
 424:{a245(=$3992),$0004(=$4)}ADD
 432:{[24]DS(=$135105360),a0(=$0)}MOV
 440:{a0(=$0),$002c(=$44)}MOV
 448:{a0(=$44),a242(=$135193378)}ADD
 452:a0(=$135193422) PUSH (SP=3992) 
 456:{$0aed(=$2797),$0004(=$4)}CALLEX
 468:{a245(=$3992),$0004(=$4)}ADD
 476:a0(=$-1) PUSH (SP=3992) 
 480:[24]DS(=$0) PUSH (SP=3988) 
 488:{$0c2d(=$3117),$0008(=$8)}CALLEX
 500:{a245(=$3988),$0008(=$8)}ADD
 508:{a0(=$0),$0030(=$48)}MOV
 516:{a0(=$48),a242(=$135193378)}ADD
 520:a0(=$135193426) PUSH (SP=3992) 
 524:{a1(=$1075709784),$0039(=$57)}MOV
 532:{a1(=$57),a242(=$135193378)}ADD
 536:a1(=$135193435) PUSH (SP=3988) 
 540:{$0aed(=$2797),$0004(=$4)}CALLEX
 552:{a1(=$135193435),a0(=$-1)}MOV
 556:{a245(=$3988),$0004(=$4)}ADD
 564:a0(=$-1) POP (SP=3996) 
 568:[8]DS(=$135132768) PUSH (SP=3992) 
 576:a1(=$-1) PUSH (SP=3988) 
 580:a0(=$135193426) PUSH (SP=3984) 
 584:{$0bf4(=$3060),$000c(=$12)}CALLEX
 596:{a245(=$3984),$000c(=$12)}ADD
 604:{a0(=$0),$0045(=$69)}MOV
 612:{a0(=$69),a242(=$135193378)}ADD
 616:a0(=$135193447) PUSH (SP=3992) 
 620:{a1(=$-1),$0050(=$80)}MOV
 628:{a1(=$80),a242(=$135193378)}ADD
 632:a1(=$135193458) PUSH (SP=3988) 
 636:{$0aed(=$2797),$0004(=$4)}CALLEX
 648:{a1(=$135193458),a0(=$-1)}MOV
 652:{a245(=$3988),$0004(=$4)}ADD
 660:a0(=$-1) POP (SP=3996) 
 664:[12]DS(=$0) PUSH (SP=3992) 
 672:a1(=$-1) PUSH (SP=3988) 
 676:a0(=$135193447) PUSH (SP=3984) 
 680:{$0bf4(=$3060),$000c(=$12)}CALLEX
 692:{a245(=$3984),$000c(=$12)}ADD
 700:{a0(=$1),$0000(=$0)}MOV
 708:LEAVE 
RET SP=4000,CP=4000
EXIT

 96:{a245(=$3992),$0004(=$4)}ADD
 104:{a0(=$0),$0000(=$0)}MOV
 112:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 85
Size of params:0


Executing function from rpg.sc!
 712:ENTER 135109152 
NOP 
NOP 
NOP 
 716:[4]DS(=$135132464) PUSH (SP=3992) 
 724:{$0672(=$1650),$0004(=$4)}CALLEX
 736:{a245(=$3992),$0004(=$4)}ADD
 744:LEAVE 
RET SP=4000,CP=4000
EXIT
