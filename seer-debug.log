SeeRC debugger data:
 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>int x, y;
284>int legframe, legtics;
285>BITMAP *bmp;
286>};
287>
288> 
289>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
290>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
291>typedef void weapon_type_t;	       
292>import int create_weapon_type(char *name);    
293>import int assign_weapon_handler(int typenum, seer_addr handler);
294>
295>#! 7 "scripts/imports.sh"
296>
297>
298>#! 7 "!!_internal_Script"
299>
300>export init;
301>
302>
303>
304>
305>
306>
307>int init()
308>{   
309>     
310>    
311>    add_tiles_pack("data/tiles.dat");
312>    add_tiles_pack("data/tiles2.dat");
313>    
314>     
315>    add_script("scripts/rpg.sc");
316>    add_script("scripts/shotgun.sc");
317>
318>    return 0;
319>}
320>
321>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(80ba040)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(80be740)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(80be818,80be870,80be8c8,80be920,80be978)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(80c1f78,80c1fd0)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(80c20b8,80c2110,80c2168)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(80c2260,80c22c8,80c2320,80c2378,80c23d0)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(80c24e8)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(80c2970,80c29c8)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(80c2ab8)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(80c2b90,80c2be8,80c2c40,80c2c98)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(80c2d98,80c2df0)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(80c2ee0)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(80c2fb8,80c3010,80c3068)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(80c3168)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(80c3248,80c32b0,80c3308)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(80c3410,80c3468,80c34c0,80c3518)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(80c3618,80c3670,80c36c8)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(80c37b8,80c3810,80c3868)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(80c3960,80c39b8,80c3a10,80c3a68)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(80c3b68)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(80c3c38)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(80c3d08)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(80c3dd8,80c3e30)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(80c3f10,80c3f68)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(80c4048,80c40a0)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(80c4180,80c41e8,80c4240,80c4298)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(80c4398,80c4400,80c4458,80c44b0,80c4508)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(80c4620,80c4678,80c46e0,80c4738)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(80c4838)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80c4c08,80c4c60,80c4ca8,80c4cf0)>...
Declaration of `do_line' as <(80c4980,80c49e8,80c4a40,80c4a98,80c4af0,80c4b48,80c4ba0)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(80c4e60,80c4ec8,80c4f20,80c4f78,80c4fd0,80c5028,80c5080,80c50d8)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(80c51d0,80c5238,80c5290,80c52f8)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(80c53f8,80c5460,80c54b8,80c5510,80c5568,80c55c0)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80c5910,80c5968,80c59b0,80c59f8)>...
Declaration of `do_circle' as <(80c56e0,80c5748,80c57a0,80c57f8,80c5850,80c58a8)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(80c5b58,80c5bc0,80c5c18,80c5c70,80c5cc8)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(80c5dd8,80c5e40,80c5e98,80c5ef0,80c5f48)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80c62e0,80c6338,80c6380,80c63c8)>...
Declaration of `do_ellipse' as <(80c6058,80c60c0,80c6118,80c6170,80c61c8,80c6220,80c6278)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(80c6538,80c65a0,80c65f8,80c6650,80c66a8,80c6700)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(80c6820,80c6888,80c68e0,80c6938,80c6990,80c69e8)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(80c6b08,80c6b70,80c6bc8,80c6c30)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(80c6d40,80c6da8,80c6e10)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(80c6f00,80c6f68,80c6fc0,80c7018)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(80c7118,80c7180,80c71e8,80c7240,80c7298,80c72f0,80c7348,80c73a0)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(80c74e0,80c7548,80c75b0,80c7608,80c7660,80c76b8,80c7710,80c7768)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(80c78b0,80c7918,80c7980,80c79d8,80c7a30,80c7a88,80c7ae0,80c7b38,80c7b90,80c7be8)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(80c7d50,80c7db8,80c7e20,80c7e78,80c7ed0,80c7f28)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(80c8050,80c80b8,80c8120,80c8178,80c81d0)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(80c82f0,80c8358,80c83c0,80c8418,80c8470,80c84c8)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(80c85e8)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(80c86d0,80c8738,80c87a0,80c87f8)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(80c88f8)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(80c89c8,80c8a30,80c8a98,80c8b00,80c8b58,80c8bb0)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(80c8cd8,80c8d40,80c8da8,80c8e10,80c8e68,80c8ec0)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(80c8fe8,80c9050,80c90b8,80c9120,80c9178,80c91d0,80c9228,80c9280)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(80c93c0,80c9428,80c9490,80c94e8,80c9540,80c9598,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(80c96e0,80c9748,80c97b0,80c9808,80c9860,80c98b8,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(80c99f8,80c9a60)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(80c9b50)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(80c9c38)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(80c9d18,80c9d80,80c9de8,80c9e40)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(80c9f78,80c9fe0,80ca048,80ca0a0)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(80ca1d0)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(80ca2a8)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(80ca408)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(80ca668,80ca6c0,80ca718)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(80ca818,80ca870)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(80ca958)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(80caa40)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(80cab20)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(80cac00)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(80cace0)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(80cadc8)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(80caea8,80caf10,80caf68,80cafc0,80cb018)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(80cb128)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(80cb210,80cb278,80cb2d0,80cb328,80cb380)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(80cb490)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(80cb578)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(80cb658,80cb6c0)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(80cb7a8,80cb810,80cb868)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(80cbac0)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(80cbb90,80cbbf8)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(80cbd50)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(80cbe30,80cbe98)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(80cbf88)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(80cc068,80cc0d0)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(80cc1b8,80cc220)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(80cc308)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(80cc3d8)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(80cc4b8)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(80cc598,80cc5f0)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(80cc6e0,80cc738)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(80cc828)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(80cc908)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(80cc9e8,80cca40)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(80ccb30,80ccb88)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(80ccc78,80ccce0,80ccd38)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(80cce38,80ccea0,80ccef8)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(80ccff8,80cd060,80cd0b8)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(80cd1b8,80cd220)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(80cd318)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(80cd3f8,80cd460)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(80cd550,80cd5b8)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(80cd6a8,80cd710)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(80cd7e8,80cd850)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(80cd940,80cd9a8)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(80cda98,80cdb00,80cdb68)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(80cdc68,80cdcd0,80cdd38)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(80cde38,80cdea0,80cdf08)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(80ce008,80ce070,80ce0d8)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(80ce1e0,80ce248,80ce2a0)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(80ce398,80ce400,80ce458,80ce4b0,80ce508,80ce560)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(80ce688,80ce6f0,80ce748,80ce7a0,80ce7f8,80ce850)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(80ceaa0,80ceaf8,80ceb50)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(80ce978,80ce9e0,80cea38,80cebe8)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(80cf0b0)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(80cf190,80cf1f8)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(80cf2e8)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(80cf3d0)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(80cf4b8,80cf520)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(80cf5f8,80cf660)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(80cf750,80cf7b8)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(80cf898)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(80cf978,80cf9e0)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(80cfb90)>...
Declaration of `df_foreach' as <(80cfac0,80cfb28)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(80cfca0,80cfd08)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(80cfde8)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(80cfeb8)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(80cff98,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(80d0148,80d01b0,80d0208)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Reading declaration:type is a standard `int'
Declaration of `legframe'...
struct:member legframe added
(Short)Declaration of `legtics' as (null)...
struct:member legtics added
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
struct:member bmp added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(80d0588,80d05e0)>...
Defining type 'weapon_handler_t' as *(80d0588,80d05e0)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(80d06d0,80d0728,80d0790)>...
Defining type 'object_handler_t' as *(80d06d0,80d0728,80d0790)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(80d08f8)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(80d09e8,80d0a40)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export init;

>int init()
Reading declaration:type is a standard `int'
Declaration of `init' as <()>...
Address:0
=======================>>ENTERING function `init'!
   0: ENTER 

>    add_tiles_pack("data/tiles.dat");
Symbol:add_tiles_pack
   4: MOV a0 , 0
  12: ADD a0 , ES
  16: PUSH a0
  20: CALLEX 2859 , 4
  32: ADD SP , 4

>    add_tiles_pack("data/tiles2.dat");
Symbol:add_tiles_pack
  40: MOV a0 , 15
  48: ADD a0 , ES
  52: PUSH a0
  56: CALLEX 2859 , 4
  68: ADD SP , 4

>    add_script("scripts/rpg.sc");
Symbol:add_script
  76: MOV a0 , 31
  84: ADD a0 , ES
  88: PUSH a0
  92: CALLEX 2836 , 4
 104: ADD SP , 4

>    add_script("scripts/shotgun.sc");
Symbol:add_script
 112: MOV a0 , 46
 120: ADD a0 , ES
 124: PUSH a0
 128: CALLEX 2836 , 4
 140: ADD SP , 4

>    return 0;
 148: MOV a0 , 0
 156: LEAVE 
 157: RET 
 158: LEAVE 
 159: RET 
+++
Local symbols:
=======================>>LEAVING  function `init'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(80d06d0,80d0728,80d0790)'
 weapon_handler_t : `*(80d0588,80d05e0)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->init

Global Symbols:
     init : `()' at CS+0
 assign_weapon_handler : `(80d09e8,80d0a40)' at 3114
 create_weapon_type : `(80d08f8)' at 3084
 create_object_type : `(80d0148,80d01b0,80d0208)' at 3057
   printf : `(80cff98,...)' at 3030
    bmp_h : `(80cfeb8)' at 3015
    bmp_w : `(80cfde8)' at 3001
 bmp_line : `(80cfca0,80cfd08)*' at 2987
 df_foreach : `(80cfac0,80cfb28)' at 2970
 df_count : `(80cf978,80cf9e0)' at 2951
   df_dat : `(80cf898)*' at 2934
  df_item : `(80cf750,80cf7b8)*' at 2919
 df_get_item : `(80cf5f8,80cf660)*' at 2903
 df_get_item_num : `(80cf4b8,80cf520)' at 2883
 add_tiles_pack : `(80cf3d0)' at 2859
 add_script : `(80cf2e8)' at 2836
 exec_script : `(80cf190,80cf1f8)' at 2817
 addressof : `(80cf0b0)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(80ce978,80ce9e0,80cea38,80cebe8)' at 2639
 create_trans_table : `(80ce688,80ce6f0,80ce748,80ce7a0,80ce7f8,80ce850)' at 2612
 create_light_table : `(80ce398,80ce400,80ce458,80ce4b0,80ce508,80ce560)' at 2585
 create_rgb_table : `(80ce1e0,80ce248,80ce2a0)' at 2558
 save_tga : `(80ce008,80ce070,80ce0d8)' at 2533
 save_pcx : `(80cde38,80cdea0,80cdf08)' at 2516
 save_bmp : `(80cdc68,80cdcd0,80cdd38)' at 2499
 save_bitmap : `(80cda98,80cdb00,80cdb68)' at 2482
 load_tga : `(80cd940,80cd9a8)*' at 2462
 load_pcx : `(80cd7e8,80cd850)*' at 2445
 load_lbm : `(80cd6a8,80cd710)*' at 2428
 load_bmp : `(80cd550,80cd5b8)*' at 2411
 load_bitmap : `(80cd3f8,80cd460)*' at 2394
 get_filename : `(80cd318)*' at 2374
 pack_fputs : `(80cd1b8,80cd220)' at 2353
 pack_fgets : `(80ccff8,80cd060,80cd0b8)*' at 2334
 pack_fwrite : `(80cce38,80ccea0,80ccef8)' at 2315
 pack_fread : `(80ccc78,80ccce0,80ccd38)' at 2295
 pack_mputl : `(80ccb30,80ccb88)' at 2276
 pack_mputw : `(80cc9e8,80cca40)' at 2257
 pack_mgetl : `(80cc908)' at 2238
 pack_mgetw : `(80cc828)' at 2219
 pack_iputl : `(80cc6e0,80cc738)' at 2200
 pack_iputw : `(80cc598,80cc5f0)' at 2181
 pack_igetl : `(80cc4b8)' at 2162
 pack_igetw : `(80cc3d8)' at 2143
 pack_fclose_chunk : `(80cc308)*' at 2124
 pack_fopen_chunk : `(80cc1b8,80cc220)*' at 2098
 pack_fseek : `(80cc068,80cc0d0)' at 2073
 pack_fclose : `(80cbf88)' at 2054
 pack_fopen : `(80cbe30,80cbe98)*' at 2034
 packfile_password : `(80cbd50)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(80cbb90,80cbbf8)' at 1963
 midi_seek : `(80cbac0)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(80cb7a8,80cb810,80cb868)' at 1871
 play_midi : `(80cb658,80cb6c0)' at 1846
 destroy_midi : `(80cb578)' at 1828
 load_midi : `(80cb490)*' at 1807
 adjust_sample : `(80cb210,80cb278,80cb2d0,80cb328,80cb380)' at 1789
 stop_sample : `(80cb128)' at 1767
 play_sample : `(80caea8,80caf10,80caf68,80cafc0,80cb018)' at 1747
 destroy_sample : `(80cadc8)' at 1727
 load_voc : `(80cace0)*' at 1704
 load_wav : `(80cac00)*' at 1687
 load_sample : `(80cab20)*' at 1670
 unload_datafile : `(80caa40)' at 1650
 load_datafile : `(80ca958)*' at 1626
 set_volume : `(80ca818,80ca870)' at 1604
 install_sound : `(80ca668,80ca6c0,80ca718)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(80ca408)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(80ca2a8)' at 1437
 open_fli : `(80ca1d0)' at 1413
 play_memory_fli : `(80c9f78,80c9fe0,80ca048,80ca0a0)' at 1396
 play_fli : `(80c9d18,80c9d80,80c9de8,80c9e40)' at 1372
 destroy_font : `(80c9c38)' at 1355
 text_height : `(80c9b50)' at 1334
 text_length : `(80c99f8,80c9a60)' at 1314
 textprintf_centre : `(80c96e0,80c9748,80c97b0,80c9808,80c9860,80c98b8,...)' at 1294
 textprintf : `(80c93c0,80c9428,80c9490,80c94e8,80c9540,80c9598,...)' at 1268
 textout_justify : `(80c8fe8,80c9050,80c90b8,80c9120,80c9178,80c91d0,80c9228,80c9280)' at 1249
 textout_centre : `(80c8cd8,80c8d40,80c8da8,80c8e10,80c8e68,80c8ec0)' at 1225
  textout : `(80c89c8,80c8a30,80c8a98,80c8b00,80c8b58,80c8bb0)' at 1202
 text_mode : `(80c88f8)' at 1186
 draw_trans_sprite : `(80c86d0,80c8738,80c87a0,80c87f8)' at 1168
    clear : `(80c85e8)' at 1142
 rotate_scaled_sprite : `(80c82f0,80c8358,80c83c0,80c8418,80c8470,80c84c8)' at 1128
 rotate_sprite : `(80c8050,80c80b8,80c8120,80c8178,80c81d0)' at 1099
 stretch_sprite : `(80c7d50,80c7db8,80c7e20,80c7e78,80c7ed0,80c7f28)' at 1077
 stretch_blit : `(80c78b0,80c7918,80c7980,80c79d8,80c7a30,80c7a88,80c7ae0,80c7b38,80c7b90,80c7be8)' at 1054
 masked_blit : `(80c74e0,80c7548,80c75b0,80c7608,80c7660,80c76b8,80c7710,80c7768)' at 1033
     blit : `(80c7118,80c7180,80c71e8,80c7240,80c7298,80c72f0,80c7348,80c73a0)' at 1013
 floodfill : `(80c6f00,80c6f68,80c6fc0,80c7018)' at 1000
   spline : `(80c6d40,80c6da8,80c6e10)' at 982
 calc_spline : `(80c6b08,80c6b70,80c6bc8,80c6c30)' at 967
 ellipsefill : `(80c6820,80c6888,80c68e0,80c6938,80c6990,80c69e8)' at 947
  ellipse : `(80c6538,80c65a0,80c65f8,80c6650,80c66a8,80c6700)' at 927
 do_ellipse : `(80c6058,80c60c0,80c6118,80c6170,80c61c8,80c6220,80c6278)' at 911
 circlefill : `(80c5dd8,80c5e40,80c5e98,80c5ef0,80c5f48)' at 892
   circle : `(80c5b58,80c5bc0,80c5c18,80c5c70,80c5cc8)' at 873
 do_circle : `(80c56e0,80c5748,80c57a0,80c57f8,80c5850,80c58a8)' at 858
     rect : `(80c53f8,80c5460,80c54b8,80c5510,80c5568,80c55c0)' at 840
  polygon : `(80c51d0,80c5238,80c5290,80c52f8)' at 827
 triangle : `(80c4e60,80c4ec8,80c4f20,80c4f78,80c4fd0,80c5028,80c5080,80c50d8)' at 811
  do_line : `(80c4980,80c49e8,80c4a40,80c4a98,80c4af0,80c4b48,80c4ba0)' at 794
 solid_mode : `()' at 778
 xor_mode : `(80c4838)' at 759
 drawing_mode : `(80c4620,80c4678,80c46e0,80c4738)' at 742
 set_clip : `(80c4398,80c4400,80c4458,80c44b0,80c4508)' at 721
 putpixel : `(80c4180,80c41e8,80c4240,80c4298)' at 704
 getb_depth : `(80c4048,80c40a0)' at 687
 getg_depth : `(80c3f10,80c3f68)' at 668
 getr_depth : `(80c3dd8,80c3e30)' at 649
     getb : `(80c3d08)' at 630
     getg : `(80c3c38)' at 617
     getr : `(80c3b68)' at 604
 makecol_depth : `(80c3960,80c39b8,80c3a10,80c3a68)' at 591
 makecol8 : `(80c37b8,80c3810,80c3868)' at 569
  makecol : `(80c3618,80c3670,80c36c8)' at 552
 bestfit_color : `(80c3410,80c3468,80c34c0,80c3518)' at 536
 generate_optimized_palette : `(80c3248,80c32b0,80c3308)' at 514
 generate_332_palette : `(80c3168)' at 479
 get_pallete_range : `(80c2fb8,80c3010,80c3068)' at 450
 get_pallete : `(80c2ee0)' at 424
 get_color : `(80c2d98,80c2df0)' at 404
 set_pallete_range : `(80c2b90,80c2be8,80c2c40,80c2c98)' at 386
 set_pallete : `(80c2ab8)' at 360
 set_color : `(80c2970,80c29c8)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(80c24e8)' at 288
 create_sub_bitmap : `(80c2260,80c22c8,80c2320,80c2378,80c23d0)*' at 265
 create_bitmap_ex : `(80c20b8,80c2110,80c2168)*' at 239
 create_bitmap : `(80c1f78,80c1fd0)*' at 214
 set_gfx_mode : `(80be818,80be870,80be8c8,80be920,80be978)' at 192
 set_color_conversion : `(80be740)' at 171
 set_color_depth : `(80ba040)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:160
Inits size:0
Consts size:65
Data size:0
Stack size:4000
Doing CleanUp.........................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135076973
with addr:134524136 and params:0
Importing allegro_exit at 135076994
with addr:134524088 and params:0
Importing install_mouse at 135077016
with addr:134523208 and params:0
Importing install_timer at 135077038
with addr:134524072 and params:0
Importing install_keyboard at 135077063
with addr:134524040 and params:0
Importing screen at 135077078
with addr:134724240 and params:-1
Importing set_color_depth at 135077102
with addr:134524120 and params:4
Importing set_color_conversion at 135077131
with addr:134522424 and params:4
Importing set_gfx_mode at 135077152
with addr:134522200 and params:20
Importing create_bitmap at 135077174
with addr:134523432 and params:8
Importing create_bitmap_ex at 135077199
with addr:134523192 and params:12
Importing create_sub_bitmap at 135077225
with addr:134522360 and params:20
Importing destroy_bitmap at 135077248
with addr:134523944 and params:4
Importing rgb_map at 135077264
with addr:134725444 and params:-1
Importing color_map at 135077282
with addr:134725436 and params:-1
Importing set_color at 135077300
with addr:134523896 and params:8
Importing set_pallete at 135077320
with addr:134522648 and params:1024
Importing set_pallete_range at 135077346
with addr:134522728 and params:1036
Importing get_color at 135077364
with addr:134523832 and params:8
Importing get_pallete at 135077384
with addr:134522472 and params:1024
Importing get_pallete_range at 135077410
with addr:134524648 and params:1032
Importing generate_332_palette at 135077439
with addr:134522072 and params:1024
Importing generate_optimized_palette at 135077474
with addr:134524184 and params:1284
Importing bestfit_color at 135077496
with addr:134523304 and params:1036
Importing makecol at 135077512
with addr:134524520 and params:12
Importing makecol8 at 135077529
with addr:134524600 and params:12
Importing makecol_depth at 135077551
with addr:134523032 and params:16
Importing getr at 135077564
with addr:134523272 and params:4
Importing getg at 135077577
with addr:134524152 and params:4
Importing getb at 135077590
with addr:134524344 and params:4
Importing getr_depth at 135077609
with addr:134524232 and params:8
Importing getg_depth at 135077628
with addr:134522680 and params:8
Importing getb_depth at 135077647
with addr:134523656 and params:8
Importing putpixel at 135077664
with addr:134522376 and params:16
Importing set_clip at 135077681
with addr:134524024 and params:20
Importing drawing_mode at 135077702
with addr:134522056 and params:16
Importing xor_mode at 135077719
with addr:134522824 and params:4
Importing solid_mode at 135077738
with addr:134522280 and params:0
Importing do_line at 135077754
with addr:134523704 and params:28
Importing triangle at 135077771
with addr:134522312 and params:32
Importing polygon at 135077787
with addr:134522632 and params:16
Importing rect at 135077800
with addr:134524168 and params:24
Importing do_circle at 135077818
with addr:134522088 and params:24
Importing circle at 135077833
with addr:134523160 and params:20
Importing circlefill at 135077852
with addr:134524216 and params:20
Importing do_ellipse at 135077871
with addr:134522520 and params:28
Importing ellipse at 135077887
with addr:134524568 and params:24
Importing ellipsefill at 135077907
with addr:134522168 and params:24
Importing calc_spline at 135077927
with addr:134523256 and params:16
Importing spline at 135077942
with addr:134522216 and params:40
Importing floodfill at 135077960
with addr:134523496 and params:16
Importing blit at 135077973
with addr:134523688 and params:32
Importing masked_blit at 135077993
with addr:134524664 and params:32
Importing stretch_blit at 135078014
with addr:134524584 and params:40
Importing stretch_sprite at 135078037
with addr:134524008 and params:24
Importing rotate_sprite at 135078059
with addr:134524296 and params:20
Importing rotate_scaled_sprite at 135078088
with addr:134522712 and params:24
Importing clear at 135078102
with addr:134523000 and params:4
Importing draw_trans_sprite at 135078128
with addr:134522600 and params:16
Importing text_mode at 135078146
with addr:134523816 and params:4
Importing textout at 135078162
with addr:134522152 and params:24
Importing textout_centre at 135078185
with addr:134523352 and params:24
Importing textout_justify at 135078209
with addr:134522952 and params:32
Importing textprintf at 135078228
with addr:134522120 and params:24
Importing textprintf_centre at 135078254
with addr:134523080 and params:24
Importing text_length at 135078274
with addr:134523240 and params:8
Importing text_height at 135078294
with addr:134522248 and params:4
Importing destroy_font at 135078315
with addr:134523912 and params:4
Importing play_fli at 135078332
with addr:134524424 and params:16
Importing play_memory_fli at 135078356
with addr:134522856 and params:16
Importing open_fli at 135078373
with addr:134523992 and params:4
Importing open_memory_fli at 135078397
with addr:134522136 and params:4
Importing close_fli at 135078415
with addr:134522888 and params:0
Importing next_fli_frame at 135078438
with addr:134523368 and params:4
Importing reset_fli_variables at 135078466
with addr:134522344 and params:0
Importing fli_bitmap at 135078485
with addr:134724232 and params:-1
Importing fli_pallete at 135078505
with addr:134724256 and params:-1
Importing fli_frame at 135078523
with addr:134725440 and params:-1
Importing install_sound at 135078545
with addr:134524456 and params:12
Importing set_volume at 135078564
with addr:134522616 and params:8
Importing load_datafile at 135078586
with addr:134524616 and params:4
Importing unload_datafile at 135078610
with addr:134524408 and params:4
Importing load_sample at 135078630
with addr:134522776 and params:4
Importing load_wav at 135078647
with addr:134523048 and params:4
Importing load_voc at 135078664
with addr:134522504 and params:4
Importing destroy_sample at 135078687
with addr:134524488 and params:4
Importing play_sample at 135078707
with addr:134522664 and params:20
Importing stop_sample at 135078727
with addr:134524472 and params:4
Importing adjust_sample at 135078749
with addr:134522840 and params:20
Importing load_midi at 135078767
with addr:134523544 and params:4
Importing destroy_midi at 135078788
with addr:134522872 and params:4
Importing play_midi at 135078806
with addr:134522760 and params:8
Importing play_looped_midi at 135078831
with addr:134523752 and params:12
Importing stop_midi at 135078849
with addr:134522456 and params:0
Importing midi_pause at 135078868
with addr:134523592 and params:0
Importing midi_resume at 135078888
with addr:134523880 and params:0
Importing midi_seek at 135078906
with addr:134522968 and params:4
Importing midi_out at 135078923
with addr:134523288 and params:8
Importing load_midi_patches at 135078949
with addr:134522808 and params:0
Importing packfile_password at 135078975
with addr:134523736 and params:4
Importing pack_fopen at 135078994
with addr:134523512 and params:8
Importing pack_fclose at 135079014
with addr:134523464 and params:4
Importing pack_fseek at 135079033
with addr:134523928 and params:8
Importing pack_fopen_chunk at 135079058
with addr:134522328 and params:8
Importing pack_fclose_chunk at 135079084
with addr:134524504 and params:4
Importing pack_igetw at 135079103
with addr:134523608 and params:4
Importing pack_igetl at 135079122
with addr:134522792 and params:4
Importing pack_iputw at 135079141
with addr:134522536 and params:8
Importing pack_iputl at 135079160
with addr:134522552 and params:8
Importing pack_mgetw at 135079179
with addr:134522920 and params:4
Importing pack_mgetl at 135079198
with addr:134524552 and params:4
Importing pack_mputw at 135079217
with addr:134522744 and params:8
Importing pack_mputl at 135079236
with addr:134523784 and params:8
Importing pack_fread at 135079255
with addr:134523448 and params:12
Importing pack_fwrite at 135079275
with addr:134523976 and params:12
Importing pack_fgets at 135079294
with addr:134522568 and params:12
Importing pack_fputs at 135079313
with addr:134522584 and params:8
Importing get_filename at 135079334
with addr:134523016 and params:4
Importing load_bitmap at 135079354
with addr:134523400 and params:8
Importing load_bmp at 135079371
with addr:134522104 and params:8
Importing load_lbm at 135079388
with addr:134523960 and params:8
Importing load_pcx at 135079405
with addr:134522696 and params:8
Importing load_tga at 135079422
with addr:134523720 and params:8
Importing save_bitmap at 135079442
with addr:134523144 and params:12
Importing save_bmp at 135079459
with addr:134524312 and params:12
Importing save_pcx at 135079476
with addr:134523064 and params:12
Importing save_tga at 135079493
with addr:134523576 and params:12
Importing create_rgb_table at 135079518
with addr:134524360 and params:1032
Importing create_light_table at 135079545
with addr:134524632 and params:1044
Importing create_trans_table at 135079572
with addr:134523640 and params:1044
Importing create_color_table at 135079599
with addr:134523528 and params:1036
Importing mouse_x at 135079615
with addr:134724224 and params:-1
Importing mouse_y at 135079631
with addr:134725428 and params:-1
Importing mouse_b at 135079647
with addr:134724252 and params:-1
Importing mouse_pos at 135079665
with addr:134725432 and params:-1
Importing freeze_mouse_flag at 135079691
with addr:134725280 and params:-1
Importing keypressed at 135079710
with addr:134523176 and params:0
Importing readkey at 135079726
with addr:134524280 and params:0
Importing dbuf at 135079739
with addr:134735196 and params:-1
Importing addressof at 135079757
with addr:134525628 and params:4
Importing exec_script at 135079777
with addr:134525648 and params:8
Importing add_script at 135079796
with addr:134525328 and params:4
Importing add_tiles_pack at 135079819
with addr:134526020 and params:4
Importing df_get_item_num at 135079843
with addr:134524944 and params:8
Importing df_get_item at 135079863
with addr:134525032 and params:8
Importing df_item at 135079879
with addr:134525068 and params:8
Importing df_dat at 135079894
with addr:134525092 and params:4
Importing df_count at 135079911
with addr:134525112 and params:8
Importing df_foreach at 135079930
with addr:134525164 and params:8
Importing bmp_line at 135079947
with addr:134525236 and params:8
Importing bmp_w at 135079961
with addr:134525272 and params:4
Importing bmp_h at 135079975
with addr:134525292 and params:4
Importing printf at 135079990
with addr:134523768 and params:4
Importing create_object_type at 135080017
with addr:134530592 and params:12
Importing create_weapon_type at 135080044
with addr:134530864 and params:4
Importing assign_weapon_handler at 135080074
with addr:134530972 and params:8
Importing  at 135080083

0:Address 0, size 0,Calling 79
Size of params:0


Executing function from init.sc!
 0:ENTER 135006852 
NOP 
NOP 
NOP 
 4:{a0(=$1076136184),$0000(=$0)}MOV
 12:{a0(=$0),a242(=$135080251)}ADD
 16:a0(=$135080251) PUSH (SP=3992) 
 20:{$0b2b(=$2859),$0004(=$4)}CALLEX
 32:{a245(=$3992),$0004(=$4)}ADD
 40:{a0(=$16777216),$000f(=$15)}MOV
 48:{a0(=$15),a242(=$135080251)}ADD
 52:a0(=$135080266) PUSH (SP=3992) 
 56:{$0b2b(=$2859),$0004(=$4)}CALLEX
 68:{a245(=$3992),$0004(=$4)}ADD
 76:{a0(=$536870912),$001f(=$31)}MOV
 84:{a0(=$31),a242(=$135080251)}ADD
 88:a0(=$135080282) PUSH (SP=3992) 
 92:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>int x, y;
284>int legframe, legtics;
285>BITMAP *bmp;
286>};
287>
288> 
289>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
290>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
291>typedef void weapon_type_t;	       
292>import int create_weapon_type(char *name);    
293>import int assign_weapon_handler(int typenum, seer_addr handler);
294>
295>#! 7 "scripts/imports.sh"
296>
297>
298>#! 7 "!!_internal_Script"
299>
300>export script_main;
301>export script_exit;
302>
303>
304>DATAFILE *dat;
305>BITMAP *ammo, *weapon, *projectile, *status;
306>int typenum;
307>
308>
309>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
310>{
311>    
312>
313>
314>
315>
316>
317>
318>	
319>}
320>
321>
322>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
323>{
324>    
325>
326>
327>
328>
329>
330>
331>
332>
333>}
334>
335>
336>void rpg(msg_t msg, player_t *pl)
337>{
338>    
339>
340>
341>
342>
343>
344>
345>
346>
347>}
348>
349>
350>
351>
352>
353>
354>int script_main()
355>{
356>    dat = load_datafile("data/rpg.dat");
357>    if (!dat)
358>      return -1;
359>
360>    ammo 	= df_dat(df_get_item(dat, "ammo"));
361>    weapon 	= df_dat(df_get_item(dat, "weapon"));
362>    projectile  = df_dat(df_get_item(dat, "ejected"));
363>    status 	= df_dat(df_get_item(dat, "status"));
364>
365>    typenum = create_weapon_type("rpg");
366>    assign_weapon_handler(typenum, addressof("rpg"));
367>    
368>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
369>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
370>       
371>    return 0;
372>}
373>
374>
375>
376>
377>
378>
379>
380>void script_exit()
381>{
382>    unload_datafile(dat);
383>}
384>
385>
386>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(80dead0)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(80debb0)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(80dec88,80dece0,80ded38,80ded90,80dede8)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(80def00,80def58)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(80df040,80df098,80df0f0)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(80df1e8,80df250,80df2a8,80df300,80df358)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(80df470)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(80df8f8,80df950)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(80dfa40)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(80dfb18,80dfb70,80dfbc8,80dfc20)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(80dfd20,80dfd78)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(80dfe68)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(80dff40,80dff98,80dfff0)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(80e00f0)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(80e01d0,80e0238,80e0290)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(80e0398,80e03f0,80e0448,80e04a0)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(80e05a0,80e05f8,80e0650)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(80e0740,80e0798,80e07f0)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(80e08e8,80e0940,80e0998,80e09f0)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(80e0af0)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(80e0bc0)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(80e0c90)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(80e0d60,80e0db8)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(80e0e98,80e0ef0)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(80e0fd0,80e1028)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(80e1108,80e1170,80e11c8,80e1220)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(80e1320,80e1388,80e13e0,80e1438,80e1490)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(80e15a8,80e1600,80e1668,80e16c0)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(80e17c0)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80e1b90,80e1be8,80e1c30,80e1c78)>...
Declaration of `do_line' as <(80e1908,80e1970,80e19c8,80e1a20,80e1a78,80e1ad0,80e1b28)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(80d9d98,80d9d20,80d9c18,80d9ba8,80d9b38,80d9ad8,80d99e0,80d9970)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(80d97c0,80e2610,80e25b8,80e24e8)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(80daf00,80d1050,80d10a8,80d1100,80d1578,80d15c0)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80ede40,80ede98,80edee0,80edf28)>...
Declaration of `do_circle' as <(80e2258,80e22c0,80e2318,80e2370,80edd80,80eddd8)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(80ee7a0,80ee808,80ee860,80ee8b8,80eedf8)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(80eeed8,80eef40,80eef98,80eeff0,80ef3c8)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(80efaf8,80efb50,80efb98,80efbe0)>...
Declaration of `do_ellipse' as <(80ef4c8,80ef530,80ef588,80ef5e0,80ef638,80efa48,80efa90)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(80efd10,80d8520,80d8578,80d85d0,80d8628,80d8680)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(80d87a0,80d8808,80d9128,80d9180,80d91d8,80d9230)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(80d9350,80d93b8,80d9410,80d9478)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(80d9560,80d95c8,80da360)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(80da450,80da4b8,80da510,80da568)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(80da640,80da6a8,80da710,80da768,80da7c0,80da818,80da870,80fca10)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(80fcb50,80fcbb8,80fcc20,80fcc78,80fccd0,80fcd28,80fcd80,80fcdd8)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(80fcf20,80fcf88,80fcff0,80fd048,80fd0a0,80fd0f8,80fd150,80fd1a8,80fd200,80fd258)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(80fd3c0,80fd428,80fd490,80fd4e8,80fd540,80fd598)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(80fd6c0,80fd728,80fd790,80fd7e8,80fd840)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(80fd960,80fd9c8,80fda30,80fda88,80fdae0,80fdb38)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(80fdc58)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(80fdd40,80fdda8,80fde10,80fde68)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(80fdf68)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(80fe038,80fe0a0,80fe108,80fe170,80fe1c8,80fe220)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(80fe348,80fe3b0,80fe418,80fe480,80fe4d8,80fe530)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(80fe620,80fe688,80fe6f0,80fe758,80fe7b0,80fe808,80fe860,80fe8b8)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(80fe9f8,80fea60,80feac8,80feb20,80feb78,80febd0,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(80fed18,80fed80,80fede8,80fee40,80fee98,80feef0,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(80ff030,80ff098)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(80ff188)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(80ff270)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(80ff350,80ff3b8,80ff420,80ff478)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(80ff5a0,80ff608,80ff670,80ff6c8)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(80ff7e8)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(80ff8d0)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(80ffa30)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(80ffca0,80ffcf8,80ffd50)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(80ffe50,80ffea8)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(80fff90)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(8100078)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(8100158)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(8100238)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(8100318)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(8100400)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(81004e0,8100548,81005a0,81005f8,8100650)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(8100760)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(8100848,81008b0,8100908,8100960,81009b8)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(8100ac8)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(8100bb0)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(8100c90,8100cf8)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(8100de0,8100e48,8100ea0)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(81010f8)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(81011c8,8101230)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(8101380)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(8101460,81014c8)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(81015b8)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(8101688,81016f0)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(81017d8,8101840)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(8101928)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(8101a08)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(8101ad8)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(8101bb8,8101c10)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(8101d00,8101d58)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(8101e48)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(8101f28)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(8102008,8102060)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(8102150,81021a8)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(8102298,8102300,8102358)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(8102458,81024c0,8102518)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(8102618,8102680,81026d8)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(81027d8,8102840)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(8102938)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(8102a18,8102a80)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(8102b70,8102bd8)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(8102cc8,8102d30)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(8102e20,8102e88)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(8102f78,8102fe0)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(81030d0,8103138,81031a0)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(81032a0,8103308,8103370)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(8103470,81034d8,8103540)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(8103640,81036a8,8103710)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(8103818,8103880,81038d8)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(81039d0,8103a38,8103a90,8103ae8,8103b40,8103b98)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(8103cc0,8103d28,8103d80,8103dd8,8103e30,8103e88)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(81040d8,8104130,8104188)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(8103fb0,8104018,8104070,8104220)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(81046e8)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(81047c8,8104830)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(8104920)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(8104a08)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(8104af0,8104b58)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(8104c48,8104cb0)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(8104da0,8104e08)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(8104ee8)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(8104fc8,8105030)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(81051c8)>...
Declaration of `df_foreach' as <(81050f8,8105160)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(81052c8,8105330)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(8105410)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(81054f0)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(81055d0,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(8105768,81057d0,8105828)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Reading declaration:type is a standard `int'
Declaration of `legframe'...
struct:member legframe added
(Short)Declaration of `legtics' as (null)...
struct:member legtics added
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
struct:member bmp added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(8105ba8,8105c00)>...
Defining type 'weapon_handler_t' as *(8105ba8,8105c00)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(8105d08,8105d60,8105dc8)>...
Defining type 'object_handler_t' as *(8105d08,8105d60,8105dc8)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(8105f30)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(8106020,8106078)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *projectile, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `projectile' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(8106468,81064c0,8106528)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(8106630,8106688,81066f0)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void rpg(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `rpg' as <(81067f0,8106848)>...
Address:8
=======================>>ENTERING function `rpg'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `rpg'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/rpg.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 13
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2903 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2934 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 18
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2903 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2934 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    projectile  = df_dat(df_get_item(dat, "ejected"));
Symbol:projectile
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 25
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2903 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2934 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 320: MOV a0 , 33
 328: ADD a0 , ES
 332: PUSH a0
 336: PUSH [DS+4]
 344: CALLEX 2903 , 8
 356: ADD SP , 8
 364: PUSH a0
 368: CALLEX 2934 , 4
 380: ADD SP , 4
 388: MOV [DS+20] , a0

>    typenum = create_weapon_type("rpg");
Symbol:typenum
Symbol:create_weapon_type
 396: MOV a0 , 40
 404: ADD a0 , ES
 408: PUSH a0
 412: CALLEX 3084 , 4
 424: ADD SP , 4
 432: MOV [DS+24] , a0

>    assign_weapon_handler(typenum, addressof("rpg"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 440: MOV a0 , 44
 448: ADD a0 , ES
 452: PUSH a0
 456: CALLEX 2797 , 4
 468: ADD SP , 4
 476: PUSH a0
 480: PUSH [DS+24]
 488: CALLEX 3114 , 8
 500: ADD SP , 8

>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 508: MOV a0 , 48
 516: ADD a0 , ES
Symbol:addressof
 520: PUSH a0
 524: MOV a1 , 57
 532: ADD a1 , ES
 536: PUSH a1
 540: CALLEX 2797 , 4
 552: MOV a1 , a0
 556: ADD SP , 4
 564: POP a0
Symbol:ammo
 568: PUSH [DS+8]
 576: PUSH a1
 580: PUSH a0
 584: CALLEX 3057 , 12
 596: ADD SP , 12

>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 604: MOV a0 , 69
 612: ADD a0 , ES
Symbol:addressof
 616: PUSH a0
 620: MOV a1 , 80
 628: ADD a1 , ES
 632: PUSH a1
 636: CALLEX 2797 , 4
 648: MOV a1 , a0
 652: ADD SP , 4
 660: POP a0
Symbol:weapon
 664: PUSH [DS+12]
 672: PUSH a1
 676: PUSH a0
 680: CALLEX 3057 , 12
 692: ADD SP , 12

>    return 0;
 700: MOV a0 , 0
 708: LEAVE 
 709: RET 
 710: LEAVE 
 711: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:712
=======================>>ENTERING function `script_exit'!
 712: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 716: PUSH [DS+4]
 724: CALLEX 1650 , 4
 736: ADD SP , 4
 744: LEAVE 
 745: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(8105d08,8105d60,8105dc8)'
 weapon_handler_t : `*(8105ba8,8105c00)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+712
 script_main : `()' at CS+12
      rpg : `(81067f0,8106848)' at CS+8
 weapon_pickup : `(8106630,8106688,81066f0)' at CS+4
 ammo_pickup : `(8106468,81064c0,8106528)' at CS+0
  typenum : at DS+24
   status : `*' at DS+20
 projectile : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(8106020,8106078)' at 3114
 create_weapon_type : `(8105f30)' at 3084
 create_object_type : `(8105768,81057d0,8105828)' at 3057
   printf : `(81055d0,...)' at 3030
    bmp_h : `(81054f0)' at 3015
    bmp_w : `(8105410)' at 3001
 bmp_line : `(81052c8,8105330)*' at 2987
 df_foreach : `(81050f8,8105160)' at 2970
 df_count : `(8104fc8,8105030)' at 2951
   df_dat : `(8104ee8)*' at 2934
  df_item : `(8104da0,8104e08)*' at 2919
 df_get_item : `(8104c48,8104cb0)*' at 2903
 df_get_item_num : `(8104af0,8104b58)' at 2883
 add_tiles_pack : `(8104a08)' at 2859
 add_script : `(8104920)' at 2836
 exec_script : `(81047c8,8104830)' at 2817
 addressof : `(81046e8)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(8103fb0,8104018,8104070,8104220)' at 2639
 create_trans_table : `(8103cc0,8103d28,8103d80,8103dd8,8103e30,8103e88)' at 2612
 create_light_table : `(81039d0,8103a38,8103a90,8103ae8,8103b40,8103b98)' at 2585
 create_rgb_table : `(8103818,8103880,81038d8)' at 2558
 save_tga : `(8103640,81036a8,8103710)' at 2533
 save_pcx : `(8103470,81034d8,8103540)' at 2516
 save_bmp : `(81032a0,8103308,8103370)' at 2499
 save_bitmap : `(81030d0,8103138,81031a0)' at 2482
 load_tga : `(8102f78,8102fe0)*' at 2462
 load_pcx : `(8102e20,8102e88)*' at 2445
 load_lbm : `(8102cc8,8102d30)*' at 2428
 load_bmp : `(8102b70,8102bd8)*' at 2411
 load_bitmap : `(8102a18,8102a80)*' at 2394
 get_filename : `(8102938)*' at 2374
 pack_fputs : `(81027d8,8102840)' at 2353
 pack_fgets : `(8102618,8102680,81026d8)*' at 2334
 pack_fwrite : `(8102458,81024c0,8102518)' at 2315
 pack_fread : `(8102298,8102300,8102358)' at 2295
 pack_mputl : `(8102150,81021a8)' at 2276
 pack_mputw : `(8102008,8102060)' at 2257
 pack_mgetl : `(8101f28)' at 2238
 pack_mgetw : `(8101e48)' at 2219
 pack_iputl : `(8101d00,8101d58)' at 2200
 pack_iputw : `(8101bb8,8101c10)' at 2181
 pack_igetl : `(8101ad8)' at 2162
 pack_igetw : `(8101a08)' at 2143
 pack_fclose_chunk : `(8101928)*' at 2124
 pack_fopen_chunk : `(81017d8,8101840)*' at 2098
 pack_fseek : `(8101688,81016f0)' at 2073
 pack_fclose : `(81015b8)' at 2054
 pack_fopen : `(8101460,81014c8)*' at 2034
 packfile_password : `(8101380)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(81011c8,8101230)' at 1963
 midi_seek : `(81010f8)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(8100de0,8100e48,8100ea0)' at 1871
 play_midi : `(8100c90,8100cf8)' at 1846
 destroy_midi : `(8100bb0)' at 1828
 load_midi : `(8100ac8)*' at 1807
 adjust_sample : `(8100848,81008b0,8100908,8100960,81009b8)' at 1789
 stop_sample : `(8100760)' at 1767
 play_sample : `(81004e0,8100548,81005a0,81005f8,8100650)' at 1747
 destroy_sample : `(8100400)' at 1727
 load_voc : `(8100318)*' at 1704
 load_wav : `(8100238)*' at 1687
 load_sample : `(8100158)*' at 1670
 unload_datafile : `(8100078)' at 1650
 load_datafile : `(80fff90)*' at 1626
 set_volume : `(80ffe50,80ffea8)' at 1604
 install_sound : `(80ffca0,80ffcf8,80ffd50)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(80ffa30)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(80ff8d0)' at 1437
 open_fli : `(80ff7e8)' at 1413
 play_memory_fli : `(80ff5a0,80ff608,80ff670,80ff6c8)' at 1396
 play_fli : `(80ff350,80ff3b8,80ff420,80ff478)' at 1372
 destroy_font : `(80ff270)' at 1355
 text_height : `(80ff188)' at 1334
 text_length : `(80ff030,80ff098)' at 1314
 textprintf_centre : `(80fed18,80fed80,80fede8,80fee40,80fee98,80feef0,...)' at 1294
 textprintf : `(80fe9f8,80fea60,80feac8,80feb20,80feb78,80febd0,...)' at 1268
 textout_justify : `(80fe620,80fe688,80fe6f0,80fe758,80fe7b0,80fe808,80fe860,80fe8b8)' at 1249
 textout_centre : `(80fe348,80fe3b0,80fe418,80fe480,80fe4d8,80fe530)' at 1225
  textout : `(80fe038,80fe0a0,80fe108,80fe170,80fe1c8,80fe220)' at 1202
 text_mode : `(80fdf68)' at 1186
 draw_trans_sprite : `(80fdd40,80fdda8,80fde10,80fde68)' at 1168
    clear : `(80fdc58)' at 1142
 rotate_scaled_sprite : `(80fd960,80fd9c8,80fda30,80fda88,80fdae0,80fdb38)' at 1128
 rotate_sprite : `(80fd6c0,80fd728,80fd790,80fd7e8,80fd840)' at 1099
 stretch_sprite : `(80fd3c0,80fd428,80fd490,80fd4e8,80fd540,80fd598)' at 1077
 stretch_blit : `(80fcf20,80fcf88,80fcff0,80fd048,80fd0a0,80fd0f8,80fd150,80fd1a8,80fd200,80fd258)' at 1054
 masked_blit : `(80fcb50,80fcbb8,80fcc20,80fcc78,80fccd0,80fcd28,80fcd80,80fcdd8)' at 1033
     blit : `(80da640,80da6a8,80da710,80da768,80da7c0,80da818,80da870,80fca10)' at 1013
 floodfill : `(80da450,80da4b8,80da510,80da568)' at 1000
   spline : `(80d9560,80d95c8,80da360)' at 982
 calc_spline : `(80d9350,80d93b8,80d9410,80d9478)' at 967
 ellipsefill : `(80d87a0,80d8808,80d9128,80d9180,80d91d8,80d9230)' at 947
  ellipse : `(80efd10,80d8520,80d8578,80d85d0,80d8628,80d8680)' at 927
 do_ellipse : `(80ef4c8,80ef530,80ef588,80ef5e0,80ef638,80efa48,80efa90)' at 911
 circlefill : `(80eeed8,80eef40,80eef98,80eeff0,80ef3c8)' at 892
   circle : `(80ee7a0,80ee808,80ee860,80ee8b8,80eedf8)' at 873
 do_circle : `(80e2258,80e22c0,80e2318,80e2370,80edd80,80eddd8)' at 858
     rect : `(80daf00,80d1050,80d10a8,80d1100,80d1578,80d15c0)' at 840
  polygon : `(80d97c0,80e2610,80e25b8,80e24e8)' at 827
 triangle : `(80d9d98,80d9d20,80d9c18,80d9ba8,80d9b38,80d9ad8,80d99e0,80d9970)' at 811
  do_line : `(80e1908,80e1970,80e19c8,80e1a20,80e1a78,80e1ad0,80e1b28)' at 794
 solid_mode : `()' at 778
 xor_mode : `(80e17c0)' at 759
 drawing_mode : `(80e15a8,80e1600,80e1668,80e16c0)' at 742
 set_clip : `(80e1320,80e1388,80e13e0,80e1438,80e1490)' at 721
 putpixel : `(80e1108,80e1170,80e11c8,80e1220)' at 704
 getb_depth : `(80e0fd0,80e1028)' at 687
 getg_depth : `(80e0e98,80e0ef0)' at 668
 getr_depth : `(80e0d60,80e0db8)' at 649
     getb : `(80e0c90)' at 630
     getg : `(80e0bc0)' at 617
     getr : `(80e0af0)' at 604
 makecol_depth : `(80e08e8,80e0940,80e0998,80e09f0)' at 591
 makecol8 : `(80e0740,80e0798,80e07f0)' at 569
  makecol : `(80e05a0,80e05f8,80e0650)' at 552
 bestfit_color : `(80e0398,80e03f0,80e0448,80e04a0)' at 536
 generate_optimized_palette : `(80e01d0,80e0238,80e0290)' at 514
 generate_332_palette : `(80e00f0)' at 479
 get_pallete_range : `(80dff40,80dff98,80dfff0)' at 450
 get_pallete : `(80dfe68)' at 424
 get_color : `(80dfd20,80dfd78)' at 404
 set_pallete_range : `(80dfb18,80dfb70,80dfbc8,80dfc20)' at 386
 set_pallete : `(80dfa40)' at 360
 set_color : `(80df8f8,80df950)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(80df470)' at 288
 create_sub_bitmap : `(80df1e8,80df250,80df2a8,80df300,80df358)*' at 265
 create_bitmap_ex : `(80df040,80df098,80df0f0)*' at 239
 create_bitmap : `(80def00,80def58)*' at 214
 set_gfx_mode : `(80dec88,80dece0,80ded38,80ded90,80dede8)' at 192
 set_color_conversion : `(80debb0)' at 171
 set_color_depth : `(80dead0)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:746
Inits size:0
Consts size:94
Data size:28
Stack size:4000
REALLOC from 4090 to 4712!!
Doing CleanUp................................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135293639
with addr:134524136 and params:0
Importing allegro_exit at 135293660
with addr:134524088 and params:0
Importing install_mouse at 135293682
with addr:134523208 and params:0
Importing install_timer at 135293704
with addr:134524072 and params:0
Importing install_keyboard at 135293729
with addr:134524040 and params:0
Importing screen at 135293744
with addr:134724240 and params:-1
Importing set_color_depth at 135293768
with addr:134524120 and params:4
Importing set_color_conversion at 135293797
with addr:134522424 and params:4
Importing set_gfx_mode at 135293818
with addr:134522200 and params:20
Importing create_bitmap at 135293840
with addr:134523432 and params:8
Importing create_bitmap_ex at 135293865
with addr:134523192 and params:12
Importing create_sub_bitmap at 135293891
with addr:134522360 and params:20
Importing destroy_bitmap at 135293914
with addr:134523944 and params:4
Importing rgb_map at 135293930
with addr:134725444 and params:-1
Importing color_map at 135293948
with addr:134725436 and params:-1
Importing set_color at 135293966
with addr:134523896 and params:8
Importing set_pallete at 135293986
with addr:134522648 and params:1024
Importing set_pallete_range at 135294012
with addr:134522728 and params:1036
Importing get_color at 135294030
with addr:134523832 and params:8
Importing get_pallete at 135294050
with addr:134522472 and params:1024
Importing get_pallete_range at 135294076
with addr:134524648 and params:1032
Importing generate_332_palette at 135294105
with addr:134522072 and params:1024
Importing generate_optimized_palette at 135294140
with addr:134524184 and params:1284
Importing bestfit_color at 135294162
with addr:134523304 and params:1036
Importing makecol at 135294178
with addr:134524520 and params:12
Importing makecol8 at 135294195
with addr:134524600 and params:12
Importing makecol_depth at 135294217
with addr:134523032 and params:16
Importing getr at 135294230
with addr:134523272 and params:4
Importing getg at 135294243
with addr:134524152 and params:4
Importing getb at 135294256
with addr:134524344 and params:4
Importing getr_depth at 135294275
with addr:134524232 and params:8
Importing getg_depth at 135294294
with addr:134522680 and params:8
Importing getb_depth at 135294313
with addr:134523656 and params:8
Importing putpixel at 135294330
with addr:134522376 and params:16
Importing set_clip at 135294347
with addr:134524024 and params:20
Importing drawing_mode at 135294368
with addr:134522056 and params:16
Importing xor_mode at 135294385
with addr:134522824 and params:4
Importing solid_mode at 135294404
with addr:134522280 and params:0
Importing do_line at 135294420
with addr:134523704 and params:28
Importing triangle at 135294437
with addr:134522312 and params:32
Importing polygon at 135294453
with addr:134522632 and params:16
Importing rect at 135294466
with addr:134524168 and params:24
Importing do_circle at 135294484
with addr:134522088 and params:24
Importing circle at 135294499
with addr:134523160 and params:20
Importing circlefill at 135294518
with addr:134524216 and params:20
Importing do_ellipse at 135294537
with addr:134522520 and params:28
Importing ellipse at 135294553
with addr:134524568 and params:24
Importing ellipsefill at 135294573
with addr:134522168 and params:24
Importing calc_spline at 135294593
with addr:134523256 and params:16
Importing spline at 135294608
with addr:134522216 and params:40
Importing floodfill at 135294626
with addr:134523496 and params:16
Importing blit at 135294639
with addr:134523688 and params:32
Importing masked_blit at 135294659
with addr:134524664 and params:32
Importing stretch_blit at 135294680
with addr:134524584 and params:40
Importing stretch_sprite at 135294703
with addr:134524008 and params:24
Importing rotate_sprite at 135294725
with addr:134524296 and params:20
Importing rotate_scaled_sprite at 135294754
with addr:134522712 and params:24
Importing clear at 135294768
with addr:134523000 and params:4
Importing draw_trans_sprite at 135294794
with addr:134522600 and params:16
Importing text_mode at 135294812
with addr:134523816 and params:4
Importing textout at 135294828
with addr:134522152 and params:24
Importing textout_centre at 135294851
with addr:134523352 and params:24
Importing textout_justify at 135294875
with addr:134522952 and params:32
Importing textprintf at 135294894
with addr:134522120 and params:24
Importing textprintf_centre at 135294920
with addr:134523080 and params:24
Importing text_length at 135294940
with addr:134523240 and params:8
Importing text_height at 135294960
with addr:134522248 and params:4
Importing destroy_font at 135294981
with addr:134523912 and params:4
Importing play_fli at 135294998
with addr:134524424 and params:16
Importing play_memory_fli at 135295022
with addr:134522856 and params:16
Importing open_fli at 135295039
with addr:134523992 and params:4
Importing open_memory_fli at 135295063
with addr:134522136 and params:4
Importing close_fli at 135295081
with addr:134522888 and params:0
Importing next_fli_frame at 135295104
with addr:134523368 and params:4
Importing reset_fli_variables at 135295132
with addr:134522344 and params:0
Importing fli_bitmap at 135295151
with addr:134724232 and params:-1
Importing fli_pallete at 135295171
with addr:134724256 and params:-1
Importing fli_frame at 135295189
with addr:134725440 and params:-1
Importing install_sound at 135295211
with addr:134524456 and params:12
Importing set_volume at 135295230
with addr:134522616 and params:8
Importing load_datafile at 135295252
with addr:134524616 and params:4
Importing unload_datafile at 135295276
with addr:134524408 and params:4
Importing load_sample at 135295296
with addr:134522776 and params:4
Importing load_wav at 135295313
with addr:134523048 and params:4
Importing load_voc at 135295330
with addr:134522504 and params:4
Importing destroy_sample at 135295353
with addr:134524488 and params:4
Importing play_sample at 135295373
with addr:134522664 and params:20
Importing stop_sample at 135295393
with addr:134524472 and params:4
Importing adjust_sample at 135295415
with addr:134522840 and params:20
Importing load_midi at 135295433
with addr:134523544 and params:4
Importing destroy_midi at 135295454
with addr:134522872 and params:4
Importing play_midi at 135295472
with addr:134522760 and params:8
Importing play_looped_midi at 135295497
with addr:134523752 and params:12
Importing stop_midi at 135295515
with addr:134522456 and params:0
Importing midi_pause at 135295534
with addr:134523592 and params:0
Importing midi_resume at 135295554
with addr:134523880 and params:0
Importing midi_seek at 135295572
with addr:134522968 and params:4
Importing midi_out at 135295589
with addr:134523288 and params:8
Importing load_midi_patches at 135295615
with addr:134522808 and params:0
Importing packfile_password at 135295641
with addr:134523736 and params:4
Importing pack_fopen at 135295660
with addr:134523512 and params:8
Importing pack_fclose at 135295680
with addr:134523464 and params:4
Importing pack_fseek at 135295699
with addr:134523928 and params:8
Importing pack_fopen_chunk at 135295724
with addr:134522328 and params:8
Importing pack_fclose_chunk at 135295750
with addr:134524504 and params:4
Importing pack_igetw at 135295769
with addr:134523608 and params:4
Importing pack_igetl at 135295788
with addr:134522792 and params:4
Importing pack_iputw at 135295807
with addr:134522536 and params:8
Importing pack_iputl at 135295826
with addr:134522552 and params:8
Importing pack_mgetw at 135295845
with addr:134522920 and params:4
Importing pack_mgetl at 135295864
with addr:134524552 and params:4
Importing pack_mputw at 135295883
with addr:134522744 and params:8
Importing pack_mputl at 135295902
with addr:134523784 and params:8
Importing pack_fread at 135295921
with addr:134523448 and params:12
Importing pack_fwrite at 135295941
with addr:134523976 and params:12
Importing pack_fgets at 135295960
with addr:134522568 and params:12
Importing pack_fputs at 135295979
with addr:134522584 and params:8
Importing get_filename at 135296000
with addr:134523016 and params:4
Importing load_bitmap at 135296020
with addr:134523400 and params:8
Importing load_bmp at 135296037
with addr:134522104 and params:8
Importing load_lbm at 135296054
with addr:134523960 and params:8
Importing load_pcx at 135296071
with addr:134522696 and params:8
Importing load_tga at 135296088
with addr:134523720 and params:8
Importing save_bitmap at 135296108
with addr:134523144 and params:12
Importing save_bmp at 135296125
with addr:134524312 and params:12
Importing save_pcx at 135296142
with addr:134523064 and params:12
Importing save_tga at 135296159
with addr:134523576 and params:12
Importing create_rgb_table at 135296184
with addr:134524360 and params:1032
Importing create_light_table at 135296211
with addr:134524632 and params:1044
Importing create_trans_table at 135296238
with addr:134523640 and params:1044
Importing create_color_table at 135296265
with addr:134523528 and params:1036
Importing mouse_x at 135296281
with addr:134724224 and params:-1
Importing mouse_y at 135296297
with addr:134725428 and params:-1
Importing mouse_b at 135296313
with addr:134724252 and params:-1
Importing mouse_pos at 135296331
with addr:134725432 and params:-1
Importing freeze_mouse_flag at 135296357
with addr:134725280 and params:-1
Importing keypressed at 135296376
with addr:134523176 and params:0
Importing readkey at 135296392
with addr:134524280 and params:0
Importing dbuf at 135296405
with addr:134735196 and params:-1
Importing addressof at 135296423
with addr:134525628 and params:4
Importing exec_script at 135296443
with addr:134525648 and params:8
Importing add_script at 135296462
with addr:134525328 and params:4
Importing add_tiles_pack at 135296485
with addr:134526020 and params:4
Importing df_get_item_num at 135296509
with addr:134524944 and params:8
Importing df_get_item at 135296529
with addr:134525032 and params:8
Importing df_item at 135296545
with addr:134525068 and params:8
Importing df_dat at 135296560
with addr:134525092 and params:4
Importing df_count at 135296577
with addr:134525112 and params:8
Importing df_foreach at 135296596
with addr:134525164 and params:8
Importing bmp_line at 135296613
with addr:134525236 and params:8
Importing bmp_w at 135296627
with addr:134525272 and params:4
Importing bmp_h at 135296641
with addr:134525292 and params:4
Importing printf at 135296656
with addr:134523768 and params:4
Importing create_object_type at 135296683
with addr:134530592 and params:12
Importing create_weapon_type at 135296710
with addr:134530864 and params:4
Importing assign_weapon_handler at 135296740
with addr:134530972 and params:8
Importing  at 135296749

0:Address 0, size 0,Calling 105
Size of params:0


Executing function from rpg.sc!
 12:ENTER 135123168 
NOP 
NOP 
NOP 
 16:{a0(=$1076136184),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135297503)}ADD
 28:a0(=$135297503) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$135119360),a0(=$135311160)}MOV
 60:{a0(=$135311160),[4]DS(=$135311160)}MOV
 68:a0(=$135311160) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$000d(=$13)}MOV
 100:{a0(=$13),a242(=$135297503)}ADD
 104:a0(=$135297516) PUSH (SP=3992) 
 108:[4]DS(=$135311160) PUSH (SP=3988) 
 116:{$0b57(=$2903),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135311160) PUSH (SP=3992) 
 140:{$0b76(=$2934),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$10048),a0(=$135315608)}MOV
 168:{a0(=$135315608),$0012(=$18)}MOV
 176:{a0(=$18),a242(=$135297503)}ADD
 180:a0(=$135297521) PUSH (SP=3992) 
 184:[4]DS(=$135311160) PUSH (SP=3988) 
 192:{$0b57(=$2903),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$135311416) PUSH (SP=3992) 
 216:{$0b76(=$2934),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$40),a0(=$135315056)}MOV
 244:{a0(=$135315056),$0019(=$25)}MOV
 252:{a0(=$25),a242(=$135297503)}ADD
 256:a0(=$135297528) PUSH (SP=3992) 
 260:[4]DS(=$135311160) PUSH (SP=3988) 
 268:{$0b57(=$2903),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$0) PUSH (SP=3992) 
 292:{$0b76(=$2934),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$1885092451),a0(=$0)}MOV
 320:{a0(=$0),$0021(=$33)}MOV
 328:{a0(=$33),a242(=$135297503)}ADD
 332:a0(=$135297536) PUSH (SP=3992) 
 336:[4]DS(=$135311160) PUSH (SP=3988) 
 344:{$0b57(=$2903),$0008(=$8)}CALLEX
 356:{a245(=$3988),$0008(=$8)}ADD
 364:a0(=$135311400) PUSH (SP=3992) 
 368:{$0b76(=$2934),$0004(=$4)}CALLEX
 380:{a245(=$3992),$0004(=$4)}ADD
 388:{[20]DS(=$1818589289),a0(=$135314152)}MOV
 396:{a0(=$135314152),$0028(=$40)}MOV
 404:{a0(=$40),a242(=$135297503)}ADD
 408:a0(=$135297543) PUSH (SP=3992) 
 412:{$0c0c(=$3084),$0004(=$4)}CALLEX
 424:{a245(=$3992),$0004(=$4)}ADD
 432:{[24]DS(=$1769233458),a0(=$0)}MOV
 440:{a0(=$0),$002c(=$44)}MOV
 448:{a0(=$44),a242(=$135297503)}ADD
 452:a0(=$135297547) PUSH (SP=3992) 
 456:{$0aed(=$2797),$0004(=$4)}CALLEX
 468:{a245(=$3992),$0004(=$4)}ADD
 476:a0(=$-1) PUSH (SP=3992) 
 480:[24]DS(=$0) PUSH (SP=3988) 
 488:{$0c2a(=$3114),$0008(=$8)}CALLEX
 500:{a245(=$3988),$0008(=$8)}ADD
 508:{a0(=$0),$0030(=$48)}MOV
 516:{a0(=$48),a242(=$135297503)}ADD
 520:a0(=$135297551) PUSH (SP=3992) 
 524:{a1(=$1076136184),$0039(=$57)}MOV
 532:{a1(=$57),a242(=$135297503)}ADD
 536:a1(=$135297560) PUSH (SP=3988) 
 540:{$0aed(=$2797),$0004(=$4)}CALLEX
 552:{a1(=$135297560),a0(=$-1)}MOV
 556:{a245(=$3988),$0004(=$4)}ADD
 564:a0(=$-1) POP (SP=3996) 
 568:[8]DS(=$135315608) PUSH (SP=3992) 
 576:a1(=$-1) PUSH (SP=3988) 
 580:a0(=$135297551) PUSH (SP=3984) 
 584:{$0bf1(=$3057),$000c(=$12)}CALLEX
 596:{a245(=$3984),$000c(=$12)}ADD
 604:{a0(=$0),$0045(=$69)}MOV
 612:{a0(=$69),a242(=$135297503)}ADD
 616:a0(=$135297572) PUSH (SP=3992) 
 620:{a1(=$-1),$0050(=$80)}MOV
 628:{a1(=$80),a242(=$135297503)}ADD
 632:a1(=$135297583) PUSH (SP=3988) 
 636:{$0aed(=$2797),$0004(=$4)}CALLEX
 648:{a1(=$135297583),a0(=$-1)}MOV
 652:{a245(=$3988),$0004(=$4)}ADD
 660:a0(=$-1) POP (SP=3996) 
 664:[12]DS(=$135315056) PUSH (SP=3992) 
 672:a1(=$-1) PUSH (SP=3988) 
 676:a0(=$135297572) PUSH (SP=3984) 
 680:{$0bf1(=$3057),$000c(=$12)}CALLEX
 692:{a245(=$3984),$000c(=$12)}ADD
 700:{a0(=$1),$0000(=$0)}MOV
 708:LEAVE 
RET SP=4000,CP=4000
EXIT

 104:{a245(=$3992),$0004(=$4)}ADD
 112:{a0(=$0),$002e(=$46)}MOV
 120:{a0(=$46),a242(=$135080251)}ADD
 124:a0(=$135080297) PUSH (SP=3992) 
 128:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>int x, y;
284>int legframe, legtics;
285>BITMAP *bmp;
286>};
287>
288> 
289>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
290>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
291>typedef void weapon_type_t;	       
292>import int create_weapon_type(char *name);    
293>import int assign_weapon_handler(int typenum, seer_addr handler);
294>
295>#! 7 "scripts/imports.sh"
296>
297>
298>#! 7 "!!_internal_Script"
299>
300>export script_main;
301>export script_exit;
302>
303>
304>DATAFILE *dat;
305>BITMAP *ammo, *weapon, *status;
306>int typenum;
307>
308>
309>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
310>{
311>    
312>
313>
314>
315>
316>
317>
318>	
319>}
320>
321>
322>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
323>{
324>    
325>
326>
327>
328>
329>
330>
331>
332>
333>}
334>
335>
336>void shotgun(msg_t msg, player_t *pl)
337>{
338>    
339>
340>
341>
342>
343>
344>
345>
346>
347>}
348>
349>
350>
351>
352>
353>
354>int script_main()
355>{
356>    dat = load_datafile("data/shotgun.dat");
357>    if (!dat)
358>      return -1;
359>
360>    ammo 	= df_dat(df_get_item(dat, "ammo"));
361>    weapon 	= df_dat(df_get_item(dat, "weapon"));
362>    status 	= df_dat(df_get_item(dat, "status"));
363>
364>    typenum = create_weapon_type("shotgun");
365>    assign_weapon_handler(typenum, addressof("shotgun"));
366>    
367>    create_object_type("shotgun;ammo", addressof("ammo_pickup"), ammo);
368>    create_object_type("shotgun;weapon", addressof("weapon_pickup"), weapon);
369>       
370>    return 0;
371>}
372>
373>
374>
375>
376>
377>
378>
379>void script_exit()
380>{
381>    unload_datafile(dat);
382>}
383>
384>
385>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(80dd4a8)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(810ff08)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(810ffe0,8110038,8110090,81100e8,8110140)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(8110258,81137a0)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(8113888,81138e0,8113938)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(8113a30,8113a98,8113af0,8113b48,8113ba0)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(8113cb8)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(8114140,8114198)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(8114288)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(8114360,81143b8,8114410,8114468)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(8114568,81145c0)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(81146b0)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(8114788,81147e0,8114838)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(8114938)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(8114a18,8114a80,8114ad8)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(8114be0,8114c38,8114c90,8114ce8)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(8114de8,8114e40,8114e98)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(8114f88,8114fe0,8115038)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(8115130,8115188,81151e0,8115238)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(8115338)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(81153f8)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(81154c8)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(8115598,81155f0)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(81156d0,8115728)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(8115808,8115860)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(8115940,81159a8,8115a00,8115a58)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(8115b58,8115bc0,8115c18,8115c70,8115cc8)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(8115de0,8115e38,8115ea0,8115ef8)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(8115ff8)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(81163c8,8116420,8116468,81164b0)>...
Declaration of `do_line' as <(8116140,81161a8,8116200,8116258,81162b0,8116308,8116360)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(8116620,8116688,81166e0,8116738,8116790,81167e8,8116840,8116898)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(81169d8,8116a40,8116a98,8116b00)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(8116c00,8116c68,8116cc0,8116d18,8116d70,8116dc8)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8117118,8117170,81171b8,8117200)>...
Declaration of `do_circle' as <(8116ee8,8116f50,8116fa8,8117000,8117058,81170b0)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(8117360,81173c8,8117420,8117478,81174d0)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(81175e0,8117648,81176a0,81176f8,8117750)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8117ae8,8117b40,8117b88,8117bd0)>...
Declaration of `do_ellipse' as <(8117860,81178c8,8117920,8117978,81179d0,8117a28,8117a80)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(8117d40,8117da8,8117e00,8117e58,8117eb0,8117f08)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(8118028,8118090,81180e8,8118140,8118198,81181f0)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(8118310,8118378,81183d0,8118438)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(8118548,81185b0,8118618)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(8118708,8118770,81187c8,8118820)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(8118920,8118988,81189f0,8118a48,8118aa0,8118af8,8118b50,8118ba8)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(8118ce8,8118d50,8118db8,8118e10,8118e68,8118ec0,8118f18,8118f70)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(81190b8,8119120,8119188,81191e0,8119238,8119290,81192e8,8119340,8119398,81193f0)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(8119558,81195c0,8119628,8119680,81196d8,8119730)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(8119858,81198c0,8119928,8119980,81199d8)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(8119af8,8119b60,8119bc8,8119c20,8119c78,8119cd0)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(8119df0)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(8119ed8,8119f40,8119fa8,811a000)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(811a100)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(811a1d0,811a238,811a2a0,811a308,811a360,811a3b8)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(811a4e0,811a548,811a5b0,811a618,811a670,811a6c8)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(811a7f0,811a858,811a8c0,811a928,811a980,811a9d8,811aa30,811aa88)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(811abc8,811ac30,811ac98,811acf0,811ad48,811ada0,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(811aee8,811af50,811afb8,811b010,811b068,811b0c0,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(811b200,811b268)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(811b358)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(811b440)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(811b520,811b588,811b5f0,811b648)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(811b780,811b7e8,811b850,811b8a8)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(811b9c8)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(811bab0)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(811bc10)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(811be80,811bed8,811bf30)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(811c030,811c088)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(811c170)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(811c258)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(811c338)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(811c418)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(811c4f8)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(811c5e0)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(811c6c0,811c728,811c780,811c7d8,811c830)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(811c940)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(811ca28,811ca90,811cae8,811cb40,811cb98)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(811cca8)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(811cd90)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(811ce70,811ced8)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(811cfc0,811d028,811d080)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(811d2d8)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(811d3a8,811d410)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(811d578)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(811d658,811d6c0)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(811d7b0)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(811d890,811d8f8)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(811d9e0,811da48)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(811db30)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(811dc00)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(811dce0)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(811ddc0,811de18)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(811df08,811df60)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(811e050)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(811e130)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(811e210,811e268)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(811e358,811e3b0)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(811e4a0,811e508,811e560)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(811e660,811e6c8,811e720)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(811e820,811e888,811e8e0)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(811e9e0,811ea48)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(811eb40)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(811ec20,811ec88)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(811ed60,811edc8)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(811eeb8,811ef20)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(811f010,811f078)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(811f168,811f1d0)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(811f2c0,811f328,811f390)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(811f470,811f4d8,811f540)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(811f640,811f6a8,811f710)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(811f810,811f878,811f8e0)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(811f9e8,811fa50,811faa8)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(811fba0,811fc08,811fc60,811fcb8,811fd10,811fd68)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(811fe90,811fef8,811ff50,811ffa8,8120000,8120058)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(81202a8,8120300,8120358)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(8120180,81201e8,8120240,81203f0)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(81208b8)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(8120998,8120a00)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(8120af0)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(8120bd8)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(8120cc0,8120d28)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(8120e00,8120e68)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(8120f58,8120fc0)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(81210a0)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(8121180,81211e8)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(8121398)>...
Declaration of `df_foreach' as <(81212c8,8121330)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(81214a8,8121510)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(81215f0)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(81216c0)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(81217a0,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(8121950,81219b8,8121a10)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Reading declaration:type is a standard `int'
Declaration of `legframe'...
struct:member legframe added
(Short)Declaration of `legtics' as (null)...
struct:member legtics added
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
struct:member bmp added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(8121d90,8121de8)>...
Defining type 'weapon_handler_t' as *(8121d90,8121de8)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(8121ed8,8121f30,8121f98)>...
Defining type 'object_handler_t' as *(8121ed8,8121f30,8121f98)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(8122100)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(81221f0,8122248)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(81225d0,8122628,8122690)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(8122798,81227f0,8122858)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void shotgun(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `shotgun' as <(8122958,81229b0)>...
Address:8
=======================>>ENTERING function `shotgun'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `shotgun'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/shotgun.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 17
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2903 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2934 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 22
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2903 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2934 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 29
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2903 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2934 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    typenum = create_weapon_type("shotgun");
Symbol:typenum
Symbol:create_weapon_type
 320: MOV a0 , 36
 328: ADD a0 , ES
 332: PUSH a0
 336: CALLEX 3084 , 4
 348: ADD SP , 4
 356: MOV [DS+20] , a0

>    assign_weapon_handler(typenum, addressof("shotgun"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 364: MOV a0 , 44
 372: ADD a0 , ES
 376: PUSH a0
 380: CALLEX 2797 , 4
 392: ADD SP , 4
 400: PUSH a0
 404: PUSH [DS+20]
 412: CALLEX 3114 , 8
 424: ADD SP , 8

>    create_object_type("shotgun;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 432: MOV a0 , 52
 440: ADD a0 , ES
Symbol:addressof
 444: PUSH a0
 448: MOV a1 , 65
 456: ADD a1 , ES
 460: PUSH a1
 464: CALLEX 2797 , 4
 476: MOV a1 , a0
 480: ADD SP , 4
 488: POP a0
Symbol:ammo
 492: PUSH [DS+8]
 500: PUSH a1
 504: PUSH a0
 508: CALLEX 3057 , 12
 520: ADD SP , 12

>    create_object_type("shotgun;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 528: MOV a0 , 77
 536: ADD a0 , ES
Symbol:addressof
 540: PUSH a0
 544: MOV a1 , 92
 552: ADD a1 , ES
 556: PUSH a1
 560: CALLEX 2797 , 4
 572: MOV a1 , a0
 576: ADD SP , 4
 584: POP a0
Symbol:weapon
 588: PUSH [DS+12]
 596: PUSH a1
 600: PUSH a0
 604: CALLEX 3057 , 12
 616: ADD SP , 12

>    return 0;
 624: MOV a0 , 0
 632: LEAVE 
 633: RET 
 634: LEAVE 
 635: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:636
=======================>>ENTERING function `script_exit'!
 636: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 640: PUSH [DS+4]
 648: CALLEX 1650 , 4
 660: ADD SP , 4
 668: LEAVE 
 669: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(8121ed8,8121f30,8121f98)'
 weapon_handler_t : `*(8121d90,8121de8)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+636
 script_main : `()' at CS+12
  shotgun : `(8122958,81229b0)' at CS+8
 weapon_pickup : `(8122798,81227f0,8122858)' at CS+4
 ammo_pickup : `(81225d0,8122628,8122690)' at CS+0
  typenum : at DS+20
   status : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(81221f0,8122248)' at 3114
 create_weapon_type : `(8122100)' at 3084
 create_object_type : `(8121950,81219b8,8121a10)' at 3057
   printf : `(81217a0,...)' at 3030
    bmp_h : `(81216c0)' at 3015
    bmp_w : `(81215f0)' at 3001
 bmp_line : `(81214a8,8121510)*' at 2987
 df_foreach : `(81212c8,8121330)' at 2970
 df_count : `(8121180,81211e8)' at 2951
   df_dat : `(81210a0)*' at 2934
  df_item : `(8120f58,8120fc0)*' at 2919
 df_get_item : `(8120e00,8120e68)*' at 2903
 df_get_item_num : `(8120cc0,8120d28)' at 2883
 add_tiles_pack : `(8120bd8)' at 2859
 add_script : `(8120af0)' at 2836
 exec_script : `(8120998,8120a00)' at 2817
 addressof : `(81208b8)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(8120180,81201e8,8120240,81203f0)' at 2639
 create_trans_table : `(811fe90,811fef8,811ff50,811ffa8,8120000,8120058)' at 2612
 create_light_table : `(811fba0,811fc08,811fc60,811fcb8,811fd10,811fd68)' at 2585
 create_rgb_table : `(811f9e8,811fa50,811faa8)' at 2558
 save_tga : `(811f810,811f878,811f8e0)' at 2533
 save_pcx : `(811f640,811f6a8,811f710)' at 2516
 save_bmp : `(811f470,811f4d8,811f540)' at 2499
 save_bitmap : `(811f2c0,811f328,811f390)' at 2482
 load_tga : `(811f168,811f1d0)*' at 2462
 load_pcx : `(811f010,811f078)*' at 2445
 load_lbm : `(811eeb8,811ef20)*' at 2428
 load_bmp : `(811ed60,811edc8)*' at 2411
 load_bitmap : `(811ec20,811ec88)*' at 2394
 get_filename : `(811eb40)*' at 2374
 pack_fputs : `(811e9e0,811ea48)' at 2353
 pack_fgets : `(811e820,811e888,811e8e0)*' at 2334
 pack_fwrite : `(811e660,811e6c8,811e720)' at 2315
 pack_fread : `(811e4a0,811e508,811e560)' at 2295
 pack_mputl : `(811e358,811e3b0)' at 2276
 pack_mputw : `(811e210,811e268)' at 2257
 pack_mgetl : `(811e130)' at 2238
 pack_mgetw : `(811e050)' at 2219
 pack_iputl : `(811df08,811df60)' at 2200
 pack_iputw : `(811ddc0,811de18)' at 2181
 pack_igetl : `(811dce0)' at 2162
 pack_igetw : `(811dc00)' at 2143
 pack_fclose_chunk : `(811db30)*' at 2124
 pack_fopen_chunk : `(811d9e0,811da48)*' at 2098
 pack_fseek : `(811d890,811d8f8)' at 2073
 pack_fclose : `(811d7b0)' at 2054
 pack_fopen : `(811d658,811d6c0)*' at 2034
 packfile_password : `(811d578)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(811d3a8,811d410)' at 1963
 midi_seek : `(811d2d8)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(811cfc0,811d028,811d080)' at 1871
 play_midi : `(811ce70,811ced8)' at 1846
 destroy_midi : `(811cd90)' at 1828
 load_midi : `(811cca8)*' at 1807
 adjust_sample : `(811ca28,811ca90,811cae8,811cb40,811cb98)' at 1789
 stop_sample : `(811c940)' at 1767
 play_sample : `(811c6c0,811c728,811c780,811c7d8,811c830)' at 1747
 destroy_sample : `(811c5e0)' at 1727
 load_voc : `(811c4f8)*' at 1704
 load_wav : `(811c418)*' at 1687
 load_sample : `(811c338)*' at 1670
 unload_datafile : `(811c258)' at 1650
 load_datafile : `(811c170)*' at 1626
 set_volume : `(811c030,811c088)' at 1604
 install_sound : `(811be80,811bed8,811bf30)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(811bc10)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(811bab0)' at 1437
 open_fli : `(811b9c8)' at 1413
 play_memory_fli : `(811b780,811b7e8,811b850,811b8a8)' at 1396
 play_fli : `(811b520,811b588,811b5f0,811b648)' at 1372
 destroy_font : `(811b440)' at 1355
 text_height : `(811b358)' at 1334
 text_length : `(811b200,811b268)' at 1314
 textprintf_centre : `(811aee8,811af50,811afb8,811b010,811b068,811b0c0,...)' at 1294
 textprintf : `(811abc8,811ac30,811ac98,811acf0,811ad48,811ada0,...)' at 1268
 textout_justify : `(811a7f0,811a858,811a8c0,811a928,811a980,811a9d8,811aa30,811aa88)' at 1249
 textout_centre : `(811a4e0,811a548,811a5b0,811a618,811a670,811a6c8)' at 1225
  textout : `(811a1d0,811a238,811a2a0,811a308,811a360,811a3b8)' at 1202
 text_mode : `(811a100)' at 1186
 draw_trans_sprite : `(8119ed8,8119f40,8119fa8,811a000)' at 1168
    clear : `(8119df0)' at 1142
 rotate_scaled_sprite : `(8119af8,8119b60,8119bc8,8119c20,8119c78,8119cd0)' at 1128
 rotate_sprite : `(8119858,81198c0,8119928,8119980,81199d8)' at 1099
 stretch_sprite : `(8119558,81195c0,8119628,8119680,81196d8,8119730)' at 1077
 stretch_blit : `(81190b8,8119120,8119188,81191e0,8119238,8119290,81192e8,8119340,8119398,81193f0)' at 1054
 masked_blit : `(8118ce8,8118d50,8118db8,8118e10,8118e68,8118ec0,8118f18,8118f70)' at 1033
     blit : `(8118920,8118988,81189f0,8118a48,8118aa0,8118af8,8118b50,8118ba8)' at 1013
 floodfill : `(8118708,8118770,81187c8,8118820)' at 1000
   spline : `(8118548,81185b0,8118618)' at 982
 calc_spline : `(8118310,8118378,81183d0,8118438)' at 967
 ellipsefill : `(8118028,8118090,81180e8,8118140,8118198,81181f0)' at 947
  ellipse : `(8117d40,8117da8,8117e00,8117e58,8117eb0,8117f08)' at 927
 do_ellipse : `(8117860,81178c8,8117920,8117978,81179d0,8117a28,8117a80)' at 911
 circlefill : `(81175e0,8117648,81176a0,81176f8,8117750)' at 892
   circle : `(8117360,81173c8,8117420,8117478,81174d0)' at 873
 do_circle : `(8116ee8,8116f50,8116fa8,8117000,8117058,81170b0)' at 858
     rect : `(8116c00,8116c68,8116cc0,8116d18,8116d70,8116dc8)' at 840
  polygon : `(81169d8,8116a40,8116a98,8116b00)' at 827
 triangle : `(8116620,8116688,81166e0,8116738,8116790,81167e8,8116840,8116898)' at 811
  do_line : `(8116140,81161a8,8116200,8116258,81162b0,8116308,8116360)' at 794
 solid_mode : `()' at 778
 xor_mode : `(8115ff8)' at 759
 drawing_mode : `(8115de0,8115e38,8115ea0,8115ef8)' at 742
 set_clip : `(8115b58,8115bc0,8115c18,8115c70,8115cc8)' at 721
 putpixel : `(8115940,81159a8,8115a00,8115a58)' at 704
 getb_depth : `(8115808,8115860)' at 687
 getg_depth : `(81156d0,8115728)' at 668
 getr_depth : `(8115598,81155f0)' at 649
     getb : `(81154c8)' at 630
     getg : `(81153f8)' at 617
     getr : `(8115338)' at 604
 makecol_depth : `(8115130,8115188,81151e0,8115238)' at 591
 makecol8 : `(8114f88,8114fe0,8115038)' at 569
  makecol : `(8114de8,8114e40,8114e98)' at 552
 bestfit_color : `(8114be0,8114c38,8114c90,8114ce8)' at 536
 generate_optimized_palette : `(8114a18,8114a80,8114ad8)' at 514
 generate_332_palette : `(8114938)' at 479
 get_pallete_range : `(8114788,81147e0,8114838)' at 450
 get_pallete : `(81146b0)' at 424
 get_color : `(8114568,81145c0)' at 404
 set_pallete_range : `(8114360,81143b8,8114410,8114468)' at 386
 set_pallete : `(8114288)' at 360
 set_color : `(8114140,8114198)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(8113cb8)' at 288
 create_sub_bitmap : `(8113a30,8113a98,8113af0,8113b48,8113ba0)*' at 265
 create_bitmap_ex : `(8113888,81138e0,8113938)*' at 239
 create_bitmap : `(8110258,81137a0)*' at 214
 set_gfx_mode : `(810ffe0,8110038,8110090,81100e8,8110140)' at 192
 set_color_conversion : `(810ff08)' at 171
 set_color_depth : `(80dd4a8)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:670
Inits size:0
Consts size:106
Data size:24
Stack size:4000
Doing CleanUp..............................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135412883
with addr:134524136 and params:0
Importing allegro_exit at 135412904
with addr:134524088 and params:0
Importing install_mouse at 135412926
with addr:134523208 and params:0
Importing install_timer at 135412948
with addr:134524072 and params:0
Importing install_keyboard at 135412973
with addr:134524040 and params:0
Importing screen at 135412988
with addr:134724240 and params:-1
Importing set_color_depth at 135413012
with addr:134524120 and params:4
Importing set_color_conversion at 135413041
with addr:134522424 and params:4
Importing set_gfx_mode at 135413062
with addr:134522200 and params:20
Importing create_bitmap at 135413084
with addr:134523432 and params:8
Importing create_bitmap_ex at 135413109
with addr:134523192 and params:12
Importing create_sub_bitmap at 135413135
with addr:134522360 and params:20
Importing destroy_bitmap at 135413158
with addr:134523944 and params:4
Importing rgb_map at 135413174
with addr:134725444 and params:-1
Importing color_map at 135413192
with addr:134725436 and params:-1
Importing set_color at 135413210
with addr:134523896 and params:8
Importing set_pallete at 135413230
with addr:134522648 and params:1024
Importing set_pallete_range at 135413256
with addr:134522728 and params:1036
Importing get_color at 135413274
with addr:134523832 and params:8
Importing get_pallete at 135413294
with addr:134522472 and params:1024
Importing get_pallete_range at 135413320
with addr:134524648 and params:1032
Importing generate_332_palette at 135413349
with addr:134522072 and params:1024
Importing generate_optimized_palette at 135413384
with addr:134524184 and params:1284
Importing bestfit_color at 135413406
with addr:134523304 and params:1036
Importing makecol at 135413422
with addr:134524520 and params:12
Importing makecol8 at 135413439
with addr:134524600 and params:12
Importing makecol_depth at 135413461
with addr:134523032 and params:16
Importing getr at 135413474
with addr:134523272 and params:4
Importing getg at 135413487
with addr:134524152 and params:4
Importing getb at 135413500
with addr:134524344 and params:4
Importing getr_depth at 135413519
with addr:134524232 and params:8
Importing getg_depth at 135413538
with addr:134522680 and params:8
Importing getb_depth at 135413557
with addr:134523656 and params:8
Importing putpixel at 135413574
with addr:134522376 and params:16
Importing set_clip at 135413591
with addr:134524024 and params:20
Importing drawing_mode at 135413612
with addr:134522056 and params:16
Importing xor_mode at 135413629
with addr:134522824 and params:4
Importing solid_mode at 135413648
with addr:134522280 and params:0
Importing do_line at 135413664
with addr:134523704 and params:28
Importing triangle at 135413681
with addr:134522312 and params:32
Importing polygon at 135413697
with addr:134522632 and params:16
Importing rect at 135413710
with addr:134524168 and params:24
Importing do_circle at 135413728
with addr:134522088 and params:24
Importing circle at 135413743
with addr:134523160 and params:20
Importing circlefill at 135413762
with addr:134524216 and params:20
Importing do_ellipse at 135413781
with addr:134522520 and params:28
Importing ellipse at 135413797
with addr:134524568 and params:24
Importing ellipsefill at 135413817
with addr:134522168 and params:24
Importing calc_spline at 135413837
with addr:134523256 and params:16
Importing spline at 135413852
with addr:134522216 and params:40
Importing floodfill at 135413870
with addr:134523496 and params:16
Importing blit at 135413883
with addr:134523688 and params:32
Importing masked_blit at 135413903
with addr:134524664 and params:32
Importing stretch_blit at 135413924
with addr:134524584 and params:40
Importing stretch_sprite at 135413947
with addr:134524008 and params:24
Importing rotate_sprite at 135413969
with addr:134524296 and params:20
Importing rotate_scaled_sprite at 135413998
with addr:134522712 and params:24
Importing clear at 135414012
with addr:134523000 and params:4
Importing draw_trans_sprite at 135414038
with addr:134522600 and params:16
Importing text_mode at 135414056
with addr:134523816 and params:4
Importing textout at 135414072
with addr:134522152 and params:24
Importing textout_centre at 135414095
with addr:134523352 and params:24
Importing textout_justify at 135414119
with addr:134522952 and params:32
Importing textprintf at 135414138
with addr:134522120 and params:24
Importing textprintf_centre at 135414164
with addr:134523080 and params:24
Importing text_length at 135414184
with addr:134523240 and params:8
Importing text_height at 135414204
with addr:134522248 and params:4
Importing destroy_font at 135414225
with addr:134523912 and params:4
Importing play_fli at 135414242
with addr:134524424 and params:16
Importing play_memory_fli at 135414266
with addr:134522856 and params:16
Importing open_fli at 135414283
with addr:134523992 and params:4
Importing open_memory_fli at 135414307
with addr:134522136 and params:4
Importing close_fli at 135414325
with addr:134522888 and params:0
Importing next_fli_frame at 135414348
with addr:134523368 and params:4
Importing reset_fli_variables at 135414376
with addr:134522344 and params:0
Importing fli_bitmap at 135414395
with addr:134724232 and params:-1
Importing fli_pallete at 135414415
with addr:134724256 and params:-1
Importing fli_frame at 135414433
with addr:134725440 and params:-1
Importing install_sound at 135414455
with addr:134524456 and params:12
Importing set_volume at 135414474
with addr:134522616 and params:8
Importing load_datafile at 135414496
with addr:134524616 and params:4
Importing unload_datafile at 135414520
with addr:134524408 and params:4
Importing load_sample at 135414540
with addr:134522776 and params:4
Importing load_wav at 135414557
with addr:134523048 and params:4
Importing load_voc at 135414574
with addr:134522504 and params:4
Importing destroy_sample at 135414597
with addr:134524488 and params:4
Importing play_sample at 135414617
with addr:134522664 and params:20
Importing stop_sample at 135414637
with addr:134524472 and params:4
Importing adjust_sample at 135414659
with addr:134522840 and params:20
Importing load_midi at 135414677
with addr:134523544 and params:4
Importing destroy_midi at 135414698
with addr:134522872 and params:4
Importing play_midi at 135414716
with addr:134522760 and params:8
Importing play_looped_midi at 135414741
with addr:134523752 and params:12
Importing stop_midi at 135414759
with addr:134522456 and params:0
Importing midi_pause at 135414778
with addr:134523592 and params:0
Importing midi_resume at 135414798
with addr:134523880 and params:0
Importing midi_seek at 135414816
with addr:134522968 and params:4
Importing midi_out at 135414833
with addr:134523288 and params:8
Importing load_midi_patches at 135414859
with addr:134522808 and params:0
Importing packfile_password at 135414885
with addr:134523736 and params:4
Importing pack_fopen at 135414904
with addr:134523512 and params:8
Importing pack_fclose at 135414924
with addr:134523464 and params:4
Importing pack_fseek at 135414943
with addr:134523928 and params:8
Importing pack_fopen_chunk at 135414968
with addr:134522328 and params:8
Importing pack_fclose_chunk at 135414994
with addr:134524504 and params:4
Importing pack_igetw at 135415013
with addr:134523608 and params:4
Importing pack_igetl at 135415032
with addr:134522792 and params:4
Importing pack_iputw at 135415051
with addr:134522536 and params:8
Importing pack_iputl at 135415070
with addr:134522552 and params:8
Importing pack_mgetw at 135415089
with addr:134522920 and params:4
Importing pack_mgetl at 135415108
with addr:134524552 and params:4
Importing pack_mputw at 135415127
with addr:134522744 and params:8
Importing pack_mputl at 135415146
with addr:134523784 and params:8
Importing pack_fread at 135415165
with addr:134523448 and params:12
Importing pack_fwrite at 135415185
with addr:134523976 and params:12
Importing pack_fgets at 135415204
with addr:134522568 and params:12
Importing pack_fputs at 135415223
with addr:134522584 and params:8
Importing get_filename at 135415244
with addr:134523016 and params:4
Importing load_bitmap at 135415264
with addr:134523400 and params:8
Importing load_bmp at 135415281
with addr:134522104 and params:8
Importing load_lbm at 135415298
with addr:134523960 and params:8
Importing load_pcx at 135415315
with addr:134522696 and params:8
Importing load_tga at 135415332
with addr:134523720 and params:8
Importing save_bitmap at 135415352
with addr:134523144 and params:12
Importing save_bmp at 135415369
with addr:134524312 and params:12
Importing save_pcx at 135415386
with addr:134523064 and params:12
Importing save_tga at 135415403
with addr:134523576 and params:12
Importing create_rgb_table at 135415428
with addr:134524360 and params:1032
Importing create_light_table at 135415455
with addr:134524632 and params:1044
Importing create_trans_table at 135415482
with addr:134523640 and params:1044
Importing create_color_table at 135415509
with addr:134523528 and params:1036
Importing mouse_x at 135415525
with addr:134724224 and params:-1
Importing mouse_y at 135415541
with addr:134725428 and params:-1
Importing mouse_b at 135415557
with addr:134724252 and params:-1
Importing mouse_pos at 135415575
with addr:134725432 and params:-1
Importing freeze_mouse_flag at 135415601
with addr:134725280 and params:-1
Importing keypressed at 135415620
with addr:134523176 and params:0
Importing readkey at 135415636
with addr:134524280 and params:0
Importing dbuf at 135415649
with addr:134735196 and params:-1
Importing addressof at 135415667
with addr:134525628 and params:4
Importing exec_script at 135415687
with addr:134525648 and params:8
Importing add_script at 135415706
with addr:134525328 and params:4
Importing add_tiles_pack at 135415729
with addr:134526020 and params:4
Importing df_get_item_num at 135415753
with addr:134524944 and params:8
Importing df_get_item at 135415773
with addr:134525032 and params:8
Importing df_item at 135415789
with addr:134525068 and params:8
Importing df_dat at 135415804
with addr:134525092 and params:4
Importing df_count at 135415821
with addr:134525112 and params:8
Importing df_foreach at 135415840
with addr:134525164 and params:8
Importing bmp_line at 135415857
with addr:134525236 and params:8
Importing bmp_w at 135415871
with addr:134525272 and params:4
Importing bmp_h at 135415885
with addr:134525292 and params:4
Importing printf at 135415900
with addr:134523768 and params:4
Importing create_object_type at 135415927
with addr:134530592 and params:12
Importing create_weapon_type at 135415954
with addr:134530864 and params:4
Importing assign_weapon_handler at 135415984
with addr:134530972 and params:8
Importing  at 135415993

0:Address 0, size 0,Calling 109
Size of params:0


Executing function from shotgun.sc!
 12:ENTER 135340868 
NOP 
NOP 
NOP 
 16:{a0(=$1076136184),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135416671)}ADD
 28:a0(=$135416671) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$0),a0(=$135410544)}MOV
 60:{a0(=$135410544),[4]DS(=$135410544)}MOV
 68:a0(=$135410544) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$0011(=$17)}MOV
 100:{a0(=$17),a242(=$135416671)}ADD
 104:a0(=$135416688) PUSH (SP=3992) 
 108:[4]DS(=$135410544) PUSH (SP=3988) 
 116:{$0b57(=$2903),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135410544) PUSH (SP=3992) 
 140:{$0b76(=$2934),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$0),a0(=$135310984)}MOV
 168:{a0(=$135310984),$0016(=$22)}MOV
 176:{a0(=$22),a242(=$135416671)}ADD
 180:a0(=$135416693) PUSH (SP=3992) 
 184:[4]DS(=$135410544) PUSH (SP=3988) 
 192:{$0b57(=$2903),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$135410768) PUSH (SP=3992) 
 216:{$0b76(=$2934),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$0),a0(=$135426688)}MOV
 244:{a0(=$135426688),$001d(=$29)}MOV
 252:{a0(=$29),a242(=$135416671)}ADD
 256:a0(=$135416700) PUSH (SP=3992) 
 260:[4]DS(=$135410544) PUSH (SP=3988) 
 268:{$0b57(=$2903),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$135410752) PUSH (SP=3992) 
 292:{$0b76(=$2934),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$0),a0(=$135425824)}MOV
 320:{a0(=$135425824),$0024(=$36)}MOV
 328:{a0(=$36),a242(=$135416671)}ADD
 332:a0(=$135416707) PUSH (SP=3992) 
 336:{$0c0c(=$3084),$0004(=$4)}CALLEX
 348:{a245(=$3992),$0004(=$4)}ADD
 356:{[20]DS(=$0),a0(=$1)}MOV
 364:{a0(=$1),$002c(=$44)}MOV
 372:{a0(=$44),a242(=$135416671)}ADD
 376:a0(=$135416715) PUSH (SP=3992) 
 380:{$0aed(=$2797),$0004(=$4)}CALLEX
 392:{a245(=$3992),$0004(=$4)}ADD
 400:a0(=$-1) PUSH (SP=3992) 
 404:[20]DS(=$1) PUSH (SP=3988) 
 412:{$0c2a(=$3114),$0008(=$8)}CALLEX
 424:{a245(=$3988),$0008(=$8)}ADD
 432:{a0(=$0),$0034(=$52)}MOV
 440:{a0(=$52),a242(=$135416671)}ADD
 444:a0(=$135416723) PUSH (SP=3992) 
 448:{a1(=$1076136184),$0041(=$65)}MOV
 456:{a1(=$65),a242(=$135416671)}ADD
 460:a1(=$135416736) PUSH (SP=3988) 
 464:{$0aed(=$2797),$0004(=$4)}CALLEX
 476:{a1(=$135416736),a0(=$-1)}MOV
 480:{a245(=$3988),$0004(=$4)}ADD
 488:a0(=$-1) POP (SP=3996) 
 492:[8]DS(=$135310984) PUSH (SP=3992) 
 500:a1(=$-1) PUSH (SP=3988) 
 504:a0(=$135416723) PUSH (SP=3984) 
 508:{$0bf1(=$3057),$000c(=$12)}CALLEX
 520:{a245(=$3984),$000c(=$12)}ADD
 528:{a0(=$2),$004d(=$77)}MOV
 536:{a0(=$77),a242(=$135416671)}ADD
 540:a0(=$135416748) PUSH (SP=3992) 
 544:{a1(=$-1),$005c(=$92)}MOV
 552:{a1(=$92),a242(=$135416671)}ADD
 556:a1(=$135416763) PUSH (SP=3988) 
 560:{$0aed(=$2797),$0004(=$4)}CALLEX
 572:{a1(=$135416763),a0(=$-1)}MOV
 576:{a245(=$3988),$0004(=$4)}ADD
 584:a0(=$-1) POP (SP=3996) 
 588:[12]DS(=$135426688) PUSH (SP=3992) 
 596:a1(=$-1) PUSH (SP=3988) 
 600:a0(=$135416748) PUSH (SP=3984) 
 604:{$0bf1(=$3057),$000c(=$12)}CALLEX
 616:{a245(=$3984),$000c(=$12)}ADD
 624:{a0(=$3),$0000(=$0)}MOV
 632:LEAVE 
RET SP=4000,CP=4000
EXIT

 140:{a245(=$3992),$0004(=$4)}ADD
 148:{a0(=$0),$0000(=$0)}MOV
 156:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 85
Size of params:0


Executing function from rpg.sc!
 712:ENTER 135123168 
NOP 
NOP 
NOP 
 716:[4]DS(=$135311160) PUSH (SP=3992) 
 724:{$0672(=$1650),$0004(=$4)}CALLEX
 736:{a245(=$3992),$0004(=$4)}ADD
 744:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 89
Size of params:0


Executing function from shotgun.sc!
 636:ENTER 135340868 
NOP 
NOP 
NOP 
 640:[4]DS(=$135410544) PUSH (SP=3992) 
 648:{$0672(=$1650),$0004(=$4)}CALLEX
 660:{a245(=$3992),$0004(=$4)}ADD
 668:LEAVE 
RET SP=4000,CP=4000
EXIT
