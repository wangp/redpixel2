/* Generated by bindgen.lua on Sat Jan 19 22:57:01 2002.  Do not edit.  */

static int bind_store_load(lua_State *L)
{
	const char * filename;
	const char * prefix;
	int ret;
	if (!lua_checkargs(L, "ss")) goto error;
	filename = lua_tostring(L, 1);
	prefix = lua_tostring(L, 2);
	ret = store_load_ex(filename, prefix, load_extended_datafile);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_tiles_load(lua_State *L)
{
	const char * filename;
	const char * prefix;
	int ret;
	if (!lua_checkargs(L, "ss")) goto error;
	filename = lua_tostring(L, 1);
	prefix = lua_tostring(L, 2);
	ret = tiles_load(filename, prefix);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_lights_load(lua_State *L)
{
	const char * filename;
	const char * prefix;
	int ret;
	if (!lua_checkargs(L, "ss")) goto error;
	filename = lua_tostring(L, 1);
	prefix = lua_tostring(L, 2);
	ret = lights_load(filename, prefix);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_store_index(lua_State *L)
{
	const char * key;
	int ret;
	if (!lua_checkargs(L, "s")) goto error;
	key = lua_tostring(L, 1);
	ret = store_index(key);
	if (!ret) goto error;
	lua_pushnumber(L, ret); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_objtype_register(lua_State *L)
{
	const char * type;
	const char * name;
	const char * icon;
	lua_ref_t func;
	int ret;
	if (!lua_checkargs(L, "[sN]ss[fN-]")) goto error;
	type = lua_isnil(L, 1) ? 0 : lua_tostring(L, 1);
	name = lua_tostring(L, 2);
	icon = lua_tostring(L, 3);
	func = ((lua_isnil(L, 4) || lua_isnull(L, 4)) ? LUA_NOREF : lua_ref(L, 4));
	ret = objtypes_register(type, name, icon, func);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_destroy(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_set_stale(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_hide(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_hide(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_show(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_show(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind__internal_object_moving_horizontally(lua_State *L)
{
	object_t * obj;
	int ret;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	ret = object_moving_horizontally(obj);
	if (!ret) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_set_collision_is_player(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_set_collision_is_player(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_set_collision_is_ladder(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_set_collision_is_ladder(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_set_collision_flags(lua_State *L)
{
	object_t * obj;
	const char * flags;
	if (!lua_checkargs(L, "us")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	flags = lua_tostring(L, 2);
	object_set_collision_flags_string(obj, flags);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_add_creation_field(lua_State *L)
{
	object_t * obj;
	const char * name;
	if (!lua_checkargs(L, "us")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	name = lua_tostring(L, 2);
	object_add_creation_field(obj, name);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_set_update_hook(lua_State *L)
{
	object_t * obj;
	int msecs;
	lua_ref_t method;
	if (!lua_checkargs(L, "unf")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	msecs = lua_tonumber(L, 2);
	method = lua_ref(L, 3);
	object_set_update_hook(obj, msecs, method);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_update_hook(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_remove_update_hook(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_add_layer(lua_State *L)
{
	object_t * obj;
	const char * image;
	int xoffset;
	int yoffset;
	int layerid;
	if (!lua_checkargs(L, "usnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	image = lua_tostring(L, 2);
	xoffset = lua_tonumber(L, 3);
	yoffset = lua_tonumber(L, 4);
	layerid = object_add_layer(obj, image, xoffset, yoffset);
	lua_pushnumber(L, layerid); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_replace_layer(lua_State *L)
{
	object_t * obj;
	int layerid;
	const char * image;
	int xoffset;
	int yoffset;
	int ret;
	if (!lua_checkargs(L, "unsnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	layerid = lua_tonumber(L, 2);
	image = lua_tostring(L, 3);
	xoffset = lua_tonumber(L, 4);
	yoffset = lua_tonumber(L, 5);
	ret = object_replace_layer(obj, layerid, image, xoffset, yoffset);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_move_layer(lua_State *L)
{
	object_t * obj;
	int layerid;
	int xoffset;
	int yoffset;
	int ret;
	if (!lua_checkargs(L, "unnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	layerid = lua_tonumber(L, 2);
	xoffset = lua_tonumber(L, 3);
	yoffset = lua_tonumber(L, 4);
	ret = object_move_layer(obj, layerid, xoffset, yoffset);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_hflip_layer(lua_State *L)
{
	object_t * obj;
	int layerid;
	int hflip;
	int ret;
	if (!lua_checkargs(L, "unn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	layerid = lua_tonumber(L, 2);
	hflip = lua_tonumber(L, 3);
	ret = object_hflip_layer(obj, layerid, hflip);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_rotate_layer(lua_State *L)
{
	object_t * obj;
	int layerid;
	int angle;
	int ret;
	if (!lua_checkargs(L, "unn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	layerid = lua_tonumber(L, 2);
	angle = lua_tonumber(L, 3);
	ret = object_rotate_layer(obj, layerid, angle);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_layer(lua_State *L)
{
	object_t * obj;
	int layerid;
	int ret;
	if (!lua_checkargs(L, "un")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	layerid = lua_tonumber(L, 2);
	ret = object_remove_layer(obj, layerid);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_all_layers(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_remove_all_layers(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_add_light(lua_State *L)
{
	object_t * obj;
	const char * image;
	int xoffset;
	int yoffset;
	int lightid;
	if (!lua_checkargs(L, "usnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	image = lua_tostring(L, 2);
	xoffset = lua_tonumber(L, 3);
	yoffset = lua_tonumber(L, 4);
	lightid = object_add_light(obj, image, xoffset, yoffset);
	lua_pushnumber(L, lightid); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_replace_light(lua_State *L)
{
	object_t * obj;
	int lightid;
	const char * image;
	int xoffset;
	int yoffset;
	int ret;
	if (!lua_checkargs(L, "unsnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	lightid = lua_tonumber(L, 2);
	image = lua_tostring(L, 3);
	xoffset = lua_tonumber(L, 4);
	yoffset = lua_tonumber(L, 5);
	ret = object_replace_light(obj, lightid, image, xoffset, yoffset);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_move_light(lua_State *L)
{
	object_t * obj;
	int lightid;
	int xoffset;
	int yoffset;
	int ret;
	if (!lua_checkargs(L, "unnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	lightid = lua_tonumber(L, 2);
	xoffset = lua_tonumber(L, 3);
	yoffset = lua_tonumber(L, 4);
	ret = object_move_light(obj, lightid, xoffset, yoffset);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_light(lua_State *L)
{
	object_t * obj;
	int lightid;
	int ret;
	if (!lua_checkargs(L, "un")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	lightid = lua_tonumber(L, 2);
	ret = object_remove_light(obj, lightid);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_all_lights(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_remove_all_lights(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_set_mask(lua_State *L)
{
	object_t * obj;
	int masknumber;
	const char * mask;
	int xoffset;
	int yoffset;
	int ret;
	if (!lua_checkargs(L, "unsnn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	masknumber = lua_tonumber(L, 2);
	mask = lua_tostring(L, 3);
	xoffset = lua_tonumber(L, 4);
	yoffset = lua_tonumber(L, 5);
	ret = object_set_mask(obj, masknumber, mask, xoffset, yoffset);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_set_masks_centre(lua_State *L)
{
	object_t * obj;
	int xoffset;
	int yoffset;
	if (!lua_checkargs(L, "unn")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	xoffset = lua_tonumber(L, 2);
	yoffset = lua_tonumber(L, 3);
	object_set_masks_centre(obj, xoffset, yoffset);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_mask(lua_State *L)
{
	object_t * obj;
	int masknumber;
	int ret;
	if (!lua_checkargs(L, "un")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	masknumber = lua_tonumber(L, 2);
	ret = object_remove_mask(obj, masknumber);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_object_remove_all_masks(lua_State *L)
{
	object_t * obj;
	if (!lua_checkargs(L, "u")) goto error;
	obj = lua_toobject(L, 1);
	if (!obj) goto error;
	object_remove_all_masks(obj);
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_spawn_object(lua_State *L)
{
	const char * typename;
	float x;
	float y;
	object_t * obj;
	if (!lua_checkargs(L, "snn")) goto error;
	typename = lua_tostring(L, 1);
	x = lua_tonumber(L, 2);
	y = lua_tonumber(L, 3);
	obj = game_server_spawn_object(typename, x, y);
	if (!obj) goto error;
	lua_pushobject(L, obj); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_spawn_projectile(lua_State *L)
{
	const char * typename;
	object_t * owner;
	float speed;
	float delta_angle;
	object_t * obj;
	if (!lua_checkargs(L, "sun[nN-]")) goto error;
	typename = lua_tostring(L, 1);
	owner = lua_toobject(L, 2);
	if (!owner) goto error;
	speed = lua_tonumber(L, 3);
	delta_angle = ((lua_isnil(L, 4) || lua_isnull(L, 4)) ? 0. : lua_tonumber(L, 4));
	obj = game_server_spawn_projectile(typename, owner, speed, delta_angle);
	if (!obj) goto error;
	lua_pushobject(L, obj); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_spawn_blood(lua_State *L)
{
	float x;
	float y;
	int nparticles;
	float spread;
	int ret;
	if (!lua_checkargs(L, "nnnn")) goto error;
	x = lua_tonumber(L, 1);
	y = lua_tonumber(L, 2);
	nparticles = lua_tonumber(L, 3);
	spread = lua_tonumber(L, 4);
	ret = game_server_spawn_blood(x, y, nparticles, spread);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

static int bind_spawn_blod(lua_State *L)
{
	float x;
	float y;
	int nparticles;
	int ret;
	if (!lua_checkargs(L, "nnn")) goto error;
	x = lua_tonumber(L, 1);
	y = lua_tonumber(L, 2);
	nparticles = lua_tonumber(L, 3);
	ret = game_server_spawn_blod(x, y, nparticles);
	if (ret < 0) goto error;
	lua_pushnumber(L, 1); return 1;
error:
	lua_pushnil(L); return 1;
}

#define DO_REGISTRATION(L)  \
	lua_register(L, "store_load", bind_store_load); \
	lua_register(L, "tiles_load", bind_tiles_load); \
	lua_register(L, "lights_load", bind_lights_load); \
	lua_register(L, "store_index", bind_store_index); \
	lua_register(L, "objtype_register", bind_objtype_register); \
	lua_register(L, "object_destroy", bind_object_destroy); \
	lua_register(L, "object_hide", bind_object_hide); \
	lua_register(L, "object_show", bind_object_show); \
	lua_register(L, "_internal_object_moving_horizontally", bind__internal_object_moving_horizontally); \
	lua_register(L, "object_set_collision_is_player", bind_object_set_collision_is_player); \
	lua_register(L, "object_set_collision_is_ladder", bind_object_set_collision_is_ladder); \
	lua_register(L, "object_set_collision_flags", bind_object_set_collision_flags); \
	lua_register(L, "object_add_creation_field", bind_object_add_creation_field); \
	lua_register(L, "object_set_update_hook", bind_object_set_update_hook); \
	lua_register(L, "object_remove_update_hook", bind_object_remove_update_hook); \
	lua_register(L, "object_add_layer", bind_object_add_layer); \
	lua_register(L, "object_replace_layer", bind_object_replace_layer); \
	lua_register(L, "object_move_layer", bind_object_move_layer); \
	lua_register(L, "object_hflip_layer", bind_object_hflip_layer); \
	lua_register(L, "object_rotate_layer", bind_object_rotate_layer); \
	lua_register(L, "object_remove_layer", bind_object_remove_layer); \
	lua_register(L, "object_remove_all_layers", bind_object_remove_all_layers); \
	lua_register(L, "object_add_light", bind_object_add_light); \
	lua_register(L, "object_replace_light", bind_object_replace_light); \
	lua_register(L, "object_move_light", bind_object_move_light); \
	lua_register(L, "object_remove_light", bind_object_remove_light); \
	lua_register(L, "object_remove_all_lights", bind_object_remove_all_lights); \
	lua_register(L, "object_set_mask", bind_object_set_mask); \
	lua_register(L, "object_set_masks_centre", bind_object_set_masks_centre); \
	lua_register(L, "object_remove_mask", bind_object_remove_mask); \
	lua_register(L, "object_remove_all_masks", bind_object_remove_all_masks); \
	lua_register(L, "spawn_object", bind_spawn_object); \
	lua_register(L, "spawn_projectile", bind_spawn_projectile); \
	lua_register(L, "spawn_blood", bind_spawn_blood); \
	lua_register(L, "spawn_blod", bind_spawn_blod);
