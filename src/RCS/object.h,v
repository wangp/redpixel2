head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2002.07.15.11.05.22;	author tjaden;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.15.09.27.46;	author tjaden;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.13.03.45.08;	author tjaden;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.12.17.26.31;	author tjaden;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.11.12.24.24;	author tjaden;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.11.05.51.29;	author tjaden;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.09.10.03.44;	author tjaden;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.28.14.06.29;	author tjaden;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.24.07.23.01;	author tjaden;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.23.15.00.42;	author tjaden;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.21.00.19.17;	author tjaden;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.18.14.29.31;	author tjaden;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.17.13.30.51;	author tjaden;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.14.16.05.49;	author tjaden;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.14.15.00.15;	author tjaden;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.14.08.41.58;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.14.02.19.22;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.13.15.01.43;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.12.20.16.35;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Changed the type of object collision tags.
@
text
@#ifndef __included_object_h
#define __included_object_h


#include "mylua.h"

struct BITMAP;
struct map;
struct list_head;


typedef struct object object_t;

/* Unique id number.  All machines playing the same game have the same
 * id numbers for objects.  */
typedef unsigned long objid_t;

/* Zero is reserved for objects which the server doesn't care about
 * and only exist on game clients (e.g. blods).  Before thinking about
 * using these, read the warnings in client.c.  */
/* This also gets use as a dummy owner of blasts.  */
#define OBJID_CLIENT_PROCESSED	0

/* Numbers less than OBJID_PLAYER_MAX are reserved for use by objects
 * controlled by clients.  */
#define OBJID_PLAYER_MAX	1024

/* A collision tag number.  Objects with the same collision tag do not
 * collide with each other.  Tags often overlap with object id numbers
 * (and thus with client id numbers).  */
typedef unsigned long objtag_t;

/* Zero as a collision tag means the object can collide with
 * anything.  */
#define OBJTAG_NONE		0

/* Numbers less than OBJTAG_PLAYER_MAX are reserved for clients and
 * their bullets.  Tags for teams (if and when they become existant)
 * and other things are greater or equal to OBJTAG_PLAYER_MAX.  */
#define OBJTAG_PLAYER_MAX	OBJID_PLAYER_MAX


int object_init (void);
void object_shutdown (void);
objtag_t new_object_collision_tag (void);


object_t *object_create (const char *type_name);
object_t *object_create_ex (const char *type_name, objid_t);
object_t *object_create_proxy (const char *type_name, objid_t);
void object_run_init_func (object_t *);
void object_destroy (object_t *);

struct objtype *object_type (object_t *);
objid_t object_id (object_t *);
int object_is_client (object_t *);
int object_is_client_processed (object_t *);
int object_stale (object_t *);
void object_set_stale (object_t *); /* Lua binding */
int object_hidden (object_t *);
void object_hide (object_t *);	/* Lua binding */
void object_show (object_t *);	/* Lua binding */
int object_highlighted (object_t *);
void object_set_highlighted (object_t *, int yes_or_no); /* Lua binding */

float object_x (object_t *);
float object_y (object_t *);
void object_set_xy (object_t *, float, float);
float object_xv (object_t *);
float object_yv (object_t *);
void object_set_xv (object_t *, float);
void object_set_yv (object_t *, float);
void object_set_xvyv (object_t *, float, float);
float object_xa (object_t *);
float object_ya (object_t *);
void object_set_xa (object_t *, float);
void object_set_ya (object_t *, float);
float object_xv_decay (object_t *);
float object_yv_decay (object_t *);
float object_mass (object_t *);
void object_set_mass (object_t *, float);
int object_ramp (object_t *);
void object_set_ramp (object_t *, int);
int object_jump (object_t *);
void object_set_jump (object_t *, int);
int object_moving_horizontally (object_t *); /* Lua binding (internal) */

void object_set_collision_is_player (object_t *); /* Lua binding */
void object_set_collision_is_projectile (object_t *); /* Lua binding */
void object_set_collision_is_ladder (object_t *); /* Lua binding */
void object_set_collision_flags (object_t *, int tiles, int players, int nonplayers);
void object_set_collision_flags_string (object_t *, const char *flags);	/* Lua binding */
objtag_t object_collision_tag (object_t *);
void object_set_collision_tag (object_t *, objtag_t); /* Lua binding */

#define OBJECT_REPLICATE_CREATE		0x01
#define OBJECT_REPLICATE_UPDATE		0x02
#define OBJECT_REPLICATE_HIDDEN		0x04
#define OBJECT_REPLICATE_HIGHLIGHTED	0x08

int object_need_replication (object_t *, int);
void object_set_replication_flag (object_t *, int);
void object_clear_replication_flags (object_t *);

typedef struct creation_field creation_field_t;
struct creation_field {
    creation_field_t *next;
    creation_field_t *prev;
    char name[0];
};

void object_add_creation_field (object_t *, const char *name); /* Lua binding */
struct list_head *object_creation_fields (object_t *);


/* Update hooks.  */

void object_set_update_hook (object_t *, int msecs, lua_ref_t hook); /* Lua binding */
void object_remove_update_hook (object_t *); /* Lua binding */
void object_poll_update_hook (object_t *, int elapsed_msecs);


/* Layers.  */

/* begin Lua bindings */
int object_add_layer (object_t *, const char *key, int offset_x, int offset_y);
int object_replace_layer (object_t *, int layer_id, const char *key, int offset_x, int offset_y);
int object_move_layer (object_t *, int layer_id, int offset_x, int offset_y);
int object_hflip_layer (object_t *, int layer_id, int hflip);
int object_rotate_layer (object_t *, int layer_id, int angle);
int object_remove_layer (object_t *, int layer_id);
void object_remove_all_layers (object_t *);
/* end Lua bindings */


/* Lights.  */

/* begin Lua bindings */
int object_add_light (object_t *, const char *key, int offset_x, int offset_y);
int object_replace_light (object_t *, int light_id, const char *key, int offset_x, int offset_y);
int object_move_light (object_t *, int light_id, int offset_x, int offset_y);
int object_remove_light (object_t *, int light_id);
void object_remove_all_lights (object_t *);
/* end Lua bindings */


/* Masks.  */

#define OBJECT_MASK_MAIN	0
#define OBJECT_MASK_TOP		1
#define OBJECT_MASK_BOTTOM	2
#define OBJECT_MASK_LEFT	3
#define OBJECT_MASK_RIGHT	4
#define OBJECT_MASK_MAX		5

/* begin Lua bindings */
int object_set_mask (object_t *, int mask_num, const char *key, int offset_x, int offset_y);
void object_set_masks_centre (object_t *obj, int centre_x, int centre_y);
int object_remove_mask (object_t *, int mask_num);
void object_remove_all_masks (object_t *);
/* end Lua bindings */


/* Collisions.  */

int object_supported (object_t *, struct map *);
int object_would_collide_with_player_if_unhidden (struct object *, struct map *, float x, float y);


/* Ladder.  */

void object_update_ladder_state (object_t *, struct map *);
int object_in_ladder (object_t *);
int object_head_above_ladder (object_t *);
int object_standing_on_ladder (object_t *);


/* Movement.  */

void object_do_physics (object_t *, struct map *);


void object_set_auth_info (object_t *, unsigned long time,
			   float x, float y,
			   float xv, float yv,
			   float xa, float ya);
void object_do_simulation (object_t *, unsigned long curr_time);


/* Lua table operations.  */

void lua_pushobject (struct lua_State *, object_t *);
object_t *lua_toobject (struct lua_State *, int index);
int object_call (struct lua_State *, object_t *, const char *method, int nargs);
int object_get_var_type (object_t *, const char *var);
float object_get_number (object_t *, const char *var);
void object_set_number (object_t *, const char *var, float value);
const char *object_get_string (object_t *, const char *var);
void object_set_string (object_t *, const char *var, const char *value);


/* Drawing.  */

void object_draw_layers (struct BITMAP *, object_t *, int offset_x, int offset_y);
void object_draw_trans_name (struct BITMAP *, object_t *, int offset_x, int offset_y);
void object_draw_lit_layers (struct BITMAP *, object_t *, int offset_x, int offset_y, int color);
void object_draw_lights (struct BITMAP *, object_t *, int offset_x, int offset_y);


/* Misc.  */

void object_bounding_box (object_t *, int *rx1, int *ry1, int *rx2, int *ry2);


#endif
@


1.18
log
@Made it so only player objects can obstruct other objects from
spawning.
@
text
@d28 14
d45 1
d93 2
a94 2
int object_collision_tag (object_t *);
void object_set_collision_tag (object_t *, int);
@


1.17
log
@Return an error code if object_call fails.
@
text
@d152 1
a152 1
int object_collide_with_objects_raw (object_t *, int mask_num, struct map *, float x, float y);
@


1.16
log
@Added highlightability of objects.
@
text
@d179 1
a179 1
void object_call (struct lua_State *, object_t *, const char *method, int nargs);
@


1.15
log
@Separated the one Lua state into two namespaces: server and client, so
that scripts run on the server don't have access to client-only
functions, and vice versa.  This makes things much less murky.
@
text
@d48 2
d84 1
@


1.14
log
@Marked in comments which functions were bound to Lua.
@
text
@d21 1
d176 1
a176 1
void object_call (object_t *, const char *method, int nargs);
@


1.13
log
@Added object_draw_trans_name() to draw object names.  Added
object_get_var_type() to allow looking up lua table field types.
@
text
@d43 1
a43 1
void object_set_stale (object_t *);
d45 2
a46 2
void object_hide (object_t *);
void object_show (object_t *);
d68 1
a68 1
int object_moving_horizontally (object_t *);
d70 3
a72 3
void object_set_collision_is_player (object_t *);
void object_set_collision_is_projectile (object_t *);
void object_set_collision_is_ladder (object_t *);
d74 1
a74 1
void object_set_collision_flags_string (object_t *, const char *flags);
d93 1
a93 1
void object_add_creation_field (object_t *, const char *name);
d99 2
a100 2
void object_set_update_hook (object_t *, int msecs, lua_ref_t hook);
void object_remove_update_hook (object_t *);
d106 1
d114 1
d119 1
d125 1
d137 1
d142 1
@


1.12
log
@Made it so that projectiles cannot hit other projectiles.
@
text
@d170 1
d180 1
@


1.11
log
@Changed all "()" declarations to "(void)".
@
text
@d71 1
@


1.10
log
@Added _internal_would_collide_with_objects().
@
text
@d20 1
a20 1
 * using these, read the warnings in gameclt.c.  */
d28 2
a29 2
int object_init ();
void object_shutdown ();
@


1.9
log
@Allowed object_call() to take an nargs argument.  The arguments should
be already be pushed on the lua stack.
@
text
@d141 1
@


1.8
log
@Added client-processed objects.
@
text
@d167 1
a167 1
void object_call (object_t *, const char *method);
@


1.7
log
@Added support for ladders.
@
text
@a8 1
struct lua_State;
d15 1
a15 2
 * id numbers for objects.  Numbers less than OBJID_PLAYER_MAX are
 * reserved for use by objects controlled by clients. */
d18 7
d41 1
d156 1
a156 1
void object_set_auth_info (object_t *obj, unsigned long time,
d160 1
a160 1
void object_do_simulation (object_t *obj, unsigned long curr_time);
@


1.6
log
@Added ``hidden'' attribute to objects.
@
text
@d65 1
d135 8
a142 1
int object_supported_at (object_t *, struct map *, float x, float y);
@


1.5
log
@Added object_set_masks_centre() for the situation where you want to
change where the centre of all the bitmasks are at once.
@
text
@d38 3
d72 1
@


1.4
log
@Added `object_moving_horizontally' function, which is a hack for the
player walking animation.
@
text
@d122 1
@


1.3
log
@Added an ``update hook'' feature to objects
@
text
@d59 1
@


1.2
log
@Initial creation field stuff
@
text
@d5 2
d82 7
@


1.1
log
@Initial revision
@
text
@d8 1
d70 10
@
