head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2002.07.10.10.27.13;	author tjaden;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.09.10.01.08;	author tjaden;	state Exp;
branches;
next	1.17;

1.17
date	2002.01.28.13.01.05;	author tjaden;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.27.14.06.10;	author tjaden;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.26.12.14.42;	author tjaden;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.26.11.55.16;	author tjaden;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.24.15.34.04;	author tjaden;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.23.14.09.12;	author tjaden;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.23.03.52.27;	author tjaden;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.21.15.27.11;	author tjaden;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.21.00.20.26;	author tjaden;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.18.14.30.26;	author tjaden;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.17.13.29.50;	author tjaden;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.15.13.28.28;	author tjaden;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.14.16.06.04;	author tjaden;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.14.13.54.07;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.14.03.42.43;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.13.15.01.43;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.12.20.16.35;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.19
log
@New network messages: MSG_SC_CLIENT_ADD, MSG_SC_CLIENT_REMOVE,
MSG_SC_GAMEINFO_CLIENT_SCORE, MSG_SC_GAMEINFO_SOUND_PLAY.
@
text
@#ifndef __included_netmsg_h
#define __included_netmsg_h


#define NETWORK_PROTOCOL_VERSION	0

/* Libnet has a maximum packet size of 512 bytes, for channels.  Conns
   take up some of those bytes (too lazy to check how many), so we
   impose our own limit. */

#define NETWORK_MAX_PACKET_SIZE		500


/* Network messages are between clients and the server.  Messages are
   distinguished by the first byte in the packet.  The rest of the
   packet contains arguments for that message, if any.  */


enum {
    
    /* The server sends this to a client right after it joins to
       notify it of its registration details.
       
       Args: long client_id.  */

    MSG_SC_JOININFO = 'j',


    /* The client sends this to the server after it joins and receives
       the MSG_SC_JOININFO message.

       Args: char protocol_version, string name.
     */

    MSG_CS_JOININFO = 'J',


    /* The server sends this to a client to notify that it is going to
       feed it the game state.  */

    MSG_SC_GAMESTATEFEED_REQ = 'f',

    
    /* A client sends this to the server when it is ready to receive
       the game state.  */

    MSG_CS_GAMESTATEFEED_ACK = 'F',


    /* The server sends this to a client after the game state feed is
       done.  After a client receives this, it will enter the 'paused'
       state.  */

    MSG_SC_GAMESTATEFEED_DONE = '*',


    /* The server sends this to a client to tell it about a client
       that exists (possibly itself).  This is sent once when a new
       client is connected.

       Args: long client_id, string name, string score.
       Score maybe be 0-length.
     */

    MSG_SC_CLIENT_ADD = '+',


    /* The server sends this to a client to tell it that another
       client is no more.  This is sent once when a client is
       disconnected.

       Args: long client_id.
     */

    MSG_SC_CLIENT_REMOVE = '-',


    /* The server broadcasts this to clients to notify that the game
       is paused.  */

    MSG_SC_PAUSE = 'p',

    
    /* The server broadcasts this to clients to notify that the game
       is resumed.  */

    MSG_SC_RESUME = 'r',


    /* The client sends this to the server to tell the server about
       game information.  This message type has many sub-messages, see
       below.  */

    MSG_CS_GAMEINFO = 'g',


    /* The server broadcasts this to clients to tell them about
       changes to the game state.  This message type has many
       sub-messages, see below.  */

    MSG_SC_GAMEINFO = 'h',


    /* The server broadcasts this to clients when it is returning to
       the lobby.  */

    MSG_SC_LOBBY = 'l',


    /* The client sends this to the server to request sending a text
       message to all clients.

       Args: string text.
    */

    MSG_CS_TEXT = 't',
    

    /* The server broadcasts this to clients to tell them to display a
       text message.

       Args: string text.
    */

    MSG_SC_TEXT = 'T',


    /* The client sends this to the server to initiate the ping
       sequence.  We use it to calculate the amount of lag between
       server and client.  */

    MSG_CS_PING = '?',


    /* The server sends this back to the client in response to a ping.
       It then waits for a boing.  */

    MSG_SC_PONG = '!',

    
    /* The client sends this back to the server in response to a pong.
       The ping sequence is then complete.  */

    MSG_CS_BOING = '@@',
    

    /* The client sends this when it wants to politely disconnect from
       the server.  */

    MSG_CS_DISCONNECT_ASK = 'd',


    /* The server sends this to a client to tell it that it has been
       disconnected (for whatever reason).  After this is sent, the
       server expects no more messages from the client.  */

    MSG_SC_DISCONNECTED = 'D'
};


/* MSG_SC_GAMEINFO and MSG_CS_GAMEINFO messages can contain any number
   of sub-messages (with packet size limitations).  The second byte of
   the packet contains the sub-message type (listed below) and any
   arguments.  The next sub-message then follows behind that, etc.  */


/* Client to Server. */

enum {

    /* Notify server of input controls.

       Args: byte input_bitmask, float aim_angle.
     */

    MSG_CS_GAMEINFO_CONTROLS = 'c',
	
	CONTROL_LEFT    = 0x01,
	CONTROL_RIGHT   = 0x02,
	CONTROL_UP      = 0x04,
	CONTROL_DOWN    = 0x08,
	CONTROL_FIRE    = 0x10,
	CONTROL_RESPAWN = 0x20,


    /* Notify server of wish to change weapon.

       Args: string weapon_name.
     */

    MSG_CS_GAMEINFO_WEAPON_SWITCH = 'w'
};


/* Server to Client. */

enum {
    
    /* Tell clients to load a map.

       Args: string filename.
     */

    MSG_SC_GAMEINFO_MAPLOAD = 'l',


    /* Tell clients about a client's new aim angle.  Note: these
       angles are only approximate.

       Args: long client_id, float aim_angle.
     */

    MSG_SC_GAMEINFO_CLIENT_AIM_ANGLE = 'a',


    /* Tell clients about their status.

       Args: long client_id, byte prop, long value.
       where prop is 'h' for health, 'a' for ammo
     */

    MSG_SC_GAMEINFO_CLIENT_STATUS = 's',


    /* Tell clients about theirs or other client's scores.

       Args: long client_id, string score.

       The score is a string for displaying only.  As such, it could
       be anything (but usually it would be dealing in death).
     */

    MSG_SC_GAMEINFO_CLIENT_SCORE = '$',


    /* Tell clients to create a new object.

       Args: string type, long object_id, byte hidden_or_not,
	     float x, float y, float xv, float yv, byte collision_tag.

       This is followed by extra fields for the proxy object.
       Each field is of the following format:

       For a float:  'f', string name, float value
       For a string: 's', string name, string value

       The packet is terminated with a null character.
     */

    MSG_SC_GAMEINFO_OBJECT_CREATE = 'c',


    /* Tell clients to destroy an object.

       Args: long object_id.
     */

    MSG_SC_GAMEINFO_OBJECT_DESTROY = 'd',


    /* Tell clients about an object's new position and velocities.

       Args: long object_id, float x, float y, float xv, float yv,
             float xa, float ya.
     */

    MSG_SC_GAMEINFO_OBJECT_UPDATE = 'u',


    /* Tell clients about an object's new hidden status.

       Args: long object_id, byte hidden_or_not.
     */

    MSG_SC_GAMEINFO_OBJECT_HIDDEN = 'h',
    

    /* Tell clients to call an object method.

       Args: long object_id, string method, string arg.
     */

    MSG_SC_GAMEINFO_OBJECT_CALL = 'C',


    /* Tell clients to create some particles.

       Args: char type, float x, float y, long nparticles, float spread.
       where type is 'b' for blood, 's' for sparks, 'r' for respawn particles
     */

    MSG_SC_GAMEINFO_PARTICLES_CREATE = 'p',


    /* Tell clients to create some blod objects.

       Args: float x, float y, long nparticles.
     */

    MSG_SC_GAMEINFO_BLOD_CREATE = 'B',


    /* Tell clients to create an explosion.

       Args: string name, float x, float y, long nparticles.
     */

    MSG_SC_GAMEINFO_EXPLOSION_CREATE = 'e',


    /* Tell clients to create a blast.

       Args: float x, float y, float max_radius, long damage.
     */

    MSG_SC_GAMEINFO_BLAST_CREATE = 'b',


    /* Tell client to play a sound.

       Args: float x, float y, string sound;
     */

    MSG_SC_GAMEINFO_SOUND_PLAY = 'S'
};


#endif
@


1.18
log
@Allow strings as creation fields
@
text
@d30 1
a30 1
       the MSG_SC_POST_JOIN message.
d57 21
d157 1
a157 1
    MSG_SC_DISCONNECTED = 'D',
d205 30
a234 1
    
a285 9
    /* Tell clients about a client's new aim angle.  Note: these
       angles are only approximate.

       Args: long client_id, float aim_angle.
     */

    MSG_SC_GAMEINFO_CLIENT_AIM_ANGLE = 'a',


d319 1
a319 1
    /* Tell clients about their status.
d321 1
a321 2
       Args: long client_id, byte prop, long value.
       where prop is 'h' for health, 'a' for ammo
d324 1
a324 1
    MSG_SC_GAMEINFO_CLIENT_STATUS = 's',
@


1.17
log
@Added client health and ammo displays.
@
text
@d194 2
a195 1
       For a float: 'f', string name, float value
@


1.16
log
@Added blasts.
@
text
@d274 10
a283 1
    MSG_SC_GAMEINFO_BLAST_CREATE = 'b'
@


1.15
log
@Use shorts instead of longs to specify lengths of strings in packets.
@
text
@d266 9
a274 1
    MSG_SC_GAMEINFO_EXPLOSION_CREATE = 'e'
@


1.14
log
@Added support for explosion graphics.
@
text
@d24 1
a24 2
       Args: long client_id.
     */
d32 1
a32 1
       Args: char protocol_version, long len, char name[].
d92 1
a92 1
       Args: long len, byte text[].
d101 1
a101 1
       Args: long len, byte text[].
d167 1
a167 1
       Args: long len, byte weapon_name[].
d180 1
a180 1
       Args: long len, string filename.
d188 1
a188 1
       Args: long len, char type[], long object_id, byte hidden_or_not,
d194 1
a194 1
       For a float: 'f', long len, char name[], float value
d229 1
a229 1
       Args: long object_id, long len, byte method[], long len2, byte arg[].
d263 1
a263 1
       Args: long len, char name[], float x, float y, long nparticles.
@


1.13
log
@Added client sending text messages.
@
text
@d259 9
a267 1
    MSG_SC_GAMEINFO_BLOD_CREATE = 'B'
@


1.12
log
@Added particles for respawning ball.
@
text
@d90 9
d100 1
a100 1
       text message.  */
d102 4
a105 1
    MSG_SC_TEXT = 't',
d171 1
a171 9
    MSG_CS_GAMEINFO_WEAPON_SWITCH = 'w',


    /* Tell server to broadcast text message to all clients.

       Args: long len, char text[].
     */

    MSG_CS_GAMEINFO_TEXT = 't'
d259 1
a259 9
    MSG_SC_GAMEINFO_BLOD_CREATE = 'B',


    /* Tell clients to display a text message.

       Args: long len, byte text[].
     */

    MSG_SC_GAMEINFO_TEXT = 't',
@


1.11
log
@Added spark particles.
@
text
@d244 1
a244 1
       where type is 'b' for blood, 's' for sparks
@


1.10
log
@Added weapon switching with keyboard.
@
text
@d241 1
a241 1
    /* Tell clients to create some blood particles.
d243 2
a244 1
       Args: float x, float y, long nparticles, float spread.
d247 1
a247 1
    MSG_SC_GAMEINFO_BLOOD_CREATE = 'b',
@


1.9
log
@Added mechanism for server scripts to tell clients to execute object
methods (i.e. remote calls).
@
text
@d154 8
@


1.8
log
@Added blods.
@
text
@d216 8
@


1.7
log
@Added DOWN as a possible input.
@
text
@d227 1
a227 1
       Args: float x, float y, long nparticles, float spread
d231 8
@


1.6
log
@Made the spread parameter to spawn blood a float (instead of int).
@
text
@d149 3
a151 2
	CONTROL_FIRE    = 0x08,
	CONTROL_RESPAWN = 0x10,
@


1.5
log
@Added ``hidden'' attribute to objects.
@
text
@d226 1
a226 1
       Args: float x, float y, long nparticles, long spread
@


1.4
log
@Send clients' aim angles to other clients.
@
text
@d176 2
a177 2
       Args: long len, char type[], long object_id, float x, float y,
             float xv, float yv, byte collision_tag.
d206 8
@


1.3
log
@Added player respawning.
@
text
@d207 9
@


1.2
log
@Libnet has a maximum packet size of 512 bytes, for channels.  Conns
take up some of those bytes (too lazy to check how many), so we
impose our own limit (NETWORK_MAX_PACKET_SIZE).
@
text
@d146 5
a150 4
	CONTROL_LEFT  = 0x01,
	CONTROL_RIGHT = 0x02,
	CONTROL_UP    = 0x04,
	CONTROL_FIRE  = 0x08,
@


1.1
log
@Initial revision
@
text
@d7 6
d177 7
@
