head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2002.07.15.11.43.11;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.11.12.25.29;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.11.05.23.42;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.27.14.05.09;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Moved id types to their own file and gave client id a type of its own.
@
text
@#ifndef __included_blast_h
#define __included_blast_h


#include "id.h"

struct list_head;
struct BITMAP;
struct lua_State;


typedef struct blast blast_t;


blast_t *blast_create (float x, float y, float radius, int damage, client_id_t owner);
void blast_destroy (blast_t *blast);
int blast_update_with_collisions (blast_t *blast, struct list_head *object_list);
int blast_update_visually_only (blast_t *blast);
void blast_draw (struct BITMAP *dest, blast_t *blast, int offset_x, int offset_y);


#endif
@


1.3
log
@Separated the one Lua state into two namespaces: server and client, so
that scripts run on the server don't have access to client-only
functions, and vice versa.  This makes things much less murky.
@
text
@d5 2
d15 1
a15 1
blast_t *blast_create (float x, float y, float radius, int damage, int owner);
@


1.2
log
@Added blast accreditation.
@
text
@d7 1
d13 1
a13 1
blast_t *blast_create (float x, float y, float radius, int damage, int owner, int visual_only);
d15 2
a16 1
int blast_update (blast_t *blast, struct list_head *object_list);
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
blast_t *blast_create (float x, float y, float radius, int damage, int visual_only);
@
