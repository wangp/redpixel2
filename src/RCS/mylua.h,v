head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2002.07.11.12.23.59;	author tjaden;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.14.15.28;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.24.07.23.01;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.15.10.13.18;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.12.20.16.35;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Separated the one Lua state into two namespaces: server and client, so
that scripts run on the server don't have access to client-only
functions, and vice versa.  This makes things much less murky.
@
text
@#ifndef __included_mylua_h
#define __included_mylua_h


#include "lua.h"
#include "lauxlib.h"


typedef int lua_ref_t;

extern lua_State *the_lua_state;
extern lua_State *server_lua_namespace; /* namespace over the_lua_state */
extern lua_State *client_lua_namespace; /* namespace over the_lua_state */

int mylua_open (void);
void mylua_open_server_and_client_namespaces (void);
void mylua_close (void);

int lua_dofile_path (lua_State *L, const char *filename);
int lua_checkargs (lua_State *L, const char *argtypes);


#endif
@


1.4
log
@Updated to Lua 4.1-work4.
@
text
@d11 3
a13 1
extern lua_State *lua_state;
d16 1
@


1.3
log
@Changed all "()" declarations to "(void)".
@
text
@d13 1
a13 1
int mylua_open (int stacksize);
@


1.2
log
@Updated to Lua 4.1-work3.
@
text
@d14 1
a14 1
void mylua_close ();
@


1.1
log
@Initial revision
@
text
@d5 2
a6 1
#include <lua.h>
a9 1
typedef int lua_tag_t;
@
