head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2002.01.18.14.28.06;	author tjaden;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.18.12.44.52;	author tjaden;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.15.14.07.14;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.15.13.28.55;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.14.17.00.59;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.12.20.16.35;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Precautionary fix in case some wise guy passes zero or a negative
number for nparticles to blood_particles_spawn.
@
text
@/* blood.c
 *
 * Peter Wang <tjaden@@users.sourceforge.net>
 */


/*
  XXX -- fragmentation problems with so many small allocs?
 */


#include <math.h>
#include <allegro.h>
#include <allegro/internal/aintern.h>
#include "alloc.h"
#include "bitmask.h"
#include "blood.h"
#include "map.h"


#define INITIAL_PARTICLES	1024
#define MAX_PARTICLES		8192


typedef struct particle {
    struct particle *next;
    float x, y;
    float xv, yv;
    int color;
    int life;
} particle_t;


struct blood_particles {
    int total_particles;
    particle_t *live_particles;
    particle_t *free_particles;
};


static int alloc_free_particles (blood_particles_t *blood, int num)
{
    if (blood->total_particles >= MAX_PARTICLES)
	return -1;

    if (num > MAX_PARTICLES - blood->total_particles)
	num = MAX_PARTICLES - blood->total_particles;

    blood->total_particles += num;    
    while (num--) {
	particle_t *p = alloc (sizeof *p);
	p->next = blood->free_particles;
	blood->free_particles = p;
    }

    return 0;
}


blood_particles_t *blood_particles_create (void)
{
    blood_particles_t *blood = alloc (sizeof *blood);
    alloc_free_particles (blood, INITIAL_PARTICLES);
    return blood;
}


static void free_particles_list (particle_t *p)
{
    while (p) {
	particle_t *q = p->next;
	free (p);
	p = q;
    }
}


void blood_particles_destroy (blood_particles_t *p)
{
    if (p) {
	free_particles_list (p->free_particles);
	free_particles_list (p->live_particles);
	free (p);
    }
}


void blood_particles_update (blood_particles_t *blood, map_t *map)
{
    bitmask_t *mask = map_tile_mask (map);
    particle_t *p = blood->live_particles;
    particle_t *prev = NULL;
    particle_t *next;
    
    while (p) {
	p->x += p->xv;
	p->y += p->yv;
	p->xv *= 0.99;
	p->yv += 0.05;
	
	if (bitmask_point (mask, p->x, p->y))
	    p->life = 0;
	else
	    p->life--;

	if (p->life > 0) {
	    prev = p;
	    p = p->next;
	}
	else {
	    /* particle dead: move to free list */
	    next = p->next;
	    if (prev)
		prev->next = next;
	    else
		blood->live_particles = next;
	    p->next = blood->free_particles;
	    blood->free_particles = p;
	    p = next;
	}
    }
}


static inline int rnd (int n)
{
    return rand() % n;
}
 

void blood_particles_spawn (blood_particles_t *blood, float x, float y, long nparticles, float spread)
{
    particle_t *p;
    double theta;
    int r, g, b;
	
    while (nparticles > 0) {
	/* if out of free particles allocate some more or abort */
	if ((!blood->free_particles) &&
	    (alloc_free_particles (blood, nparticles) < 0))
	    break;

	/* get free particle */
	p = blood->free_particles;
	blood->free_particles = p->next;

	/* initialise it */
	theta = rnd (M_PI * 2. * 1000.) / 1000.;
	p->x = x + rnd (7) - 6;
	p->y = y + rnd (7) - 6;
	p->xv = rnd (spread * 1000) * cos (theta) / 1000.;
	p->yv = rnd (spread * 1000) * sin (theta) / 1000.;
	p->life = 100;

	r = 4 + rnd (5);
	g = 0 + rnd (2);
	b = 1 + rnd (2);
	if (!rnd (32))
	    r += rnd (3), g += rnd (3), b += rnd (3);
	p->color = makecol24 (r, g, b);

	/* put it into live particles list */
	p->next = blood->live_particles;
	blood->live_particles = p;

	nparticles--;
    }
}


void blood_particles_draw (BITMAP *bmp, blood_particles_t *blood, int offset_x, int offset_y)
{
    int old_cl = bmp->cl;
    int old_cr = bmp->cr;
    bmp->cl /= 3;
    bmp->cr /= 3;

    {
	particle_t *p;
	for (p = blood->live_particles; p; p = p->next)
	    _linear_putpixel24 (bmp, p->x - offset_x, p->y - offset_y, p->color);
    }

    bmp->cl = old_cl;
    bmp->cr = old_cr;
}
@


1.5
log
@Fixed a bug where it would try to allocate zero new particles.
@
text
@d137 1
a137 1
    while (nparticles) {
@


1.4
log
@Changed colour of blood particles to less red and closer to colours in
death fountain anim.  Also cleaned up the file a bit.
@
text
@d137 1
a137 1
    while (nparticles--) {
d165 2
@


1.3
log
@Made the spread parameter to spawn blood a float (instead of int).
@
text
@d41 1
a41 1
static void alloc_free_particles (blood_particles_t *blood, int num)
d43 6
d55 2
d123 6
d135 1
a137 1

d139 3
a141 12
	if (!blood->free_particles) {
	    int n;

	    if (blood->total_particles >= MAX_PARTICLES)
		break;

	    if (nparticles > MAX_PARTICLES - blood->total_particles)
		n = MAX_PARTICLES - blood->total_particles;
	    else
		n = nparticles;	    
	    alloc_free_particles (blood, n);
	}
d143 1
d147 6
a152 5
	theta = (rand() % (int)(M_PI * 2. * 1000.)) / 1000.;
	p->x = x + (rand()%7) - 6;
	p->y = y + (rand()%7) - 6;
	p->xv = (rand() % (int)(spread * 1000)) * cos (theta) / 1000.;
	p->yv = (rand() % (int)(spread * 1000)) * sin (theta) / 1000.;
a153 1
	p->color = makecol24 (4 + (rand() % 8), 0, 0);
d155 8
@


1.2
log
@Changed blood particles to use linked lists instead of an array.  This
is/should/might be faster and will allocate more particles if needed.
@
text
@d117 1
a117 1
void blood_particles_spawn (blood_particles_t *blood, float x, float y, long nparticles, long spread)
d144 2
a145 2
	p->xv = (rand() % spread) * cos (theta) / 1000.;
	p->yv = (rand() % spread) * sin (theta) / 1000.;
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
  XXX -- use linked lists?  would be faster
d21 2
a22 1
#define INITIAL_NUMBER_OF_PARTICLES	10000
d25 2
a26 1
typedef struct {
d35 3
a37 2
    int nparticles;
    particle_t *particles;
d41 11
d55 3
a58 2
    blood->nparticles = INITIAL_NUMBER_OF_PARTICLES;
    blood->particles = alloc (INITIAL_NUMBER_OF_PARTICLES * sizeof (particle_t));
d60 7
a66 1
    return blood;
d73 2
a74 1
	free (p->particles);
d83 24
a106 11
    particle_t *p = blood->particles;
    int n = blood->nparticles;

    while (n--) {
	if (p->life) {
	    p->x += p->xv;
	    p->y += p->yv;
	    p->xv *= 0.99;
	    p->yv += 0.05;
	    if (bitmask_point (mask, p->x, p->y))
		p->life = 0;
d108 4
a111 1
		p->life--;
a112 1
	p++;
d119 1
a119 2
    particle_t *p = blood->particles;
    int n = blood->nparticles;
d122 5
a126 9
    while (n-- && nparticles) {
	if (!p->life) {
	    theta = (rand() % (int)(M_PI * 2. * 1000.)) / 1000.;
	    p->x = x + (rand()%7) - 6;
	    p->y = y + (rand()%7) - 6;
	    p->xv = (rand() % spread) * cos (theta) / 1000.;
	    p->yv = (rand() % spread) * sin (theta) / 1000.;
	    p->life = 100;
	    p->color = makecol24 (4 + (rand() % 8), 0, 0);
d128 8
a135 1
	    nparticles--;
d138 13
a150 1
	p++;
d163 3
a165 7
	particle_t *p = blood->particles;
	int n = blood->nparticles;
	while (n--) {
	    if (p->life)
		_linear_putpixel24 (bmp, p->x - offset_x, p->y - offset_y, p->color);
	    p++;
	}
@
