/* Generated by objgen.lua on Fri Jan 18 01:04:46 2002.  Do not edit.  */

static int
object_eventtable_gettable(lua_State *L)
{
	struct object *quux = lua_touserdata(L, 1);
	const char *index = lua_tostring(L, 2);
	if (0 == strcmp(index, "x")) {
		lua_pushnumber(L, quux->x);
	}
	else if (0 == strcmp(index, "y")) {
		lua_pushnumber(L, quux->y);
	}
	else if (0 == strcmp(index, "xv")) {
		lua_pushnumber(L, quux->xv);
	}
	else if (0 == strcmp(index, "yv")) {
		lua_pushnumber(L, quux->yv);
	}
	else if (0 == strcmp(index, "xv_decay")) {
		lua_pushnumber(L, quux->xv_decay);
	}
	else if (0 == strcmp(index, "yv_decay")) {
		lua_pushnumber(L, quux->yv_decay);
	}
	else if (0 == strcmp(index, "mass")) {
		lua_pushnumber(L, quux->mass);
	}
	else if (0 == strcmp(index, "is_proxy")) {
		if (quux->is_proxy) lua_pushnumber(L, 1); else lua_pushnil(L);
	}
	else if (0 == strcmp(index, "collision_tag")) {
		lua_pushnumber(L, quux->collision_tag);
	}
	else {
		lua_getref(L, quux->table);
		lua_pushvalue(L, 2);
		lua_rawget(L, -2);
	}
	return 1;
}

static int
object_eventtable_settable(lua_State *L)
{
	struct object *quux = lua_touserdata(L, 1);
	const char *index = lua_tostring(L, 2);
	if (0 == strcmp(index, "x")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->x = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "y")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->y = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "xv")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->xv = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "yv")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->yv = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "xv_decay")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->xv_decay = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "yv_decay")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->yv_decay = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "mass")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->mass = lua_tonumber(L, 3);
	}
	else if (0 == strcmp(index, "is_proxy")) {
		quux->is_proxy = !lua_isnil(L, 3);
	}
	else if (0 == strcmp(index, "collision_tag")) {
		if (!lua_isnumber(L, 3)) lua_error(L, "type mismatch in assignment");
		quux->collision_tag = lua_tonumber(L, 3);
	}
	else {
		lua_getref(L, quux->table);
		lua_pushvalue(L, 2);
		lua_pushvalue(L, 3);
		lua_rawset(L, -3);
	}
	return 1;
}
#define REGISTER_OBJECT_EVENTTABLE_METHODS(L)			\
	lua_pushliteral(L, "gettable");				\
	lua_pushcfunction(L, object_eventtable_gettable);	\
	lua_settable(L, -3);					\
	lua_pushliteral(L, "settable");				\
	lua_pushcfunction(L, object_eventtable_settable);	\
	lua_settable(L, -3);

