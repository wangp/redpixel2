head	1.19;
access;
symbols;
locks; strict;
comment	@# @;


1.19
date	2002.07.11.12.31.33;	author tjaden;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.11.07.02.35;	author tjaden;	state Exp;
branches;
next	1.17;

1.17
date	2002.01.23.14.10.35;	author tjaden;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.23.11.17.09;	author tjaden;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.23.06.07.24;	author tjaden;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.23.03.29.30;	author tjaden;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.22.15.45.27;	author tjaden;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.21.17.35.14;	author tjaden;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.21.17.07.45;	author tjaden;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.21.00.18.29;	author tjaden;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.20.06.58.06;	author tjaden;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.19.01.37.28;	author tjaden;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.18.14.26.42;	author tjaden;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.17.14.27.32;	author tjaden;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.15.10.16.54;	author tjaden;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.14.16.08.11;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.14.15.00.49;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.14.02.24.10;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.12.20.13.22;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Removed stub functions as they seem to unnecessary now.
@
text
@-- basic-base.lua


----------------------------------------------------------------------
-- Utility functions
----------------------------------------------------------------------

function radian_to_bangle (rads)
    return rads * 128 / PI
end

-- Merge t1 and t2, t2 taking precedence in case of clashes.
-- For convenience, if t2 is omitted, this is the identity function
-- (i.e. the table returned is NOT a new table.
function merge (t1, t2)
    local t
    if not t2 then
	t = t1
    else
	t = {}
	for i,v in t1 do t[i] = v end
	for i,v in t2 do t[i] = v end
    end
    return t
end

-- Return true if t contains v as a value.
function contains (t, v)
    for _,x in t do
	if x == v then return true end
    end
    return false
end


----------------------------------------------------------------------
-- Constants
----------------------------------------------------------------------

mask_main = 0 
mask_top = 1
mask_bottom = 2
mask_left = 3
mask_right = 4


----------------------------------------------------------------------
-- Game object base
----------------------------------------------------------------------

local dummy = function () end

function _internal_object_init_hook (self)

    self.set_update_hook = object_set_update_hook
    self.remove_update_hook = object_remove_update_hook

    if not self.is_proxy then

	-- nonproxy methods
	self.set_stale = object_set_stale
	self.hide = object_hide
	self.show = object_show
	self.set_collision_flags = object_set_collision_flags
	self.add_creation_field = object_add_creation_field
	self.set_mask = object_set_mask
	self.set_masks_centre = object_set_masks_centre
	self.remove_mask = object_remove_mask
	self.remove_all_masks = object_remove_all_masks
	self.receive_damage = dummy

	function self:hide_and_respawn_later (msecs)
	    self:hide ()
	    self:set_update_hook (msecs,
				  function (self)
				      self:show ()
				      self:remove_update_hook ()
				  end)
	end

    else

	-- proxy methods
	self.add_layer = object_add_layer
	self.replace_layer = object_replace_layer
	self.move_layer = object_move_layer
	self.hflip_layer = object_hflip_layer
	self.rotate_layer = object_rotate_layer
	self.remove_layer = object_remove_layer
	self.remove_all_layers = object_remove_all_layers
	self.add_light = object_add_light
	self.replace_light = object_replace_light
	self.move_light = object_move_light
	self.remove_light = object_remove_light
	self.remove_all_lights = object_remove_all_lights

    end
end


----------------------------------------------------------------------
-- objtype_register wrapper
----------------------------------------------------------------------

function Objtype (t, u)
    t = merge (t, u)
    local result =
    objtype_register (t.category, t.name, t.icon,
	function (self)
	    if self.is_proxy then
		if t.proxy_init then t.proxy_init (self) end
	    else
		if t.nonproxy_init then t.nonproxy_init (self) end
	    end
	end)
    if not result then
	print ("Objtype not registered properly.")
	return
    end
    if t.alias then
	add_alias (t.name, t.alias)
    end
end


----------------------------------------------------------------------
-- Respawning items wrapper
----------------------------------------------------------------------

store_load ("basic/basic-respawn.dat", "/basic/")

local respawning_ball_anim = {}
local respawning_ball_frames = 19

for i = 0, respawning_ball_frames-1 do
    respawning_ball_anim[i] = format ("/basic/respawning-ball/%03d", i)
end

Objtype {
    name = "basic-respawning-ball",
    alias = "~rb",
    icon = "/basic/respawning-ball/000",
    nonproxy_init = function (self)
	spawn_respawn_particles (self.x, self.y, 30, 1.5)
	self:set_collision_flags ("")
	self:set_update_hook (
	    1000,
	    function (self)
		if self.item then
		    self.item:show ()
		end
		self:set_stale ()
	    end
	)
    end,
    proxy_init = function (self)
	self.frame = 0
	self.theta = 0
	self.dtheta = random (8) + 8
	self:add_light ("/basic/respawning-ball/light", 0, 0)
	self:add_light ("/basic/respawning-ball/light", 0, 0)
	self:set_update_hook (
	    1000 / respawning_ball_frames,
	    function (self)
		self.frame = self.frame + 1
		if self.frame >= respawning_ball_frames then
		    self:remove_update_hook ()
		else
		    self:replace_layer (0, respawning_ball_anim[self.frame], 8, 8)
		end
		self.theta = self.theta + self.dtheta
		local dx, dy = cos (self.theta) * 4, sin (self.theta) * 4
		self:move_light (0, dx, dy)
		self:move_light (1, -dx, -dy)
	    end
	)
    end
}

function Respawning_Item (t, u)
    t = merge (t, u)
    return Objtype (t, {
	category = t.category or "item",
	nonproxy_init = function (self)
	    self:set_collision_flags ("p")
	    function self:collide_hook (player)
		if t.collide_hook then
		    t.collide_hook (self, player)
		end
		self:hide ()
		self:set_update_hook (
		    1000 * t.respawn_secs,
		    function (self)
			local ball = spawn_object ("basic-respawning-ball",
						   self.x, self.y)
			ball.item = self
			self:remove_update_hook()
		    end
		)
	    end
	end
    })
end


----------------------------------------------------------------------
-- Weapon registry
----------------------------------------------------------------------

weapons = {}

function Weapon (t, u)
    weapons[t.name] = merge (t, u)
end
@


1.18
log
@Renamed Lua's "object_destroy" to "object_set_stale", as that's what
it is called in C (I confused myself).
@
text
@a80 13
	-- proxy methods
	self.add_layer = dummy
	self.replace_layer = dummy
	self.move_layer = dummy
	self.rotate_layer = dummy
	self.remove_layer = dummy
	self.remove_all_layers = dummy
	self.add_light = dummy
	self.replace_light = dummy
	self.move_light = dummy
	self.remove_light = dummy
	self.remove_all_lights = dummy

a81 12

	-- nonproxy methods
	self.set_stale = dummy
	self.hide = dummy
	self.show = dummy
	self.set_collision_flags = dummy
	self.add_creation_field = dummy
	self.set_mask = dummy
	self.set_masks_centre = dummy
	self.remove_mask = dummy
	self.remove_all_masks = dummy
	self.receive_damage = dummy
@


1.17
log
@Added particles for respawning ball.
@
text
@d61 1
a61 1
	self.destroy = object_destroy
d97 1
a97 1
	self.destroy = dummy
d177 1
a177 1
		self:destroy ()
@


1.16
log
@Added contains() function.
@
text
@d169 1
@


1.15
log
@Made Objtype able to take an alias field and automatically call
add_alias() with it.
@
text
@d27 8
@


1.14
log
@Added lights to the respawning ball.
@
text
@d135 4
d158 1
@


1.13
log
@Added respawning ball to respawing items and made a wrapper around
Objtype for respawning items.
@
text
@d169 4
d182 4
@


1.12
log
@Allow a second argument to Objtype and Weapon, which should contain a
table of fields to add into or override in the first argument.
@
text
@d1 1
a1 1
-- basic-base.lua -- XXX: rename this file?
d4 27
a30 1
-- constants
d39 3
a41 1
-- game object base
d118 1
d120 1
d139 3
a141 1
-- weapon registry
d143 39
a181 1
weapons = {}
d183 23
a205 2
function Weapon (t, u)
    weapons[t.name] = merge (t, u)
d209 3
a211 1
-- utility functions
d213 1
a213 3
function radian_to_bangle (rads)
    return rads * 128 / PI
end
d215 2
a216 13
-- Merge t1 and t2, t2 taking precedence in case of clashes.
-- For convenience, if t2 is omitted, this is the identity function
-- (i.e. the table returned is NOT a new table.
function merge (t1, t2)
    local t
    if not t2 then
	t = t1
    else
	t = {}
	for i,v in t1 do t[i] = v end
	for i,v in t2 do t[i] = v end
    end
    return t
@


1.11
log
@Allow a second argument to Objtype and Weapon, which should contain a
table of fields to add into or override in the first argument.
@
text
@d93 1
a93 1
    if u then t = merge (t, u) end
d114 1
a114 2
    if u then t = merge (t, u) end
    weapons[t.name] = u and merge (t, u) or t
d124 3
d128 8
a135 3
    local t = {}
    for i,v in t1 do t[i] = v end
    for i,v in t2 do t[i] = v end
@


1.10
log
@Added merge function.
@
text
@d92 2
a93 1
function Objtype (t)
d113 3
a115 2
function Weapon (t)
    weapons[t.name] = t
@


1.9
log
@Added hide_and_respawn_later() method which is used a lot by objects.
@
text
@d122 7
@


1.8
log
@Return error code if registering an object type failed.
@
text
@d36 9
@


1.7
log
@Got rid of last remnants of upvalues.
@
text
@d84 1
d93 3
@


1.6
log
@Prefixed internal functions/variables that are somehow accessible from
Lua with "_internal".
@
text
@d34 1
a34 1
	self.receive_damage = %dummy
d37 11
a47 11
	self.add_layer = %dummy
	self.replace_layer = %dummy
	self.move_layer = %dummy
	self.rotate_layer = %dummy
	self.remove_layer = %dummy
	self.remove_all_layers = %dummy
	self.add_light = %dummy
	self.replace_light = %dummy
	self.move_light = %dummy
	self.remove_light = %dummy
	self.remove_all_lights = %dummy
d52 10
a61 10
	self.destroy = %dummy
	self.hide = %dummy
	self.show = %dummy
	self.set_collision_flags = %dummy
	self.add_creation_field = %dummy
	self.set_mask = %dummy
	self.set_masks_centre = %dummy
	self.remove_mask = %dummy
	self.remove_all_masks = %dummy
	self.receive_damage = %dummy
d87 1
a87 1
		if %t.proxy_init then %t.proxy_init (self) end
d89 1
a89 1
		if %t.nonproxy_init then %t.nonproxy_init (self) end
@


1.5
log
@Updated to Lua 4.1-work3.
@
text
@d17 1
a17 1
function _object_init_hook (self)
@


1.4
log
@Added ``hidden'' attribute to objects.
@
text
@d107 1
a107 1
    return rads * 128 / 3.1415
@


1.3
log
@Added object_set_masks_centre() for the situation where you want to
change where the centre of all the bitmasks are at once.
@
text
@d26 2
d53 2
@


1.2
log
@Update hook and creation fields changes
@
text
@d29 1
d54 1
@


1.1
log
@Initial revision
@
text
@d18 4
d23 2
d27 1
d33 1
d45 1
d47 2
d51 1
d55 1
d57 1
d70 1
d95 7
@
