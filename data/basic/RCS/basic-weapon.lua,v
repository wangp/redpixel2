head	1.33;
access;
symbols;
locks; strict;
comment	@# @;


1.33
date	2002.07.12.08.08.05;	author tjaden;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.12.05.37.16;	author tjaden;	state Exp;
branches;
next	1.31;

1.31
date	2002.07.12.05.32.05;	author tjaden;	state Exp;
branches;
next	1.30;

1.30
date	2002.07.11.15.25.47;	author tjaden;	state Exp;
branches;
next	1.29;

1.29
date	2002.07.11.07.02.56;	author tjaden;	state Exp;
branches;
next	1.28;

1.28
date	2002.07.11.06.18.16;	author tjaden;	state Exp;
branches;
next	1.27;

1.27
date	2002.07.11.05.24.35;	author tjaden;	state Exp;
branches;
next	1.26;

1.26
date	2002.07.10.15.39.52;	author tjaden;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.10.10.34.38;	author tjaden;	state Exp;
branches;
next	1.24;

1.24
date	2002.07.09.13.14.27;	author tjaden;	state Exp;
branches;
next	1.23;

1.23
date	2002.01.29.15.04.50;	author tjaden;	state Exp;
branches;
next	1.22;

1.22
date	2002.01.29.14.57.36;	author tjaden;	state Exp;
branches;
next	1.21;

1.21
date	2002.01.29.00.07.03;	author tjaden;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.28.14.06.12;	author tjaden;	state Exp;
branches;
next	1.19;

1.19
date	2002.01.28.13.01.47;	author tjaden;	state Exp;
branches;
next	1.18;

1.18
date	2002.01.27.14.06.43;	author tjaden;	state Exp;
branches;
next	1.17;

1.17
date	2002.01.23.14.08.26;	author tjaden;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.23.06.10.21;	author tjaden;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.22.15.46.09;	author tjaden;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.22.11.15.43;	author tjaden;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.22.01.49.33;	author tjaden;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.21.17.08.26;	author tjaden;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.21.16.11.44;	author tjaden;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.21.15.26.12;	author tjaden;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.21.14.19.44;	author tjaden;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.21.04.16.09;	author tjaden;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.21.00.27.41;	author tjaden;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.20.06.59.48;	author tjaden;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.19.08.22.28;	author tjaden;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.15.10.17.18;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.15.06.07.55;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.14.02.25.33;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.12.20.13.22;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Smoke shouldn't produce light.
@
text
@-- basic-weapon.lua


store_load ("basic/basic-weapon.dat", "/basic/weapon/")



----------------------------------------------------------------------
--  Generalised declarators
----------------------------------------------------------------------


-- Declare a new weapon type with a standard firing routine, and standard ammo
-- counts.
local Weapon_With_Firer = function (t)
    return Weapon (t, {
	fire = function (player)
	    spawn_projectile (t.projectile, player, t.projectile_speed)
	    player.fire_delay = t.fire_delay_secs * 50
	    player:deduct_ammo (t.ammo_type)
	end
    })
end


-- Declare a new weapon or ammo pickup, which respawns a while after being
-- picked up.
local Standard_Pickup = function (t)
    return Respawning_Item (t, {
	category = "weapon",
	collide_hook = function (self, player)
	    if t.weapon_to_give then
		player:receive_weapon (t.weapon_to_give)
	    end
	    if t.ammo_to_give then
		player:receive_ammo (t.ammo_to_give, t.ammo_amount)
	    end
	    play_sound_on_clients (self, t.sound or "/basic/weapon/generic-pickup-sound")
	end
    })
end


-- Declare a new projectile type.  This only handles standard-style
-- projectiles, like bullets.
local Standard_Projectile = function (t)
    return Objtype (t, {
	nonproxy_init = function (self)
	    object_set_collision_is_projectile (self)
	    function self:collide_hook (obj)
		obj:receive_damage (t.damage, self.owner)
		self:set_stale ()
	    end
	    function self:tile_collide_hook ()
		if t.sparks then
		    spawn_sparks_on_clients (self.x, self.y, t.sparks, 2)
		end
		self:set_stale ()
	    end	
	end
    })
end


-- Declare a new projectile type.  This handles exploding projectiles.
local Explosive_Projectile = function (t)
    return Objtype (t, {
	nonproxy_init = function (self)
	    object_set_collision_is_projectile (self)
	    local hook = function (self, obj)
		if t.explosion then
		    spawn_explosion_on_clients (t.explosion, self.x, self.y)
		end
		if t.sparks then
		    spawn_sparks_on_clients (self.x, self.y, t.sparks, 2)
		end
		spawn_blast (self.x, self.y, t.radius, t.damage, self.owner)
		self:set_stale ()
	    end
	    self.collide_hook = hook
	    self.tile_collide_hook = hook
	end,

	proxy_init = function (self)
            if t.proxy_init then
		t.proxy_init (self)
	    end

	    if t.smoke_trails then
		self:set_update_hook (
		    80,
		    function (self)
			spawn_explosion (t.smoke_trails, self.x, self.y)
		    end
		)
	    end
	end,
    })
end


----------------------------------------------------------------------
--  Blaster
----------------------------------------------------------------------

Weapon {
    name = "basic-blaster", 
    arm_anim = {
	"/basic/weapon/blaster/1arm000",
	"/basic/weapon/blaster/1arm001",
	"/basic/weapon/blaster/1arm002",
	"/basic/weapon/blaster/1arm003",
	"/basic/weapon/blaster/1arm004";
	cx = 0, cy = 3, tics = 2
    },
    fire = function (player)
	spawn_projectile ("basic-blaster-projectile", player, 10)
	player.fire_delay = 50 * 0.1
    end,
    sound = "/basic/weapon/blaster/sound"
}

Standard_Pickup {
    name = "basic-blaster",
    icon = "/basic/weapon/blaster/pickup",
    weapon_to_give = "basic-blaster",
    respawn_secs = 10
}

Standard_Projectile {
    name = "basic-blaster-projectile",
    alias = "~bp",
    icon = "/basic/weapon/blaster/projectile",
    damage = 10,
    sparks = 30,
    proxy_init = function (self)
	self:rotate_layer (0, radian_to_bangle (self.angle))
    end
}


----------------------------------------------------------------------
--  Bow and arrow
----------------------------------------------------------------------

Weapon {
    name = "basic-bow",
    ammo_type = "basic-arrow",
    fire = function (player)
	spawn_projectile ("basic-arrow-projectile", player, 12,
			  ((random(10) - 5) / 10) * (PI/48))
	player.fire_delay = 0.3 * 50
	player:deduct_ammo ("basic-arrow")
    end,
    arm_anim = {
	"/basic/weapon/bow/2arm000",
	"/basic/weapon/bow/2arm001",
	"/basic/weapon/bow/2arm002",
	"/basic/weapon/bow/2arm003",
	"/basic/weapon/bow/2arm004",
	"/basic/weapon/bow/2arm005";
	cx = 4, cy = 5, tics = 3
    },
    sound = "/basic/weapon/bow/sound"
}

Standard_Pickup {
    name = "basic-bow",
    icon = "/basic/weapon/bow/pickup",
    weapon_to_give = "basic-bow",
    ammo_to_give = "basic-arrow",
    ammo_amount = 10,
    respawn_secs = 10
}

Standard_Pickup {
    name = "basic-arrow",
    icon = "/basic/weapon/ammo/arrow", 
    ammo_to_give = "basic-arrow",
    ammo_amount = 10,
    respawn_secs = 10
}

Explosive_Projectile {
    name = "basic-arrow-projectile",
    alias = "~ap",
    icon = "/basic/weapon/bow/projectile",
    radius = 55,
    damage = 40,
    explosion = "basic-explo42",
    proxy_init = function (self)
	self:rotate_layer (0, radian_to_bangle (self.angle))
    end
}


----------------------------------------------------------------------
--  Bullet weapons
----------------------------------------------------------------------

Standard_Pickup {
    name = "basic-bullet",
    icon = "/basic/weapon/ammo/bullet",
    ammo_to_give = "basic-bullet",
    ammo_amount = 30,
    respawn_secs = 10
}

Weapon_With_Firer {
    name = "basic-ak",
    ammo_type = "basic-bullet",
    projectile = "basic-ak-projectile",
    projectile_speed = 12,
    fire_delay_secs = 0.12,
    arm_anim = {
	"/basic/weapon/ak/2arm000",
	"/basic/weapon/ak/2arm001",
	"/basic/weapon/ak/2arm002",
	"/basic/weapon/ak/2arm003",
	"/basic/weapon/ak/2arm004";
	cx = 0, cy = 3
    },
    sound = "/basic/weapon/ak/sound"
}

Standard_Pickup {
    name = "basic-ak",
    icon = "/basic/weapon/ak/pickup",
    weapon_to_give = "basic-ak",
    ammo_to_give = "basic-bullet",
    ammo_amount = 10,
    respawn_secs = 10
}

Standard_Projectile {
    name = "basic-ak-projectile",
    alias = "~Ap",
    icon = "/basic/weapon/shotgun/projectile", -- XXX
    damage = 10,
    sparks = 40
}

Weapon {
    name = "basic-minigun",
    ammo_type = "basic-bullet",
    fire = function (player)
	spawn_projectile ("basic-minigun-projectile", player, 12,
			  ((random(10) - 5) / 10) * (PI/48))
	player.fire_delay = 0.05 * 50
	player:deduct_ammo ("basic-bullet")
    end,
    arm_anim = {
	"/basic/weapon/minigun/2arm000",
	"/basic/weapon/minigun/2arm001",
	"/basic/weapon/minigun/2arm002",
	"/basic/weapon/minigun/2arm003",
	"/basic/weapon/minigun/2arm004",
	"/basic/weapon/minigun/2arm005",
	"/basic/weapon/minigun/2arm006";
	cx = 0, cy = 1, tics = 2
    },
    sound = "/basic/weapon/minigun/sound"
}

Standard_Pickup {
    name = "basic-minigun",
    icon = "/basic/weapon/minigun/pickup",
    weapon_to_give = "basic-minigun",
    ammo_to_give = "basic-bullet",
    ammo_amount = 10,
    respawn_secs = 10
}

Standard_Projectile {
    name = "basic-minigun-projectile",
    alias = "~mp",
    icon = "/basic/weapon/shotgun/projectile", -- XXX
    damage = 10,
    sparks = 50
}


----------------------------------------------------------------------
--  Rocket weapons
----------------------------------------------------------------------

Weapon_With_Firer {
    name = "basic-rpg",
    ammo_type = "basic-rocket",
    projectile = "basic-rocket-projectile",
    projectile_speed = 10,
    fire_delay_secs = 0.6,
    arm_anim = {
	"/basic/weapon/rpg/2arm000",
	"/basic/weapon/rpg/2arm001",
	"/basic/weapon/rpg/2arm002",
	"/basic/weapon/rpg/2arm003",
	"/basic/weapon/rpg/2arm004",
	"/basic/weapon/rpg/2arm005";
	cx = 13, cy = 3, tics = 3
    },
    sound = "/basic/weapon/rpg/sound"
}

Standard_Pickup {
    name = "basic-rpg",
    icon = "/basic/weapon/rpg/pickup",
    weapon_to_give = "basic-rpg",
    ammo_to_give = "basic-rocket",
    ammo_amount = 1,
    respawn_secs = 10
}

Standard_Pickup {
    name = "basic-rocket",
    icon = "/basic/weapon/ammo/rocket",
    ammo_to_give = "basic-rocket",
    ammo_amount = 10,
    respawn_secs = 10,
}

Explosive_Projectile {
    name = "basic-rocket-projectile",
    alias = "~rp",
    icon = "/basic/weapon/rpg/projectile",
    radius = 75,
    damage = 80,
    explosion = "basic-explo42",
    smoke_trails = "basic-rocket-smoke",
    proxy_init = function (self)
	self:rotate_layer (0, radian_to_bangle (self.angle))
    end
}

explosion_type_register (
    "basic-rocket-smoke",
    "/basic/weapon/rpg/smoke/000", 16, 50/16,
    nil, -- no light
    nil  -- no sound
)

----------------------------------------------------------------------
--  Shotgun
----------------------------------------------------------------------

Weapon {
    name = "basic-shotgun",
    ammo_type = "basic-shell",
    fire = function (player)
	local spread = PI / 96
	spawn_projectile ("basic-shotgun-projectile", player, 10, -2 * spread)
	spawn_projectile ("basic-shotgun-projectile", player, 10, -spread)
	spawn_projectile ("basic-shotgun-projectile", player, 10, 0)
	spawn_projectile ("basic-shotgun-projectile", player, 10, spread)
	spawn_projectile ("basic-shotgun-projectile", player, 10, 2 * spread)
	player.fire_delay = 50 * 0.4
	player:deduct_ammo ("basic-shell")
    end,
    arm_anim = {
	"/basic/weapon/shotgun/2arm000",
	"/basic/weapon/shotgun/2arm001",
	"/basic/weapon/shotgun/2arm002",
	"/basic/weapon/shotgun/2arm003";
	cx = 1, cy = 4, tics = 4
    },
    sound = "/basic/weapon/shotgun/sound"
}

Standard_Pickup {
    name = "basic-shotgun",
    icon = "/basic/weapon/shotgun/pickup",
    weapon_to_give = "basic-shotgun",
    ammo_to_give = "basic-shell",
    ammo_amount = 10,
    respawn_secs = 10
}

Standard_Pickup {
    name = "basic-shell",
    icon = "/basic/weapon/ammo/shell",
    ammo_to_give = "basic-shell",
    ammo_amount = 10,
    respawn_secs = 10,
}

Standard_Projectile {
    name = "basic-shotgun-projectile",
    alias = "~sp",
    icon = "/basic/weapon/shotgun/projectile",
    damage = 10,
    sparks = 20
}


----------------------------------------------------------------------
--  Sniper rifle
----------------------------------------------------------------------

Weapon_With_Firer {
    name = "basic-rifle",
    ammo_type = "basic-slug",
    projectile = "basic-rifle-projectile",
    projectile_speed = 15,
    fire_delay_secs = 0.5,
    arm_anim = {
	"/basic/weapon/rifle/1arm000",
	"/basic/weapon/rifle/1arm001",
	"/basic/weapon/rifle/1arm002";
	cx = -2, cy = 4
    },
    client_switch_to_hook = function ()
	_internal_set_camera (1, 300)
    end,
    sound = "/basic/weapon/rifle/sound"
}

Standard_Pickup {
    name = "basic-rifle",
    icon = "/basic/weapon/rifle/pickup",
    weapon_to_give = "basic-rifle",
    ammo_to_give = "basic-slug",
    ammo_amount = 5,
    respawn_secs = 10
}

Objtype {
    name = "basic-rifle-projectile",
    alias = "~Rp",
    icon = "/basic/weapon/shotgun/projectile", -- XXX
    nonproxy_init = function (self)
	function self:collide_hook (obj)
	    obj:receive_damage (50, self.owner)
	    self:set_stale ()
	end
	function self:tile_collide_hook (obj)
	    -- sniper rifle slugs don't collide with tiles, but for fun
	    -- we make them spawn sparks the first time they hit one 
	    spawn_sparks_on_clients (self.x, self.y, 30, 2)
	    self:set_collision_flags ("pn")
	    self.tile_collide_hook = nil
	    return false
	end
    end
}


----------------------------------------------------------------------
--  Mines
----------------------------------------------------------------------

Standard_Pickup {
    name = "basic-mine",
    icon = "/basic/weapon/mine/pickup",
    respawn_secs = 10
}


----------------------------------------------------------------------
--  Weapon switch order
----------------------------------------------------------------------

-- This is the order that weapons will be numbered for selection.
weapon_order = {
    "basic-blaster",
    "basic-shotgun",
    "basic-ak",
    "basic-minigun",
    "basic-bow",
    "basic-rpg",
    "basic-rifle"
}

-- This is the order in which weapons will be auto-selected for you.
-- I recommend not putting in explosives.
weapon_auto_switch_order = {
    "basic-minigun",
    "basic-ak",
    "basic-shotgun",
    "basic-blaster"
}
@


1.32
log
@Reduced the number of smoke puffs from a rocket projectile.
@
text
@d338 1
a338 1
    "/basic/light/white-16",
@


1.31
log
@Made all spawn-and-forget server functions be named *_on_clients,
e.g. spawn_blod_on_clients.  Added smoke trails for rockets.
@
text
@d91 1
a91 1
		    60,
@


1.30
log
@Return false instead of non-nil from collide hooks to indicate that a
collision did not occur (more intuitive).
@
text
@d56 1
a56 1
		    spawn_sparks (self.x, self.y, t.sparks, 2)
d72 1
a72 1
		    spawn_explosion (t.explosion, self.x, self.y)
d75 1
a75 1
		    spawn_sparks (self.x, self.y, t.sparks, 2)
d82 16
a97 1
	end
d329 1
d335 6
d438 1
a438 1
	    spawn_sparks (self.x, self.y, 30, 2)
@


1.29
log
@Renamed Lua's "object_destroy" to "object_set_stale", as that's what
it is called in C (I confused myself).
@
text
@d419 1
a419 1
	    return true
@


1.28
log
@Slow blast spreading looks cool, but they are too easy to escape.
So we try faster spreading but larger radii.
@
text
@d52 1
a52 1
		self:destroy ()
d58 1
a58 1
		self:destroy ()
d78 1
a78 1
		self:destroy ()
d411 1
a411 1
	    self:destroy ()
@


1.27
log
@Added blast accreditation.
@
text
@d173 1
a173 1
    radius = 35,
d311 1
a311 1
    radius = 50,
@


1.26
log
@Increased number of slugs per rifle-pickup to 5.
@
text
@d77 1
a77 1
		spawn_blast (self.x, self.y, t.radius, t.damage)
@


1.25
log
@Lots of intermingled changes for:
- initial game types support
- notifying clients about new and quitting clients
- scoring
- allowing the server to play a sound on clients in a simple way
@
text
@d400 1
a400 1
    ammo_amount = 2,
@


1.24
log
@Added generic weapon/ammo pickup sound.
@
text
@d38 1
a38 1
	    play_sound (self, t.sound or "/basic/weapon/generic-pickup-sound")
d51 1
a51 1
		obj:receive_damage (t.damage)
d410 1
a410 1
	    obj:receive_damage (50)
@


1.23
log
@Renamed the "basic-simple42" explosion to "basic-explo42".
@
text
@d38 1
@


1.22
log
@Added initial (very incomplete) sound support for weapons.
@
text
@d174 1
a174 1
    explosion = "basic-simple42",
d312 1
a312 1
    explosion = "basic-simple42",
@


1.21
log
@Added bow.
@
text
@d103 2
a104 1
    end
d147 2
a148 1
    }
d206 2
a207 1
    }
d245 2
a246 1
    }
d285 2
a286 1
    }
d342 2
a343 1
    }
d390 2
a391 1
    end
@


1.20
log
@Made it so that projectiles cannot hit other projectiles.
@
text
@d129 20
d166 1
a166 1
Standard_Projectile {
d170 6
a175 1
    damage = 10
@


1.19
log
@Changes for health and ammo displays.
@
text
@d48 1
d68 1
@


1.18
log
@Added blasts.
@
text
@a16 3
	can_fire = function (player)
	    return player:ammo (t.ammo_type) > 0
	end,
a97 3
    can_fire = function (player)
	return true
    end,
a199 3
    can_fire = function (player)
	return player:ammo ("basic-bullet") > 0
    end,
d293 1
a293 3
    can_fire = function (player)
	return player:ammo ("basic-shell") > 0
    end,
@


1.17
log
@Added auto weapon switching.
@
text
@d66 21
d249 17
d283 1
a283 1
Standard_Projectile {
d287 6
a292 1
    damage = 10
@


1.16
log
@Added spark particles when some projectiles hit tiles.  Some other
changes because Objtype handles alias fields itself now.
@
text
@d80 3
d160 1
a160 3
	"/basic/weapon/ak/2arm004",
	"/basic/weapon/ak/2arm005",
	"/basic/weapon/ak/2arm006";
d352 1
a352 1
	    return 1
d373 1
d382 9
@


1.15
log
@Added respawning ball to respawing items and made a wrapper around
Objtype for respawning items.
@
text
@a31 1
    if t.alias then add_alias (t.name, t.alias) end
a48 1
    if t.alias then add_alias (t.name, t.alias) end
d56 3
d98 1
d177 2
a178 1
    damage = 10
d218 2
a219 1
    damage = 10
d301 2
a302 1
    damage = 10
d338 1
a340 1
        self:set_collision_flags ("pn")
d345 8
a354 2

add_alias ("basic-rifle-projectile", "~Rp")
@


1.14
log
@Updated for datafile.
@
text
@d33 1
a33 1
    return Objtype (t, {
d35 6
a40 10
	nonproxy_init = function (self)
	    self:set_collision_flags ("p")
	    function self:collide_hook (player)
		if t.weapon_to_give then
		    player:receive_weapon (t.weapon_to_give)
		end
		if t.ammo_to_give then
		    player:receive_ammo (t.ammo_to_give, t.ammo_amount)
		end
		self:hide_and_respawn_later (t.respawn_secs * 1000)
@


1.13
log
@Added object type aliases.
@
text
@d79 2
a80 1
	"/basic/weapon/blaster/1arm003";
@


1.12
log
@Allow a second argument to Objtype and Weapon, which should contain a
table of fields to add into or override in the first argument.
@
text
@d32 1
d54 1
d97 1
d129 1
d176 1
d216 1
d245 1
d298 1
d345 2
@


1.11
log
@Animated weapon firing.
@
text
@d16 10
a25 8
    return Weapon (merge (t, { can_fire = function (player)
				   return player:ammo (t.ammo_type) > 0
			       end,
			       fire = function (player)
			           spawn_projectile (t.projectile, player, t.projectile_speed)
				   player.fire_delay = t.fire_delay_secs * 50
				   player:deduct_ammo (t.ammo_type)
			       end }))
d32 15
a46 13
    return Objtype (merge (t, { category = "weapon",
			        nonproxy_init = function (self)
				    self:set_collision_flags ("p")
				    function self:collide_hook (player)
					if t.weapon_to_give then
					    player:receive_weapon (t.weapon_to_give)
					end
					if t.ammo_to_give then
					    player:receive_ammo (t.ammo_to_give, t.ammo_amount)
					end
					self:hide_and_respawn_later (t.respawn_secs * 1000)
				    end
				end }))
d53 11
a63 9
    return Objtype (merge (t, { nonproxy_init = function (self)
				    function self:collide_hook (obj)
					obj:receive_damage (t.damage)
					self:destroy ()
				    end
				    function self:tile_collide_hook ()
					self:destroy ()
				    end	
				end }))
@


1.10
log
@Added weapon switching with keyboard.
@
text
@d72 1
a72 2
	cx = 0, 
	cy = 3
d76 1
a76 1
	player.fire_delay = 0.1 * 50
d190 1
a190 1
	cx = 0, cy = 1
d262 1
a262 1
	cx = 1, cy = 4
@


1.9
log
@Added ammo limits.
@
text
@d343 15
@


1.8
log
@Made switching to the sniper rifle increase the max distance the
camera can see.
@
text
@d13 2
a14 1
-- Declare a new weapon type with a standard firing routine.
d16 4
a19 1
    return Weapon (merge (t, { fire = function (player)
d22 1
d27 1
a27 1
-- Declare a new weapon pickup, which respawns a while after being
d29 1
a29 1
local Weapon_Pickup = function (t)
d34 6
a39 14
					player:receive_weapon (t.weapon_to_give)
					self:hide_and_respawn_later (t.respawn_secs * 1000)
				    end
				end }))
end


-- Declare some weapon ammunition, which respawns a while after being
-- picked up.
local Weapon_Ammo = function (t)
    return Objtype (merge (t, { category = "weapon",
			        nonproxy_init = function (self)
				    self:set_collision_flags ("p")
				    function self:collide_hook (obj)
d65 1
a65 1
Weapon_With_Firer {
a66 3
    projectile = "basic-blaster-projectile",
    projectile_speed = 10,
    fire_delay_secs = 0.1,
d74 5
a78 1
    }
d81 1
a81 1
Weapon_Pickup {
d102 1
a102 1
Weapon_Pickup {
d106 2
d111 1
a111 1
Weapon_Ammo {
d114 2
d130 1
a130 1
Weapon_Ammo {
d133 2
d140 1
d156 1
a156 1
Weapon_Pickup {
d160 2
d173 4
d181 1
d195 1
a195 1
Weapon_Pickup {
d199 2
d215 1
a215 1
Weapon_Pickup {
d219 2
d224 1
a224 1
Weapon_Ammo {
d227 3
a229 1
    respawn_secs = 10
d245 3
d256 1
d267 1
a267 1
Weapon_Pickup {
d271 2
d276 1
a276 1
Weapon_Ammo {
d279 3
a281 1
    respawn_secs = 10
d297 1
d312 1
a312 1
Weapon_Pickup {
d316 2
d338 1
a338 1
Weapon_Ammo {
@


1.7
log
@Use the right image for the weapon we are holding (not animated yet).
Also, changed the generalised declarators to take table arguments,
which are more verbose and easier to read.
@
text
@d279 4
a282 1
    }
@


1.6
log
@Added initial code for AK-47 and miniguns, and shared a lot of code
between the weapon types.
@
text
@d14 5
a18 8
local Weapon_With_Firer = function (name, projectile, speed, fire_delay_secs)
    return Weapon {
	name = name,
	fire = function (player)
	    spawn_projectile (projectile, player, speed)
	    player.fire_delay = fire_delay_secs * 50
	end
    }
d24 9
a32 13
local Weapon_Pickup = function (name, icon, weapon_to_give, respawn_secs)
    return Objtype {
	category = "weapon",
	name = name,
	icon = icon,
	nonproxy_init = function (self)
	    self:set_collision_flags ("p")
	    function self:collide_hook (player)
		player:receive_weapon (weapon_to_give)
		self:hide_and_respawn_later (respawn_secs * 1000)
	    end
	end
    }
d38 8
a45 12
local Weapon_Ammo = function (name, icon, respawn_secs)
    return Objtype {
	category = "weapon",
	name = name,
	icon = icon,
	nonproxy_init = function (self)
	    self:set_collision_flags ("p")
	    function self:collide_hook (obj)
		self:hide_and_respawn_later (respawn_secs * 1000)
	    end
	end
    }
d51 10
a60 15
local Standard_Projectile = function (name, icon, damage, proxy_init)
    return Objtype {
	name = name,
	icon = icon,
	nonproxy_init = function (self)
	    function self:collide_hook (obj)
		obj:receive_damage (damage)
		self:destroy ()
	    end
	    function self:tile_collide_hook ()
		self:destroy ()
	    end	
	end,
	proxy_init = proxy_init
    }
d68 14
a81 1
Weapon_With_Firer ("basic-blaster", "basic-blaster-projectile", 10, 0.1)
d83 6
a88 2
Weapon_Pickup ("basic-blaster", "/basic/weapon/blaster/pickup",
	       "basic-blaster", 10)
d90 8
a97 7
Standard_Projectile ("basic-blaster-projectile",
		     "/basic/weapon/blaster/projectile",
		     10,
		     -- proxy_init
		     function (self)
			 self:rotate_layer (0, radian_to_bangle (self.angle))
		     end)
d104 6
a109 2
Weapon_Pickup ("basic-bow", "/basic/weapon/bow/pickup",
	       "basic-bow", 10)
d111 5
a115 1
Weapon_Ammo ("basic-arrow", "/basic/weapon/ammo/arrow", 10)
d117 5
a121 3
Standard_Projectile ("basic-arrow-projectile",
		     "/basic/weapon/bow/projectile",
		     10)
d128 5
a132 1
Weapon_Ammo ("basic-bullet", "/basic/weapon/ammo/bullet", 10)
d134 16
a149 1
Weapon_With_Firer ("basic-ak", "basic-ak-projectile", 12, 0.12)
d151 6
a156 2
Weapon_Pickup ("basic-ak", "/basic/weapon/ak/pickup",
	       "basic-ak", 10)
d158 5
a162 3
Standard_Projectile ("basic-ak-projectile",
		     "/basic/weapon/shotgun/projectile", -- XXX
		     10)
d170 11
a180 1
    end
d183 6
a188 2
Weapon_Pickup ("basic-minigun", "/basic/weapon/minigun/pickup",
	       "basic-minigun", 10)
d190 5
a194 3
Standard_Projectile ("basic-minigun-projectile",
		     "/basic/weapon/shotgun/projectile", -- XXX
		     10)
d201 6
a206 2
Weapon_Pickup ("basic-rpg", "/basic/weapon/rpg/pickup",
	       "basic-rpg", 10)
d208 5
a212 1
Weapon_Ammo ("basic-rocket", "/basic/weapon/ammo/rocket", 10)
d214 5
a218 3
Standard_Projectile ("basic-rocket-projectile",
		     "/basic/weapon/rpg/projectile",
		     10)
d235 8
a242 1
    end
d245 6
a250 2
Weapon_Pickup ("basic-shotgun", "/basic/weapon/shotgun/pickup",
	       "basic-shotgun", 10)
d252 5
a256 1
Weapon_Ammo ("basic-shell", "/basic/weapon/ammo/shell", 10)
d258 5
a262 3
Standard_Projectile ("basic-shotgun-projectile",
		     "/basic/weapon/shotgun/projectile",
		     10)
d269 12
a280 1
Weapon_With_Firer ("basic-rifle", "basic-rifle-projectile", 15, 0.5)
d282 6
a287 2
Weapon_Pickup ("basic-rifle", "/basic/weapon/rifle/pickup",
	       "basic-rifle", 10)
d306 5
a310 1
Weapon_Ammo ("basic-mine", "/basic/weapon/mine/pickup", 10)
@


1.5
log
@The start of some new weapons: shotguns and sniper rifles.
@
text
@d7 48
a54 13
local make_weapon_nonproxy_init
function make_weapon_nonproxy_init (weapon_to_give, respawn_secs)
    return
    function (self)
	self:set_collision_flags ("p")
	function self:collide_hook (player)
	    player:receive_weapon (weapon_to_give)
	    self:hide ()
	    self:set_update_hook (respawn_secs * 1000,
				  function (self)
				      self:show ()
				      self:remove_update_hook ()
				  end)
d56 21
a76 1
    end
d84 1
a84 7
Weapon {
    name = "basic-blaster",
    fire = function (player)
	spawn_projectile ("basic-blaster-projectile", player, 10)
	player.fire_delay = 5
    end
}
d86 2
a87 6
Objtype {
    category = "weapon",
    name = "basic-blaster",
    icon = "/basic/weapon/blaster/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-blaster", 10)
}
d89 7
a95 17
Objtype {
    category = "projectile",
    name = "basic-blaster-projectile",
    icon = "/basic/weapon/blaster/projectile",
    nonproxy_init = function (self)
	function self:collide_hook (obj)
	    obj:receive_damage (10)
	    self:destroy ()
	end
	function self:tile_collide_hook ()
	    self:destroy ()
	end
    end,
    proxy_init = function (self)
	self:rotate_layer (0, radian_to_bangle (self.angle))
    end
}
d102 2
a103 6
Objtype {
    category = "weapon",
    name = "basic-bow",
    icon = "/basic/weapon/bow/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-bow", 10)
}
d105 1
a105 5
Objtype {
    category = "weapon",
    name = "basic-arrow",
    icon = "/basic/weapon/ammo/arrow"
}
d107 3
a109 5
Objtype {
    category = "projectile",
    name = "basic-arrow-projectile",
    icon = "/basic/weapon/bow/projectile"
}
d116 18
a133 5
Objtype {
    category = "weapon",
    name = "basic-ak",
    icon = "/basic/weapon/ak/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-ak", 10)
d136 2
a137 6
Objtype {
    category = "weapon", 
    name = "basic-minigun", 
    icon = "/basic/weapon/minigun/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-minigun", 10)
}
d139 3
a141 5
Objtype {
    category = "weapon", 
    name = "basic-bullet", 
    icon = "/basic/weapon/ammo/bullet"
}
d148 2
a149 6
Objtype {
    category = "weapon", 
    name = "basic-rpg", 
    icon = "/basic/weapon/rpg/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-rpg", 10)
}
d151 1
a151 5
Objtype {
    category = "weapon", 
    name = "basic-rocket", 
    icon = "/basic/weapon/ammo/rocket"
}
d153 3
a155 5
Objtype {
    category = "projectile",
    name = "basic-rocket-projectile", 
    icon = "/basic/weapon/rpg/projectile"
}
a161 2
local shotgun_spread = PI / 96

d165 3
a167 2
	spawn_projectile ("basic-shotgun-projectile", player, 10, -2*shotgun_spread)
	spawn_projectile ("basic-shotgun-projectile", player, 10, -shotgun_spread)
d169 2
a170 2
	spawn_projectile ("basic-shotgun-projectile", player, 10, shotgun_spread)
	spawn_projectile ("basic-shotgun-projectile", player, 10, 2*shotgun_spread)
d175 2
a176 6
Objtype {
    category = "weapon", 
    name = "basic-shotgun", 
    icon = "/basic/weapon/shotgun/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-shotgun", 10)
}
d178 1
a178 5
Objtype {
    category = "weapon", 
    name = "basic-shell", 
    icon = "/basic/weapon/ammo/shell"
}
d180 3
a182 13
Objtype {
    name = "basic-shotgun-projectile",
    icon = "/basic/weapon/shotgun/projectile",
    nonproxy_init = function (self)
	function self:collide_hook (obj)
	    obj:receive_damage (10)
	    self:destroy ()
	end
	function self:tile_collide_hook ()
	    self:destroy ()
	end	
    end
}
d189 1
a189 7
Weapon {
    name = "basic-rifle",
    fire = function (player)
	spawn_projectile ("basic-rifle-projectile", player, 15)
	player.fire_delay = 50 * 0.5
    end
}
d191 2
a192 6
Objtype {
    category = "weapon", 
    name = "basic-rifle", 
    icon = "/basic/weapon/rifle/pickup",
    nonproxy_init = make_weapon_nonproxy_init ("basic-rifle", 10)
}
d211 1
a211 5
Objtype {
    category = "weapon", 
    name = "basic-mine", 
    icon = "/basic/weapon/mine/pickup"
}
@


1.4
log
@Updated to Lua 4.1-work3.
@
text
@d7 18
a30 3
    can_fire = function (player)
	return 1
    end,
d41 1
a41 7
    nonproxy_init = function (self)
	self:set_collision_flags ("p")
        function self:collide_hook (player)
	    player:receive_weapon ("basic-blaster")
	    self:destroy ()
	end
    end
d70 2
a71 1
    icon = "/basic/weapon/bow/pickup"
d94 2
a95 1
    icon = "/basic/weapon/ak/pickup"
d101 2
a102 1
    icon = "/basic/weapon/minigun/pickup"
d119 2
a120 1
    icon = "/basic/weapon/rpg/pickup"
d140 14
d157 2
a158 1
    icon = "/basic/weapon/shotgun/pickup"
d167 14
d186 8
d197 14
a210 1
    icon = "/basic/weapon/rifle/pickup"
@


1.3
log
@Removed the light from blaster projectiles (it was just a test).
@
text
@d28 1
a28 1
        function self.collide_hook (self, player)
d40 1
a40 1
	function self.collide_hook (self, obj)
d44 1
a44 1
	function self.tile_collide_hook (self)
@


1.2
log
@Rotate blaster projectile in the angle it is fired
@
text
@a48 1
	self:add_light ("/basic/light/white-16", 0, 0)
@


1.1
log
@Initial revision
@
text
@d50 1
@
