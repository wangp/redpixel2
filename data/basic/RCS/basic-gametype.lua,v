head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2002.07.13.07.58.35;	author tjaden;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.13.06.22.15;	author tjaden;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.13.05.52.03;	author tjaden;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.10.10.35.29;	author tjaden;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Made player going too far off map count as suicide (e.g. fall off
bottom).
@
text
@-- basic-gametype.lua


----------------------------------------------------------------------
--  Generic game type handling core
--  (written here to make the C code easier)
----------------------------------------------------------------------

-- The current game type
local game_type = nil

-- Called by server C code at the start of a new session
-- gt is the game type to use
function _internal_new_session_hook (gt)
    if type (gt) ~= "table" then
	error ("Gametype not a table\n")
    else
	game_type = gt
	if game_type.new_session then
	    game_type.new_session ()
	end
    end
end

-- Called by server C code when a new map is loaded
function _internal_new_map_hook (map_name)
    if game_type.new_map then
	game_type.new_map (map_name)
    end
end

-- Called by server C code when a player is spawned
function _internal_player_spawned_hook (id)
    if game_type.player_spawned then
	game_type.player_spawned (id)
    end
end

-- Called by player Lua code (and occasionally server C code) when a
-- player is killed
function _internal_player_died_hook (player_id, killer_id)
    if game_type.player_died then
	game_type.player_died (player_id, killer_id)
    end
end


----------------------------------------------------------------------
--  Deathmatch game type
--
--  The only game type for now.  Usual deathmatch, you kill, you score.
--
--  For a minor difference, we track the total number of frags per
--  player, as well as frags scored in the current map.
----------------------------------------------------------------------

-- XXX: this code will be wrong if the client id numbers wrap around
-- after 1023 and get reused.  That's not going to happen..

local dm_frags_total
local dm_frags_current_map

local set_deathmatch_score =
function (id)
    local sc
    if dm_frags_current_map[id] ~= dm_frags_total[id] then
	sc = (dm_frags_total[id].." ("..dm_frags_current_map[id]..")")
    else
	sc = tostring (dm_frags_total[id])
    end
    set_score (id, sc)
end

Game_Type_Deathmatch = {

    new_session =
	function ()
	    dm_frags_total = {}
	end,

    new_map =
	function (map_name)
	    dm_frags_current_map = {}
	end,

    player_spawned = 
	function (id)
	    if dm_frags_total[id] == nil then
		dm_frags_total[id] = 0
	    end
	    if dm_frags_current_map[id] == nil then
		dm_frags_current_map[id] = 0
		set_deathmatch_score (id)
	    end
	end,

    player_died =
	function (player_id, killer_id)
	    if (dm_frags_total[player_id] ~= nil and
		dm_frags_total[killer_id] ~= nil) then
		local kid = killer_id
		local d = (player_id == kid) and -1 or 1

		dm_frags_total[kid] = dm_frags_total[kid] + d
		dm_frags_current_map[kid] = dm_frags_current_map[kid] + d
		set_deathmatch_score (kid)

		if d < 0 then
		    broadcast_text_message (get_client_name (player_id)
					    .." committed suicide")
		else
		    broadcast_text_message (get_client_name (player_id)
					    .." was killed by "..
					    get_client_name (killer_id))
		end
	    end
	end
}
@


1.3
log
@Broadcast a text message when a player dies.
@
text
@d39 2
a40 1
-- Called by player Lua code when a player is killed
@


1.2
log
@Changed slightly how game types work and fixed the scoring after
changes of maps.
@
text
@d102 1
d106 9
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
_internal_game_type = nil
d12 5
a16 4
-- Called by server C code to start a game type
function _internal_start_game_type (gt)
    if gt == nil then
	error ("Gametype cannot be nil\n")
d18 3
a20 3
	_internal_game_type = gt
	if _internal_game_type.init then
	    _internal_game_type.init ()
d25 4
a28 7
-- Called by server C code to end the current game type
function _internal_end_game_type ()
    if _internal_game_type then
	if _internal_game_type.shutdown then
	    _internal_game_type.shutdown ()
	end
	_internal_game_type = nil
d32 1
a32 1
-- 
d34 9
a42 2
    if _internal_game_type.player_spawned then
	_internal_game_type.player_spawned (id)
d49 1
d51 3
d56 16
a71 1
local dm_frags
d74 2
a75 1
    init =
d77 6
a82 1
	    dm_frags = {}
d87 6
a92 2
	    if dm_frags[id] == nil then
		dm_frags[id] = 0 
d98 7
a104 3
	    if dm_frags[player_id] == nil or dm_frags[killer_id] == nil then
		-- no such player, maybe a dummy object
		return
a105 4

	    dm_frags[killer_id] = (dm_frags[killer_id] + 
				   ((player_id == killer_id) and -1 or 1))
 	    set_score (killer_id, tostring (dm_frags[killer_id]))
@
