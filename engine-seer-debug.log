SeeRC debugger data:
 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>int x, y;
284>int legframe, legtics;
285>BITMAP *bmp;
286>};
287>
288> 
289>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
290>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
291>typedef void weapon_type_t;	       
292>import int create_weapon_type(char *name);    
293>import int assign_weapon_handler(int typenum, seer_addr handler);
294>
295>#! 7 "scripts/imports.sh"
296>
297>
298>#! 7 "!!_internal_Script"
299>
300>export init;
301>
302>
303>
304>
305>
306>
307>int init()
308>{   
309>     
310>    
311>    add_tiles_pack("data/tiles.dat");
312>    add_tiles_pack("data/tiles2.dat");
313>    
314>     
315>    add_script("scripts/rpg.sc");
316>    add_script("scripts/shotgun.sc");
317>
318>    return 0;
319>}
320>
321>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(8101490)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(8105b90)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(8105c68,8105cc0,8105d18,8105d70,8105dc8)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(81093c8,8109420)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(8109508,8109560,81095b8)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(81096b0,8109718,8109770,81097c8,8109820)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(8109938)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(8109dc0,8109e18)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(8109f08)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(8109fe0,810a038,810a090,810a0e8)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(810a1e8,810a240)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(810a330)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(810a408,810a460,810a4b8)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(810a5b8)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(810a698,810a700,810a758)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(810a860,810a8b8,810a910,810a968)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(810aa68,810aac0,810ab18)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(810ac08,810ac60,810acb8)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(810adb0,810ae08,810ae60,810aeb8)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(810afb8)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(810b088)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(810b158)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(810b228,810b280)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(810b360,810b3b8)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(810b498,810b4f0)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(810b5d0,810b638,810b690,810b6e8)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(810b7e8,810b850,810b8a8,810b900,810b958)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(810ba70,810bac8,810bb30,810bb88)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(810bc88)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(810c058,810c0b0,810c0f8,810c140)>...
Declaration of `do_line' as <(810bdd0,810be38,810be90,810bee8,810bf40,810bf98,810bff0)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(810c2b0,810c318,810c370,810c3c8,810c420,810c478,810c4d0,810c528)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(810c620,810c688,810c6e0,810c748)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(810c848,810c8b0,810c908,810c960,810c9b8,810ca10)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(810cd60,810cdb8,810ce00,810ce48)>...
Declaration of `do_circle' as <(810cb30,810cb98,810cbf0,810cc48,810cca0,810ccf8)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(810cfa8,810d010,810d068,810d0c0,810d118)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(810d228,810d290,810d2e8,810d340,810d398)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(810d730,810d788,810d7d0,810d818)>...
Declaration of `do_ellipse' as <(810d4a8,810d510,810d568,810d5c0,810d618,810d670,810d6c8)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(810d988,810d9f0,810da48,810daa0,810daf8,810db50)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(810dc70,810dcd8,810dd30,810dd88,810dde0,810de38)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(810df58,810dfc0,810e018,810e080)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(810e190,810e1f8,810e260)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(810e350,810e3b8,810e410,810e468)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(810e568,810e5d0,810e638,810e690,810e6e8,810e740,810e798,810e7f0)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(810e930,810e998,810ea00,810ea58,810eab0,810eb08,810eb60,810ebb8)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(810ed00,810ed68,810edd0,810ee28,810ee80,810eed8,810ef30,810ef88,810efe0,810f038)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(810f1a0,810f208,810f270,810f2c8,810f320,810f378)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(810f4a0,810f508,810f570,810f5c8,810f620)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(810f740,810f7a8,810f810,810f868,810f8c0,810f918)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(810fa38)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(810fb20,810fb88,810fbf0,810fc48)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(810fd48)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(810fe18,810fe80,810fee8,810ff50,810ffa8,8110000)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(8110128,8110190,81101f8,8110260,81102b8,8110310)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(8110438,81104a0,8110508,8110570,81105c8,8110620,8110678,81106d0)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(8110810,8110878,81108e0,8110938,8110990,81109e8,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(8110b30,8110b98,8110c00,8110c58,8110cb0,8110d08,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(8110e48,8110eb0)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(8110fa0)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(8111088)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(8111168,81111d0,8111238,8111290)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(81113c8,8111430,8111498,81114f0)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(8111620)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(81116f8)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(8111858)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(8111ab8,8111b10,8111b68)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(8111c68,8111cc0)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(8111da8)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(8111e90)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(8111f70)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(8112050)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(8112130)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(8112218)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(81122f8,8112360,81123b8,8112410,8112468)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(8112578)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(8112660,81126c8,8112720,8112778,81127d0)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(81128e0)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(81129c8)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(8112aa8,8112b10)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(8112bf8,8112c60,8112cb8)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(8112f10)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(8112fe0,8113048)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(81131a0)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(8113280,81132e8)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(81133d8)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(81134b8,8113520)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(8113608,8113670)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(8113758)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(8113828)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(8113908)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(81139e8,8113a40)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(8113b30,8113b88)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(8113c78)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(8113d58)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(8113e38,8113e90)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(8113f80,8113fd8)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(81140c8,8114130,8114188)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(8114288,81142f0,8114348)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(8114448,81144b0,8114508)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(8114608,8114670)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(8114768)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(8114848,81148b0)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(81149a0,8114a08)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(8114af8,8114b60)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(8114c38,8114ca0)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(8114d90,8114df8)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(8114ee8,8114f50,8114fb8)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(81150b8,8115120,8115188)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(8115288,81152f0,8115358)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(8115458,81154c0,8115528)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(8115630,8115698,81156f0)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(81157e8,8115850,81158a8,8115900,8115958,81159b0)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(8115ad8,8115b40,8115b98,8115bf0,8115c48,8115ca0)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(8115ef0,8115f48,8115fa0)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(8115dc8,8115e30,8115e88,8116038)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(8116500)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(81165e0,8116648)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(8116738)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(8116820)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(8116908,8116970)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(8116a48,8116ab0)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(8116ba0,8116c08)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(8116ce8)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(8116dc8,8116e30)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(8116fe0)>...
Declaration of `df_foreach' as <(8116f10,8116f78)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(81170f0,8117158)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(8117238)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(8117308)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(81173e8,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(8117598,8117600,8117658)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Reading declaration:type is a standard `int'
Declaration of `legframe'...
struct:member legframe added
(Short)Declaration of `legtics' as (null)...
struct:member legtics added
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
struct:member bmp added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(81179d8,8117a30)>...
Defining type 'weapon_handler_t' as *(81179d8,8117a30)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(8117b20,8117b78,8117be0)>...
Defining type 'object_handler_t' as *(8117b20,8117b78,8117be0)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(8117d48)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(8117e38,8117e90)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export init;

>int init()
Reading declaration:type is a standard `int'
Declaration of `init' as <()>...
Address:0
=======================>>ENTERING function `init'!
   0: ENTER 

>    add_tiles_pack("data/tiles.dat");
Symbol:add_tiles_pack
   4: MOV a0 , 0
  12: ADD a0 , ES
  16: PUSH a0
  20: CALLEX 2859 , 4
  32: ADD SP , 4

>    add_tiles_pack("data/tiles2.dat");
Symbol:add_tiles_pack
  40: MOV a0 , 15
  48: ADD a0 , ES
  52: PUSH a0
  56: CALLEX 2859 , 4
  68: ADD SP , 4

>    add_script("scripts/rpg.sc");
Symbol:add_script
  76: MOV a0 , 31
  84: ADD a0 , ES
  88: PUSH a0
  92: CALLEX 2836 , 4
 104: ADD SP , 4

>    add_script("scripts/shotgun.sc");
Symbol:add_script
 112: MOV a0 , 46
 120: ADD a0 , ES
 124: PUSH a0
 128: CALLEX 2836 , 4
 140: ADD SP , 4

>    return 0;
 148: MOV a0 , 0
 156: LEAVE 
 157: RET 
 158: LEAVE 
 159: RET 
+++
Local symbols:
=======================>>LEAVING  function `init'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(8117b20,8117b78,8117be0)'
 weapon_handler_t : `*(81179d8,8117a30)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->init

Global Symbols:
     init : `()' at CS+0
 assign_weapon_handler : `(8117e38,8117e90)' at 3114
 create_weapon_type : `(8117d48)' at 3084
 create_object_type : `(8117598,8117600,8117658)' at 3057
   printf : `(81173e8,...)' at 3030
    bmp_h : `(8117308)' at 3015
    bmp_w : `(8117238)' at 3001
 bmp_line : `(81170f0,8117158)*' at 2987
 df_foreach : `(8116f10,8116f78)' at 2970
 df_count : `(8116dc8,8116e30)' at 2951
   df_dat : `(8116ce8)*' at 2934
  df_item : `(8116ba0,8116c08)*' at 2919
 df_get_item : `(8116a48,8116ab0)*' at 2903
 df_get_item_num : `(8116908,8116970)' at 2883
 add_tiles_pack : `(8116820)' at 2859
 add_script : `(8116738)' at 2836
 exec_script : `(81165e0,8116648)' at 2817
 addressof : `(8116500)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(8115dc8,8115e30,8115e88,8116038)' at 2639
 create_trans_table : `(8115ad8,8115b40,8115b98,8115bf0,8115c48,8115ca0)' at 2612
 create_light_table : `(81157e8,8115850,81158a8,8115900,8115958,81159b0)' at 2585
 create_rgb_table : `(8115630,8115698,81156f0)' at 2558
 save_tga : `(8115458,81154c0,8115528)' at 2533
 save_pcx : `(8115288,81152f0,8115358)' at 2516
 save_bmp : `(81150b8,8115120,8115188)' at 2499
 save_bitmap : `(8114ee8,8114f50,8114fb8)' at 2482
 load_tga : `(8114d90,8114df8)*' at 2462
 load_pcx : `(8114c38,8114ca0)*' at 2445
 load_lbm : `(8114af8,8114b60)*' at 2428
 load_bmp : `(81149a0,8114a08)*' at 2411
 load_bitmap : `(8114848,81148b0)*' at 2394
 get_filename : `(8114768)*' at 2374
 pack_fputs : `(8114608,8114670)' at 2353
 pack_fgets : `(8114448,81144b0,8114508)*' at 2334
 pack_fwrite : `(8114288,81142f0,8114348)' at 2315
 pack_fread : `(81140c8,8114130,8114188)' at 2295
 pack_mputl : `(8113f80,8113fd8)' at 2276
 pack_mputw : `(8113e38,8113e90)' at 2257
 pack_mgetl : `(8113d58)' at 2238
 pack_mgetw : `(8113c78)' at 2219
 pack_iputl : `(8113b30,8113b88)' at 2200
 pack_iputw : `(81139e8,8113a40)' at 2181
 pack_igetl : `(8113908)' at 2162
 pack_igetw : `(8113828)' at 2143
 pack_fclose_chunk : `(8113758)*' at 2124
 pack_fopen_chunk : `(8113608,8113670)*' at 2098
 pack_fseek : `(81134b8,8113520)' at 2073
 pack_fclose : `(81133d8)' at 2054
 pack_fopen : `(8113280,81132e8)*' at 2034
 packfile_password : `(81131a0)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(8112fe0,8113048)' at 1963
 midi_seek : `(8112f10)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(8112bf8,8112c60,8112cb8)' at 1871
 play_midi : `(8112aa8,8112b10)' at 1846
 destroy_midi : `(81129c8)' at 1828
 load_midi : `(81128e0)*' at 1807
 adjust_sample : `(8112660,81126c8,8112720,8112778,81127d0)' at 1789
 stop_sample : `(8112578)' at 1767
 play_sample : `(81122f8,8112360,81123b8,8112410,8112468)' at 1747
 destroy_sample : `(8112218)' at 1727
 load_voc : `(8112130)*' at 1704
 load_wav : `(8112050)*' at 1687
 load_sample : `(8111f70)*' at 1670
 unload_datafile : `(8111e90)' at 1650
 load_datafile : `(8111da8)*' at 1626
 set_volume : `(8111c68,8111cc0)' at 1604
 install_sound : `(8111ab8,8111b10,8111b68)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(8111858)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(81116f8)' at 1437
 open_fli : `(8111620)' at 1413
 play_memory_fli : `(81113c8,8111430,8111498,81114f0)' at 1396
 play_fli : `(8111168,81111d0,8111238,8111290)' at 1372
 destroy_font : `(8111088)' at 1355
 text_height : `(8110fa0)' at 1334
 text_length : `(8110e48,8110eb0)' at 1314
 textprintf_centre : `(8110b30,8110b98,8110c00,8110c58,8110cb0,8110d08,...)' at 1294
 textprintf : `(8110810,8110878,81108e0,8110938,8110990,81109e8,...)' at 1268
 textout_justify : `(8110438,81104a0,8110508,8110570,81105c8,8110620,8110678,81106d0)' at 1249
 textout_centre : `(8110128,8110190,81101f8,8110260,81102b8,8110310)' at 1225
  textout : `(810fe18,810fe80,810fee8,810ff50,810ffa8,8110000)' at 1202
 text_mode : `(810fd48)' at 1186
 draw_trans_sprite : `(810fb20,810fb88,810fbf0,810fc48)' at 1168
    clear : `(810fa38)' at 1142
 rotate_scaled_sprite : `(810f740,810f7a8,810f810,810f868,810f8c0,810f918)' at 1128
 rotate_sprite : `(810f4a0,810f508,810f570,810f5c8,810f620)' at 1099
 stretch_sprite : `(810f1a0,810f208,810f270,810f2c8,810f320,810f378)' at 1077
 stretch_blit : `(810ed00,810ed68,810edd0,810ee28,810ee80,810eed8,810ef30,810ef88,810efe0,810f038)' at 1054
 masked_blit : `(810e930,810e998,810ea00,810ea58,810eab0,810eb08,810eb60,810ebb8)' at 1033
     blit : `(810e568,810e5d0,810e638,810e690,810e6e8,810e740,810e798,810e7f0)' at 1013
 floodfill : `(810e350,810e3b8,810e410,810e468)' at 1000
   spline : `(810e190,810e1f8,810e260)' at 982
 calc_spline : `(810df58,810dfc0,810e018,810e080)' at 967
 ellipsefill : `(810dc70,810dcd8,810dd30,810dd88,810dde0,810de38)' at 947
  ellipse : `(810d988,810d9f0,810da48,810daa0,810daf8,810db50)' at 927
 do_ellipse : `(810d4a8,810d510,810d568,810d5c0,810d618,810d670,810d6c8)' at 911
 circlefill : `(810d228,810d290,810d2e8,810d340,810d398)' at 892
   circle : `(810cfa8,810d010,810d068,810d0c0,810d118)' at 873
 do_circle : `(810cb30,810cb98,810cbf0,810cc48,810cca0,810ccf8)' at 858
     rect : `(810c848,810c8b0,810c908,810c960,810c9b8,810ca10)' at 840
  polygon : `(810c620,810c688,810c6e0,810c748)' at 827
 triangle : `(810c2b0,810c318,810c370,810c3c8,810c420,810c478,810c4d0,810c528)' at 811
  do_line : `(810bdd0,810be38,810be90,810bee8,810bf40,810bf98,810bff0)' at 794
 solid_mode : `()' at 778
 xor_mode : `(810bc88)' at 759
 drawing_mode : `(810ba70,810bac8,810bb30,810bb88)' at 742
 set_clip : `(810b7e8,810b850,810b8a8,810b900,810b958)' at 721
 putpixel : `(810b5d0,810b638,810b690,810b6e8)' at 704
 getb_depth : `(810b498,810b4f0)' at 687
 getg_depth : `(810b360,810b3b8)' at 668
 getr_depth : `(810b228,810b280)' at 649
     getb : `(810b158)' at 630
     getg : `(810b088)' at 617
     getr : `(810afb8)' at 604
 makecol_depth : `(810adb0,810ae08,810ae60,810aeb8)' at 591
 makecol8 : `(810ac08,810ac60,810acb8)' at 569
  makecol : `(810aa68,810aac0,810ab18)' at 552
 bestfit_color : `(810a860,810a8b8,810a910,810a968)' at 536
 generate_optimized_palette : `(810a698,810a700,810a758)' at 514
 generate_332_palette : `(810a5b8)' at 479
 get_pallete_range : `(810a408,810a460,810a4b8)' at 450
 get_pallete : `(810a330)' at 424
 get_color : `(810a1e8,810a240)' at 404
 set_pallete_range : `(8109fe0,810a038,810a090,810a0e8)' at 386
 set_pallete : `(8109f08)' at 360
 set_color : `(8109dc0,8109e18)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(8109938)' at 288
 create_sub_bitmap : `(81096b0,8109718,8109770,81097c8,8109820)*' at 265
 create_bitmap_ex : `(8109508,8109560,81095b8)*' at 239
 create_bitmap : `(81093c8,8109420)*' at 214
 set_gfx_mode : `(8105c68,8105cc0,8105d18,8105d70,8105dc8)' at 192
 set_color_conversion : `(8105b90)' at 171
 set_color_depth : `(8101490)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:160
Inits size:0
Consts size:65
Data size:0
Stack size:4000
Doing CleanUp.........................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135368893
with addr:134523620 and params:0
Importing allegro_exit at 135368914
with addr:134523572 and params:0
Importing install_mouse at 135368936
with addr:134522724 and params:0
Importing install_timer at 135368958
with addr:134523556 and params:0
Importing install_keyboard at 135368983
with addr:134523524 and params:0
Importing screen at 135368998
with addr:134719304 and params:-1
Importing set_color_depth at 135369022
with addr:134523604 and params:4
Importing set_color_conversion at 135369051
with addr:134521924 and params:4
Importing set_gfx_mode at 135369072
with addr:134521700 and params:20
Importing create_bitmap at 135369094
with addr:134522932 and params:8
Importing create_bitmap_ex at 135369119
with addr:134522708 and params:12
Importing create_sub_bitmap at 135369145
with addr:134521860 and params:20
Importing destroy_bitmap at 135369168
with addr:134523428 and params:4
Importing rgb_map at 135369184
with addr:134720500 and params:-1
Importing color_map at 135369202
with addr:134720492 and params:-1
Importing set_color at 135369220
with addr:134523380 and params:8
Importing set_pallete at 135369240
with addr:134522148 and params:1024
Importing set_pallete_range at 135369266
with addr:134522228 and params:1036
Importing get_color at 135369284
with addr:134523316 and params:8
Importing get_pallete at 135369304
with addr:134521972 and params:1024
Importing get_pallete_range at 135369330
with addr:134524116 and params:1032
Importing generate_332_palette at 135369359
with addr:134521572 and params:1024
Importing generate_optimized_palette at 135369394
with addr:134523668 and params:1284
Importing bestfit_color at 135369416
with addr:134522820 and params:1036
Importing makecol at 135369432
with addr:134523988 and params:12
Importing makecol8 at 135369449
with addr:134524068 and params:12
Importing makecol_depth at 135369471
with addr:134522564 and params:16
Importing getr at 135369484
with addr:134522788 and params:4
Importing getg at 135369497
with addr:134523636 and params:4
Importing getb at 135369510
with addr:134523812 and params:4
Importing getr_depth at 135369529
with addr:134523716 and params:8
Importing getg_depth at 135369548
with addr:134522180 and params:8
Importing getb_depth at 135369567
with addr:134523140 and params:8
Importing putpixel at 135369584
with addr:134521876 and params:16
Importing set_clip at 135369601
with addr:134523508 and params:20
Importing drawing_mode at 135369622
with addr:134521556 and params:16
Importing xor_mode at 135369639
with addr:134522340 and params:4
Importing solid_mode at 135369658
with addr:134521780 and params:0
Importing do_line at 135369674
with addr:134523188 and params:28
Importing triangle at 135369691
with addr:134521812 and params:32
Importing polygon at 135369707
with addr:134522132 and params:16
Importing rect at 135369720
with addr:134523652 and params:24
Importing do_circle at 135369738
with addr:134521588 and params:24
Importing circle at 135369753
with addr:134522676 and params:20
Importing circlefill at 135369772
with addr:134523700 and params:20
Importing do_ellipse at 135369791
with addr:134522020 and params:28
Importing ellipse at 135369807
with addr:134524036 and params:24
Importing ellipsefill at 135369827
with addr:134521668 and params:24
Importing calc_spline at 135369847
with addr:134522772 and params:16
Importing spline at 135369862
with addr:134521716 and params:40
Importing floodfill at 135369880
with addr:134522996 and params:16
Importing blit at 135369893
with addr:134523172 and params:32
Importing masked_blit at 135369913
with addr:134524132 and params:32
Importing stretch_blit at 135369934
with addr:134524052 and params:40
Importing stretch_sprite at 135369957
with addr:134523492 and params:24
Importing rotate_sprite at 135369979
with addr:134523764 and params:20
Importing rotate_scaled_sprite at 135370008
with addr:134522212 and params:24
Importing clear at 135370022
with addr:134522532 and params:4
Importing draw_trans_sprite at 135370048
with addr:134522100 and params:16
Importing text_mode at 135370066
with addr:134523300 and params:4
Importing textout at 135370082
with addr:134521652 and params:24
Importing textout_centre at 135370105
with addr:134522868 and params:24
Importing textout_justify at 135370129
with addr:134522484 and params:32
Importing textprintf at 135370148
with addr:134521620 and params:24
Importing textprintf_centre at 135370174
with addr:134522612 and params:24
Importing text_length at 135370194
with addr:134522756 and params:8
Importing text_height at 135370214
with addr:134521748 and params:4
Importing destroy_font at 135370235
with addr:134523396 and params:4
Importing play_fli at 135370252
with addr:134523892 and params:16
Importing play_memory_fli at 135370276
with addr:134522372 and params:16
Importing open_fli at 135370293
with addr:134523476 and params:4
Importing open_memory_fli at 135370317
with addr:134521636 and params:4
Importing close_fli at 135370335
with addr:134522404 and params:0
Importing next_fli_frame at 135370358
with addr:134522884 and params:4
Importing reset_fli_variables at 135370386
with addr:134521844 and params:0
Importing fli_bitmap at 135370405
with addr:134719300 and params:-1
Importing fli_pallete at 135370425
with addr:134719320 and params:-1
Importing fli_frame at 135370443
with addr:134720496 and params:-1
Importing install_sound at 135370465
with addr:134523924 and params:12
Importing set_volume at 135370484
with addr:134522116 and params:8
Importing load_datafile at 135370506
with addr:134524084 and params:4
Importing unload_datafile at 135370530
with addr:134523876 and params:4
Importing load_sample at 135370550
with addr:134522276 and params:4
Importing load_wav at 135370567
with addr:134522580 and params:4
Importing load_voc at 135370584
with addr:134522004 and params:4
Importing destroy_sample at 135370607
with addr:134523956 and params:4
Importing play_sample at 135370627
with addr:134522164 and params:20
Importing stop_sample at 135370647
with addr:134523940 and params:4
Importing adjust_sample at 135370669
with addr:134522356 and params:20
Importing load_midi at 135370687
with addr:134523044 and params:4
Importing destroy_midi at 135370708
with addr:134522388 and params:4
Importing play_midi at 135370726
with addr:134522260 and params:8
Importing play_looped_midi at 135370751
with addr:134523236 and params:12
Importing stop_midi at 135370769
with addr:134521956 and params:0
Importing midi_pause at 135370788
with addr:134523092 and params:0
Importing midi_resume at 135370808
with addr:134523364 and params:0
Importing midi_seek at 135370826
with addr:134522500 and params:4
Importing midi_out at 135370843
with addr:134522804 and params:8
Importing load_midi_patches at 135370869
with addr:134522308 and params:0
Importing packfile_password at 135370895
with addr:134523220 and params:4
Importing pack_fopen at 135370914
with addr:134523012 and params:8
Importing pack_fclose at 135370934
with addr:134522964 and params:4
Importing pack_fseek at 135370953
with addr:134523412 and params:8
Importing pack_fopen_chunk at 135370978
with addr:134521828 and params:8
Importing pack_fclose_chunk at 135371004
with addr:134523972 and params:4
Importing pack_igetw at 135371023
with addr:134523108 and params:4
Importing pack_igetl at 135371042
with addr:134522292 and params:4
Importing pack_iputw at 135371061
with addr:134522036 and params:8
Importing pack_iputl at 135371080
with addr:134522052 and params:8
Importing pack_mgetw at 135371099
with addr:134522436 and params:4
Importing pack_mgetl at 135371118
with addr:134524020 and params:4
Importing pack_mputw at 135371137
with addr:134522244 and params:8
Importing pack_mputl at 135371156
with addr:134523268 and params:8
Importing pack_fread at 135371175
with addr:134522948 and params:12
Importing pack_fwrite at 135371195
with addr:134523460 and params:12
Importing pack_fgets at 135371214
with addr:134522068 and params:12
Importing pack_fputs at 135371233
with addr:134522084 and params:8
Importing get_filename at 135371254
with addr:134522548 and params:4
Importing load_bitmap at 135371274
with addr:134522916 and params:8
Importing load_bmp at 135371291
with addr:134521604 and params:8
Importing load_lbm at 135371308
with addr:134523444 and params:8
Importing load_pcx at 135371325
with addr:134522196 and params:8
Importing load_tga at 135371342
with addr:134523204 and params:8
Importing save_bitmap at 135371362
with addr:134522660 and params:12
Importing save_bmp at 135371379
with addr:134523780 and params:12
Importing save_pcx at 135371396
with addr:134522596 and params:12
Importing save_tga at 135371413
with addr:134523076 and params:12
Importing create_rgb_table at 135371438
with addr:134523828 and params:1032
Importing create_light_table at 135371465
with addr:134524100 and params:1044
Importing create_trans_table at 135371492
with addr:134523124 and params:1044
Importing create_color_table at 135371519
with addr:134523028 and params:1036
Importing mouse_x at 135371535
with addr:134719296 and params:-1
Importing mouse_y at 135371551
with addr:134720484 and params:-1
Importing mouse_b at 135371567
with addr:134719316 and params:-1
Importing mouse_pos at 135371585
with addr:134720488 and params:-1
Importing freeze_mouse_flag at 135371611
with addr:134720344 and params:-1
Importing keypressed at 135371630
with addr:134522692 and params:0
Importing readkey at 135371646
with addr:134523748 and params:0
Importing dbuf at 135371659
with addr:134720560 and params:-1
Importing addressof at 135371677
with addr:134525100 and params:4
Importing exec_script at 135371697
with addr:134525120 and params:8
Importing add_script at 135371716
with addr:134524800 and params:4
Importing add_tiles_pack at 135371739
with addr:134525492 and params:4
Importing df_get_item_num at 135371763
with addr:134524416 and params:8
Importing df_get_item at 135371783
with addr:134524504 and params:8
Importing df_item at 135371799
with addr:134524540 and params:8
Importing df_dat at 135371814
with addr:134524564 and params:4
Importing df_count at 135371831
with addr:134524584 and params:8
Importing df_foreach at 135371850
with addr:134524636 and params:8
Importing bmp_line at 135371867
with addr:134524708 and params:8
Importing bmp_w at 135371881
with addr:134524744 and params:4
Importing bmp_h at 135371895
with addr:134524764 and params:4
Importing printf at 135371910
with addr:134523252 and params:4
Importing create_object_type at 135371937
with addr:134530064 and params:12
Importing create_weapon_type at 135371964
with addr:134530336 and params:4
Importing assign_weapon_handler at 135371994
with addr:134530444 and params:8
Importing  at 135372003

0:Address 0, size 0,Calling 79
Size of params:0


Executing function from init.sc!
 0:ENTER 135298772 
NOP 
NOP 
NOP 
 4:{a0(=$1076136184),$0000(=$0)}MOV
 12:{a0(=$0),a242(=$135372171)}ADD
 16:a0(=$135372171) PUSH (SP=3992) 
 20:{$0b2b(=$2859),$0004(=$4)}CALLEX
 32:{a245(=$3992),$0004(=$4)}ADD
 40:{a0(=$16777216),$000f(=$15)}MOV
 48:{a0(=$15),a242(=$135372171)}ADD
 52:a0(=$135372186) PUSH (SP=3992) 
 56:{$0b2b(=$2859),$0004(=$4)}CALLEX
 68:{a245(=$3992),$0004(=$4)}ADD
 76:{a0(=$536870912),$001f(=$31)}MOV
 84:{a0(=$31),a242(=$135372171)}ADD
 88:a0(=$135372202) PUSH (SP=3992) 
 92:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>int x, y;
284>int legframe, legtics;
285>BITMAP *bmp;
286>};
287>
288> 
289>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
290>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
291>typedef void weapon_type_t;	       
292>import int create_weapon_type(char *name);    
293>import int assign_weapon_handler(int typenum, seer_addr handler);
294>
295>#! 7 "scripts/imports.sh"
296>
297>
298>#! 7 "!!_internal_Script"
299>
300>export script_main;
301>export script_exit;
302>
303>
304>DATAFILE *dat;
305>BITMAP *ammo, *weapon, *projectile, *status;
306>int typenum;
307>
308>
309>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
310>{
311>    
312>
313>
314>
315>
316>
317>
318>	
319>}
320>
321>
322>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
323>{
324>    
325>
326>
327>
328>
329>
330>
331>
332>
333>}
334>
335>
336>void rpg(msg_t msg, player_t *pl)
337>{
338>    
339>
340>
341>
342>
343>
344>
345>
346>
347>}
348>
349>
350>
351>
352>
353>
354>int script_main()
355>{
356>    dat = load_datafile("data/rpg.dat");
357>    if (!dat)
358>      return -1;
359>
360>    ammo 	= df_dat(df_get_item(dat, "ammo"));
361>    weapon 	= df_dat(df_get_item(dat, "weapon"));
362>    projectile  = df_dat(df_get_item(dat, "ejected"));
363>    status 	= df_dat(df_get_item(dat, "status"));
364>
365>    typenum = create_weapon_type("rpg");
366>    assign_weapon_handler(typenum, addressof("rpg"));
367>    
368>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
369>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
370>       
371>    return 0;
372>}
373>
374>
375>
376>
377>
378>
379>
380>void script_exit()
381>{
382>    unload_datafile(dat);
383>}
384>
385>
386>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(8125eb8)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(8125f98)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(8126070,81260c8,8126120,8126178,81261d0)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(81262e8,8126340)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(8126428,8126480,81264d8)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(81265d0,8126638,8126690,81266e8,8126740)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(8126858)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(8126ce0,8126d38)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(8126e28)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(8126f00,8126f58,8126fb0,8127008)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(8127108,8127160)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(8127250)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(8127328,8127380,81273d8)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(81274d8)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(81275b8,8127620,8127678)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(8127780,81277d8,8127830,8127888)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(8127988,81279e0,8127a38)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(8127b28,8127b80,8127bd8)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(8127cd0,8127d28,8127d80,8127dd8)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(8127ed8)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(8127fa8)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(8128078)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(8128148,81281a0)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(8128280,81282d8)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(81283b8,8128410)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(81284f0,8128558,81285b0,8128608)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(8128708,8128770,81287c8,8128820,8128878)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(8128990,81289e8,8128a50,8128aa8)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(8128ba8)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8128f78,8128fd0,8129018,8129060)>...
Declaration of `do_line' as <(8128cf0,8128d58,8128db0,8128e08,8128e60,8128eb8,8128f10)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(8121138,81210b8,8121040,8120fe0,8120ef0,8120e80,8120e08,8120da8)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(8120af8,81135b8,8129968,8120cc0)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(81223c8,8118458,81184b0,8118508,8118990,81189e8)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(81351d0,8135228,8135270,81352b8)>...
Declaration of `do_circle' as <(8129630,8129698,81296f0,8129748,8135110,8135168)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(8135ae0,8135b48,8135ba0,8135bf8,8136128)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(8136208,8136270,81362c8,8136320,8136378)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8136e20,8136e78,8136ec0,8136f08)>...
Declaration of `do_ellipse' as <(81367f0,8136858,81368b0,8136908,8136960,81369b8,8136db8)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(8137078,811f980,811f9d8,811fa30,811fa88,811fae0)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(811fc00,811fc68,8120550,8120598,81205f0,8120648)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(8120768,81207d0,8120828,8120890)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(81209a0,8120a08,8121840)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(8121920,8121988,81219e0,8121a38)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(8121b38,8121ba0,8121c08,8121c60,8121cb8,8121d10,8121d68,8143db0)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(8143ef0,8143f58,8143fc0,8144018,8144070,81440c8,8144120,8144178)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(81442c0,8144328,8144390,81443e8,8144440,8144498,81444f0,8144548,81445a0,81445f8)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(8144760,81447c8,8144830,8144888,81448e0,8144938)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(8144a60,8144ac8,8144b30,8144b88,8144be0)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(8144d00,8144d68,8144dd0,8144e28,8144e80,8144ed8)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(8144ff8)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(81450e0,8145148,81451b0,8145208)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(8145308)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(81453d8,8145440,81454a8,8145510,8145568,81455c0)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(81456e8,8145750,81457b8,8145820,8145878,81458d0)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(81459f8,8145a60,8145ac8,8145b30,8145b88,8145be0,8145c38,8145c90)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(8145dd0,8145e38,8145ea0,8145ef8,8145f50,8145fa8,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(81460f0,8146158,81461c0,8146218,8146270,81462c8,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(8146408,8146470)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(8146560)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(8146648)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(8146728,8146790,81467f8,8146850)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(8146978,81469e0,8146a48,8146aa0)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(8146bd0)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(8146cb8)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(8146e18)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(8147078,81470d0,8147128)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(8147228,8147280)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(8147368)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(8147440)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(8147520)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(8147600)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(81476e0)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(81477c8)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(81478a8,8147910,8147968,81479c0,8147a18)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(8147b28)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(8147c10,8147c78,8147cd0,8147d28,8147d80)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(8147e90)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(8147f78)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(8148058,81480c0)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(81481a8,8148210,8148268)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(81484a0)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(8148570,81485d8)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(8148740)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(8148820,8148888)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(8148960)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(8148a40,8148aa8)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(8148b90,8148bf8)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(8148cc8)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(8148da8)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(8148e88)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(8148f68,8148fc0)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(81490b0,8149108)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(81491f8)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(81492d8)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(81493b8,8149410)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(8149500,8149558)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(8149648,81496b0,8149708)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(8149808,8149870,81498c8)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(81499c8,8149a30,8149a88)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(8149b88,8149bf0)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(8149ce8)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(8149dc8,8149e30)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(8149f20,8149f88)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(814a078,814a0e0)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(814a1d0,814a238)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(814a328,814a390)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(814a480,814a4e8,814a550)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(814a650,814a6b8,814a720)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(814a820,814a888,814a8f0)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(814a9f0,814aa58,814aac0)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(814abc8,814ac30,814ac88)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(814ad80,814ade8,814ae40,814ae98,814aef0,814af48)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(814b070,814b0d8,814b130,814b188,814b1e0,814b238)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(814b488,814b4e0,814b538)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(814b360,814b3c8,814b420,814b5d0)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(814ba98)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(814bb78,814bbe0)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(814bcd0)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(814bdb8)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(814bea0,814bf08)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(814bff8,814c060)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(814c150,814c1b8)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(814c298)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(814c368,814c3d0)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(814c580)>...
Declaration of `df_foreach' as <(814c4b0,814c518)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(814c690,814c6f8)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(814c7d8)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(814c8b8)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(814c998,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(814cb48,814cbb0,814cc08)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Reading declaration:type is a standard `int'
Declaration of `legframe'...
struct:member legframe added
(Short)Declaration of `legtics' as (null)...
struct:member legtics added
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
struct:member bmp added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(814cf68,814cfc0)>...
Defining type 'weapon_handler_t' as *(814cf68,814cfc0)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(814d0c8,814d120,814d188)>...
Defining type 'object_handler_t' as *(814d0c8,814d120,814d188)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(814d2e0)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(814d3d0,814d428)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *projectile, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `projectile' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(814d800,814d858,814d8c0)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(814d9c8,814da20,814da88)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void rpg(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `rpg' as <(814db88,814dbe0)>...
Address:8
=======================>>ENTERING function `rpg'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `rpg'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/rpg.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 13
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2903 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2934 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 18
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2903 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2934 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    projectile  = df_dat(df_get_item(dat, "ejected"));
Symbol:projectile
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 25
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2903 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2934 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 320: MOV a0 , 33
 328: ADD a0 , ES
 332: PUSH a0
 336: PUSH [DS+4]
 344: CALLEX 2903 , 8
 356: ADD SP , 8
 364: PUSH a0
 368: CALLEX 2934 , 4
 380: ADD SP , 4
 388: MOV [DS+20] , a0

>    typenum = create_weapon_type("rpg");
Symbol:typenum
Symbol:create_weapon_type
 396: MOV a0 , 40
 404: ADD a0 , ES
 408: PUSH a0
 412: CALLEX 3084 , 4
 424: ADD SP , 4
 432: MOV [DS+24] , a0

>    assign_weapon_handler(typenum, addressof("rpg"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 440: MOV a0 , 44
 448: ADD a0 , ES
 452: PUSH a0
 456: CALLEX 2797 , 4
 468: ADD SP , 4
 476: PUSH a0
 480: PUSH [DS+24]
 488: CALLEX 3114 , 8
 500: ADD SP , 8

>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 508: MOV a0 , 48
 516: ADD a0 , ES
Symbol:addressof
 520: PUSH a0
 524: MOV a1 , 57
 532: ADD a1 , ES
 536: PUSH a1
 540: CALLEX 2797 , 4
 552: MOV a1 , a0
 556: ADD SP , 4
 564: POP a0
Symbol:ammo
 568: PUSH [DS+8]
 576: PUSH a1
 580: PUSH a0
 584: CALLEX 3057 , 12
 596: ADD SP , 12

>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 604: MOV a0 , 69
 612: ADD a0 , ES
Symbol:addressof
 616: PUSH a0
 620: MOV a1 , 80
 628: ADD a1 , ES
 632: PUSH a1
 636: CALLEX 2797 , 4
 648: MOV a1 , a0
 652: ADD SP , 4
 660: POP a0
Symbol:weapon
 664: PUSH [DS+12]
 672: PUSH a1
 676: PUSH a0
 680: CALLEX 3057 , 12
 692: ADD SP , 12

>    return 0;
 700: MOV a0 , 0
 708: LEAVE 
 709: RET 
 710: LEAVE 
 711: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:712
=======================>>ENTERING function `script_exit'!
 712: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 716: PUSH [DS+4]
 724: CALLEX 1650 , 4
 736: ADD SP , 4
 744: LEAVE 
 745: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(814d0c8,814d120,814d188)'
 weapon_handler_t : `*(814cf68,814cfc0)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+712
 script_main : `()' at CS+12
      rpg : `(814db88,814dbe0)' at CS+8
 weapon_pickup : `(814d9c8,814da20,814da88)' at CS+4
 ammo_pickup : `(814d800,814d858,814d8c0)' at CS+0
  typenum : at DS+24
   status : `*' at DS+20
 projectile : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(814d3d0,814d428)' at 3114
 create_weapon_type : `(814d2e0)' at 3084
 create_object_type : `(814cb48,814cbb0,814cc08)' at 3057
   printf : `(814c998,...)' at 3030
    bmp_h : `(814c8b8)' at 3015
    bmp_w : `(814c7d8)' at 3001
 bmp_line : `(814c690,814c6f8)*' at 2987
 df_foreach : `(814c4b0,814c518)' at 2970
 df_count : `(814c368,814c3d0)' at 2951
   df_dat : `(814c298)*' at 2934
  df_item : `(814c150,814c1b8)*' at 2919
 df_get_item : `(814bff8,814c060)*' at 2903
 df_get_item_num : `(814bea0,814bf08)' at 2883
 add_tiles_pack : `(814bdb8)' at 2859
 add_script : `(814bcd0)' at 2836
 exec_script : `(814bb78,814bbe0)' at 2817
 addressof : `(814ba98)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(814b360,814b3c8,814b420,814b5d0)' at 2639
 create_trans_table : `(814b070,814b0d8,814b130,814b188,814b1e0,814b238)' at 2612
 create_light_table : `(814ad80,814ade8,814ae40,814ae98,814aef0,814af48)' at 2585
 create_rgb_table : `(814abc8,814ac30,814ac88)' at 2558
 save_tga : `(814a9f0,814aa58,814aac0)' at 2533
 save_pcx : `(814a820,814a888,814a8f0)' at 2516
 save_bmp : `(814a650,814a6b8,814a720)' at 2499
 save_bitmap : `(814a480,814a4e8,814a550)' at 2482
 load_tga : `(814a328,814a390)*' at 2462
 load_pcx : `(814a1d0,814a238)*' at 2445
 load_lbm : `(814a078,814a0e0)*' at 2428
 load_bmp : `(8149f20,8149f88)*' at 2411
 load_bitmap : `(8149dc8,8149e30)*' at 2394
 get_filename : `(8149ce8)*' at 2374
 pack_fputs : `(8149b88,8149bf0)' at 2353
 pack_fgets : `(81499c8,8149a30,8149a88)*' at 2334
 pack_fwrite : `(8149808,8149870,81498c8)' at 2315
 pack_fread : `(8149648,81496b0,8149708)' at 2295
 pack_mputl : `(8149500,8149558)' at 2276
 pack_mputw : `(81493b8,8149410)' at 2257
 pack_mgetl : `(81492d8)' at 2238
 pack_mgetw : `(81491f8)' at 2219
 pack_iputl : `(81490b0,8149108)' at 2200
 pack_iputw : `(8148f68,8148fc0)' at 2181
 pack_igetl : `(8148e88)' at 2162
 pack_igetw : `(8148da8)' at 2143
 pack_fclose_chunk : `(8148cc8)*' at 2124
 pack_fopen_chunk : `(8148b90,8148bf8)*' at 2098
 pack_fseek : `(8148a40,8148aa8)' at 2073
 pack_fclose : `(8148960)' at 2054
 pack_fopen : `(8148820,8148888)*' at 2034
 packfile_password : `(8148740)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(8148570,81485d8)' at 1963
 midi_seek : `(81484a0)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(81481a8,8148210,8148268)' at 1871
 play_midi : `(8148058,81480c0)' at 1846
 destroy_midi : `(8147f78)' at 1828
 load_midi : `(8147e90)*' at 1807
 adjust_sample : `(8147c10,8147c78,8147cd0,8147d28,8147d80)' at 1789
 stop_sample : `(8147b28)' at 1767
 play_sample : `(81478a8,8147910,8147968,81479c0,8147a18)' at 1747
 destroy_sample : `(81477c8)' at 1727
 load_voc : `(81476e0)*' at 1704
 load_wav : `(8147600)*' at 1687
 load_sample : `(8147520)*' at 1670
 unload_datafile : `(8147440)' at 1650
 load_datafile : `(8147368)*' at 1626
 set_volume : `(8147228,8147280)' at 1604
 install_sound : `(8147078,81470d0,8147128)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(8146e18)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(8146cb8)' at 1437
 open_fli : `(8146bd0)' at 1413
 play_memory_fli : `(8146978,81469e0,8146a48,8146aa0)' at 1396
 play_fli : `(8146728,8146790,81467f8,8146850)' at 1372
 destroy_font : `(8146648)' at 1355
 text_height : `(8146560)' at 1334
 text_length : `(8146408,8146470)' at 1314
 textprintf_centre : `(81460f0,8146158,81461c0,8146218,8146270,81462c8,...)' at 1294
 textprintf : `(8145dd0,8145e38,8145ea0,8145ef8,8145f50,8145fa8,...)' at 1268
 textout_justify : `(81459f8,8145a60,8145ac8,8145b30,8145b88,8145be0,8145c38,8145c90)' at 1249
 textout_centre : `(81456e8,8145750,81457b8,8145820,8145878,81458d0)' at 1225
  textout : `(81453d8,8145440,81454a8,8145510,8145568,81455c0)' at 1202
 text_mode : `(8145308)' at 1186
 draw_trans_sprite : `(81450e0,8145148,81451b0,8145208)' at 1168
    clear : `(8144ff8)' at 1142
 rotate_scaled_sprite : `(8144d00,8144d68,8144dd0,8144e28,8144e80,8144ed8)' at 1128
 rotate_sprite : `(8144a60,8144ac8,8144b30,8144b88,8144be0)' at 1099
 stretch_sprite : `(8144760,81447c8,8144830,8144888,81448e0,8144938)' at 1077
 stretch_blit : `(81442c0,8144328,8144390,81443e8,8144440,8144498,81444f0,8144548,81445a0,81445f8)' at 1054
 masked_blit : `(8143ef0,8143f58,8143fc0,8144018,8144070,81440c8,8144120,8144178)' at 1033
     blit : `(8121b38,8121ba0,8121c08,8121c60,8121cb8,8121d10,8121d68,8143db0)' at 1013
 floodfill : `(8121920,8121988,81219e0,8121a38)' at 1000
   spline : `(81209a0,8120a08,8121840)' at 982
 calc_spline : `(8120768,81207d0,8120828,8120890)' at 967
 ellipsefill : `(811fc00,811fc68,8120550,8120598,81205f0,8120648)' at 947
  ellipse : `(8137078,811f980,811f9d8,811fa30,811fa88,811fae0)' at 927
 do_ellipse : `(81367f0,8136858,81368b0,8136908,8136960,81369b8,8136db8)' at 911
 circlefill : `(8136208,8136270,81362c8,8136320,8136378)' at 892
   circle : `(8135ae0,8135b48,8135ba0,8135bf8,8136128)' at 873
 do_circle : `(8129630,8129698,81296f0,8129748,8135110,8135168)' at 858
     rect : `(81223c8,8118458,81184b0,8118508,8118990,81189e8)' at 840
  polygon : `(8120af8,81135b8,8129968,8120cc0)' at 827
 triangle : `(8121138,81210b8,8121040,8120fe0,8120ef0,8120e80,8120e08,8120da8)' at 811
  do_line : `(8128cf0,8128d58,8128db0,8128e08,8128e60,8128eb8,8128f10)' at 794
 solid_mode : `()' at 778
 xor_mode : `(8128ba8)' at 759
 drawing_mode : `(8128990,81289e8,8128a50,8128aa8)' at 742
 set_clip : `(8128708,8128770,81287c8,8128820,8128878)' at 721
 putpixel : `(81284f0,8128558,81285b0,8128608)' at 704
 getb_depth : `(81283b8,8128410)' at 687
 getg_depth : `(8128280,81282d8)' at 668
 getr_depth : `(8128148,81281a0)' at 649
     getb : `(8128078)' at 630
     getg : `(8127fa8)' at 617
     getr : `(8127ed8)' at 604
 makecol_depth : `(8127cd0,8127d28,8127d80,8127dd8)' at 591
 makecol8 : `(8127b28,8127b80,8127bd8)' at 569
  makecol : `(8127988,81279e0,8127a38)' at 552
 bestfit_color : `(8127780,81277d8,8127830,8127888)' at 536
 generate_optimized_palette : `(81275b8,8127620,8127678)' at 514
 generate_332_palette : `(81274d8)' at 479
 get_pallete_range : `(8127328,8127380,81273d8)' at 450
 get_pallete : `(8127250)' at 424
 get_color : `(8127108,8127160)' at 404
 set_pallete_range : `(8126f00,8126f58,8126fb0,8127008)' at 386
 set_pallete : `(8126e28)' at 360
 set_color : `(8126ce0,8126d38)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(8126858)' at 288
 create_sub_bitmap : `(81265d0,8126638,8126690,81266e8,8126740)*' at 265
 create_bitmap_ex : `(8126428,8126480,81264d8)*' at 239
 create_bitmap : `(81262e8,8126340)*' at 214
 set_gfx_mode : `(8126070,81260c8,8126120,8126178,81261d0)' at 192
 set_color_conversion : `(8125f98)' at 171
 set_color_depth : `(8125eb8)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:746
Inits size:0
Consts size:94
Data size:28
Stack size:4000
REALLOC from 4090 to 4712!!
Doing CleanUp.....................................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135585311
with addr:134523620 and params:0
Importing allegro_exit at 135585332
with addr:134523572 and params:0
Importing install_mouse at 135585354
with addr:134522724 and params:0
Importing install_timer at 135585376
with addr:134523556 and params:0
Importing install_keyboard at 135585401
with addr:134523524 and params:0
Importing screen at 135585416
with addr:134719304 and params:-1
Importing set_color_depth at 135585440
with addr:134523604 and params:4
Importing set_color_conversion at 135585469
with addr:134521924 and params:4
Importing set_gfx_mode at 135585490
with addr:134521700 and params:20
Importing create_bitmap at 135585512
with addr:134522932 and params:8
Importing create_bitmap_ex at 135585537
with addr:134522708 and params:12
Importing create_sub_bitmap at 135585563
with addr:134521860 and params:20
Importing destroy_bitmap at 135585586
with addr:134523428 and params:4
Importing rgb_map at 135585602
with addr:134720500 and params:-1
Importing color_map at 135585620
with addr:134720492 and params:-1
Importing set_color at 135585638
with addr:134523380 and params:8
Importing set_pallete at 135585658
with addr:134522148 and params:1024
Importing set_pallete_range at 135585684
with addr:134522228 and params:1036
Importing get_color at 135585702
with addr:134523316 and params:8
Importing get_pallete at 135585722
with addr:134521972 and params:1024
Importing get_pallete_range at 135585748
with addr:134524116 and params:1032
Importing generate_332_palette at 135585777
with addr:134521572 and params:1024
Importing generate_optimized_palette at 135585812
with addr:134523668 and params:1284
Importing bestfit_color at 135585834
with addr:134522820 and params:1036
Importing makecol at 135585850
with addr:134523988 and params:12
Importing makecol8 at 135585867
with addr:134524068 and params:12
Importing makecol_depth at 135585889
with addr:134522564 and params:16
Importing getr at 135585902
with addr:134522788 and params:4
Importing getg at 135585915
with addr:134523636 and params:4
Importing getb at 135585928
with addr:134523812 and params:4
Importing getr_depth at 135585947
with addr:134523716 and params:8
Importing getg_depth at 135585966
with addr:134522180 and params:8
Importing getb_depth at 135585985
with addr:134523140 and params:8
Importing putpixel at 135586002
with addr:134521876 and params:16
Importing set_clip at 135586019
with addr:134523508 and params:20
Importing drawing_mode at 135586040
with addr:134521556 and params:16
Importing xor_mode at 135586057
with addr:134522340 and params:4
Importing solid_mode at 135586076
with addr:134521780 and params:0
Importing do_line at 135586092
with addr:134523188 and params:28
Importing triangle at 135586109
with addr:134521812 and params:32
Importing polygon at 135586125
with addr:134522132 and params:16
Importing rect at 135586138
with addr:134523652 and params:24
Importing do_circle at 135586156
with addr:134521588 and params:24
Importing circle at 135586171
with addr:134522676 and params:20
Importing circlefill at 135586190
with addr:134523700 and params:20
Importing do_ellipse at 135586209
with addr:134522020 and params:28
Importing ellipse at 135586225
with addr:134524036 and params:24
Importing ellipsefill at 135586245
with addr:134521668 and params:24
Importing calc_spline at 135586265
with addr:134522772 and params:16
Importing spline at 135586280
with addr:134521716 and params:40
Importing floodfill at 135586298
with addr:134522996 and params:16
Importing blit at 135586311
with addr:134523172 and params:32
Importing masked_blit at 135586331
with addr:134524132 and params:32
Importing stretch_blit at 135586352
with addr:134524052 and params:40
Importing stretch_sprite at 135586375
with addr:134523492 and params:24
Importing rotate_sprite at 135586397
with addr:134523764 and params:20
Importing rotate_scaled_sprite at 135586426
with addr:134522212 and params:24
Importing clear at 135586440
with addr:134522532 and params:4
Importing draw_trans_sprite at 135586466
with addr:134522100 and params:16
Importing text_mode at 135586484
with addr:134523300 and params:4
Importing textout at 135586500
with addr:134521652 and params:24
Importing textout_centre at 135586523
with addr:134522868 and params:24
Importing textout_justify at 135586547
with addr:134522484 and params:32
Importing textprintf at 135586566
with addr:134521620 and params:24
Importing textprintf_centre at 135586592
with addr:134522612 and params:24
Importing text_length at 135586612
with addr:134522756 and params:8
Importing text_height at 135586632
with addr:134521748 and params:4
Importing destroy_font at 135586653
with addr:134523396 and params:4
Importing play_fli at 135586670
with addr:134523892 and params:16
Importing play_memory_fli at 135586694
with addr:134522372 and params:16
Importing open_fli at 135586711
with addr:134523476 and params:4
Importing open_memory_fli at 135586735
with addr:134521636 and params:4
Importing close_fli at 135586753
with addr:134522404 and params:0
Importing next_fli_frame at 135586776
with addr:134522884 and params:4
Importing reset_fli_variables at 135586804
with addr:134521844 and params:0
Importing fli_bitmap at 135586823
with addr:134719300 and params:-1
Importing fli_pallete at 135586843
with addr:134719320 and params:-1
Importing fli_frame at 135586861
with addr:134720496 and params:-1
Importing install_sound at 135586883
with addr:134523924 and params:12
Importing set_volume at 135586902
with addr:134522116 and params:8
Importing load_datafile at 135586924
with addr:134524084 and params:4
Importing unload_datafile at 135586948
with addr:134523876 and params:4
Importing load_sample at 135586968
with addr:134522276 and params:4
Importing load_wav at 135586985
with addr:134522580 and params:4
Importing load_voc at 135587002
with addr:134522004 and params:4
Importing destroy_sample at 135587025
with addr:134523956 and params:4
Importing play_sample at 135587045
with addr:134522164 and params:20
Importing stop_sample at 135587065
with addr:134523940 and params:4
Importing adjust_sample at 135587087
with addr:134522356 and params:20
Importing load_midi at 135587105
with addr:134523044 and params:4
Importing destroy_midi at 135587126
with addr:134522388 and params:4
Importing play_midi at 135587144
with addr:134522260 and params:8
Importing play_looped_midi at 135587169
with addr:134523236 and params:12
Importing stop_midi at 135587187
with addr:134521956 and params:0
Importing midi_pause at 135587206
with addr:134523092 and params:0
Importing midi_resume at 135587226
with addr:134523364 and params:0
Importing midi_seek at 135587244
with addr:134522500 and params:4
Importing midi_out at 135587261
with addr:134522804 and params:8
Importing load_midi_patches at 135587287
with addr:134522308 and params:0
Importing packfile_password at 135587313
with addr:134523220 and params:4
Importing pack_fopen at 135587332
with addr:134523012 and params:8
Importing pack_fclose at 135587352
with addr:134522964 and params:4
Importing pack_fseek at 135587371
with addr:134523412 and params:8
Importing pack_fopen_chunk at 135587396
with addr:134521828 and params:8
Importing pack_fclose_chunk at 135587422
with addr:134523972 and params:4
Importing pack_igetw at 135587441
with addr:134523108 and params:4
Importing pack_igetl at 135587460
with addr:134522292 and params:4
Importing pack_iputw at 135587479
with addr:134522036 and params:8
Importing pack_iputl at 135587498
with addr:134522052 and params:8
Importing pack_mgetw at 135587517
with addr:134522436 and params:4
Importing pack_mgetl at 135587536
with addr:134524020 and params:4
Importing pack_mputw at 135587555
with addr:134522244 and params:8
Importing pack_mputl at 135587574
with addr:134523268 and params:8
Importing pack_fread at 135587593
with addr:134522948 and params:12
Importing pack_fwrite at 135587613
with addr:134523460 and params:12
Importing pack_fgets at 135587632
with addr:134522068 and params:12
Importing pack_fputs at 135587651
with addr:134522084 and params:8
Importing get_filename at 135587672
with addr:134522548 and params:4
Importing load_bitmap at 135587692
with addr:134522916 and params:8
Importing load_bmp at 135587709
with addr:134521604 and params:8
Importing load_lbm at 135587726
with addr:134523444 and params:8
Importing load_pcx at 135587743
with addr:134522196 and params:8
Importing load_tga at 135587760
with addr:134523204 and params:8
Importing save_bitmap at 135587780
with addr:134522660 and params:12
Importing save_bmp at 135587797
with addr:134523780 and params:12
Importing save_pcx at 135587814
with addr:134522596 and params:12
Importing save_tga at 135587831
with addr:134523076 and params:12
Importing create_rgb_table at 135587856
with addr:134523828 and params:1032
Importing create_light_table at 135587883
with addr:134524100 and params:1044
Importing create_trans_table at 135587910
with addr:134523124 and params:1044
Importing create_color_table at 135587937
with addr:134523028 and params:1036
Importing mouse_x at 135587953
with addr:134719296 and params:-1
Importing mouse_y at 135587969
with addr:134720484 and params:-1
Importing mouse_b at 135587985
with addr:134719316 and params:-1
Importing mouse_pos at 135588003
with addr:134720488 and params:-1
Importing freeze_mouse_flag at 135588029
with addr:134720344 and params:-1
Importing keypressed at 135588048
with addr:134522692 and params:0
Importing readkey at 135588064
with addr:134523748 and params:0
Importing dbuf at 135588077
with addr:134720560 and params:-1
Importing addressof at 135588095
with addr:134525100 and params:4
Importing exec_script at 135588115
with addr:134525120 and params:8
Importing add_script at 135588134
with addr:134524800 and params:4
Importing add_tiles_pack at 135588157
with addr:134525492 and params:4
Importing df_get_item_num at 135588181
with addr:134524416 and params:8
Importing df_get_item at 135588201
with addr:134524504 and params:8
Importing df_item at 135588217
with addr:134524540 and params:8
Importing df_dat at 135588232
with addr:134524564 and params:4
Importing df_count at 135588249
with addr:134524584 and params:8
Importing df_foreach at 135588268
with addr:134524636 and params:8
Importing bmp_line at 135588285
with addr:134524708 and params:8
Importing bmp_w at 135588299
with addr:134524744 and params:4
Importing bmp_h at 135588313
with addr:134524764 and params:4
Importing printf at 135588328
with addr:134523252 and params:4
Importing create_object_type at 135588355
with addr:134530064 and params:12
Importing create_weapon_type at 135588382
with addr:134530336 and params:4
Importing assign_weapon_handler at 135588412
with addr:134530444 and params:8
Importing  at 135588421

0:Address 0, size 0,Calling 105
Size of params:0


Executing function from rpg.sc!
 12:ENTER 135414984 
NOP 
NOP 
NOP 
 16:{a0(=$1076136184),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135589175)}ADD
 28:a0(=$135589175) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$56623808),a0(=$135602832)}MOV
 60:{a0(=$135602832),[4]DS(=$135602832)}MOV
 68:a0(=$135602832) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$000d(=$13)}MOV
 100:{a0(=$13),a242(=$135589175)}ADD
 104:a0(=$135589188) PUSH (SP=3992) 
 108:[4]DS(=$135602832) PUSH (SP=3988) 
 116:{$0b57(=$2903),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135602832) PUSH (SP=3992) 
 140:{$0b76(=$2934),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$48235328),a0(=$135607280)}MOV
 168:{a0(=$135607280),$0012(=$18)}MOV
 176:{a0(=$18),a242(=$135589175)}ADD
 180:a0(=$135589193) PUSH (SP=3992) 
 184:[4]DS(=$135602832) PUSH (SP=3988) 
 192:{$0b57(=$2903),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$135603088) PUSH (SP=3992) 
 216:{$0b76(=$2934),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$41943616),a0(=$135605920)}MOV
 244:{a0(=$135605920),$0019(=$25)}MOV
 252:{a0(=$25),a242(=$135589175)}ADD
 256:a0(=$135589200) PUSH (SP=3992) 
 260:[4]DS(=$135602832) PUSH (SP=3988) 
 268:{$0b57(=$2903),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$0) PUSH (SP=3992) 
 292:{$0b76(=$2934),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$41943680),a0(=$0)}MOV
 320:{a0(=$0),$0021(=$33)}MOV
 328:{a0(=$33),a242(=$135589175)}ADD
 332:a0(=$135589208) PUSH (SP=3992) 
 336:[4]DS(=$135602832) PUSH (SP=3988) 
 344:{$0b57(=$2903),$0008(=$8)}CALLEX
 356:{a245(=$3988),$0008(=$8)}ADD
 364:a0(=$135603072) PUSH (SP=3992) 
 368:{$0b76(=$2934),$0004(=$4)}CALLEX
 380:{a245(=$3992),$0004(=$4)}ADD
 388:{[20]DS(=$39846528),a0(=$135605016)}MOV
 396:{a0(=$135605016),$0028(=$40)}MOV
 404:{a0(=$40),a242(=$135589175)}ADD
 408:a0(=$135589215) PUSH (SP=3992) 
 412:{$0c0c(=$3084),$0004(=$4)}CALLEX
 424:{a245(=$3992),$0004(=$4)}ADD
 432:{[24]DS(=$33554944),a0(=$0)}MOV
 440:{a0(=$0),$002c(=$44)}MOV
 448:{a0(=$44),a242(=$135589175)}ADD
 452:a0(=$135589219) PUSH (SP=3992) 
 456:{$0aed(=$2797),$0004(=$4)}CALLEX
 468:{a245(=$3992),$0004(=$4)}ADD
 476:a0(=$-1) PUSH (SP=3992) 
 480:[24]DS(=$0) PUSH (SP=3988) 
 488:{$0c2a(=$3114),$0008(=$8)}CALLEX
 500:{a245(=$3988),$0008(=$8)}ADD
 508:{a0(=$0),$0030(=$48)}MOV
 516:{a0(=$48),a242(=$135589175)}ADD
 520:a0(=$135589223) PUSH (SP=3992) 
 524:{a1(=$1076136184),$0039(=$57)}MOV
 532:{a1(=$57),a242(=$135589175)}ADD
 536:a1(=$135589232) PUSH (SP=3988) 
 540:{$0aed(=$2797),$0004(=$4)}CALLEX
 552:{a1(=$135589232),a0(=$-1)}MOV
 556:{a245(=$3988),$0004(=$4)}ADD
 564:a0(=$-1) POP (SP=3996) 
 568:[8]DS(=$135607280) PUSH (SP=3992) 
 576:a1(=$-1) PUSH (SP=3988) 
 580:a0(=$135589223) PUSH (SP=3984) 
 584:{$0bf1(=$3057),$000c(=$12)}CALLEX
 596:{a245(=$3984),$000c(=$12)}ADD
 604:{a0(=$0),$0045(=$69)}MOV
 612:{a0(=$69),a242(=$135589175)}ADD
 616:a0(=$135589244) PUSH (SP=3992) 
 620:{a1(=$-1),$0050(=$80)}MOV
 628:{a1(=$80),a242(=$135589175)}ADD
 632:a1(=$135589255) PUSH (SP=3988) 
 636:{$0aed(=$2797),$0004(=$4)}CALLEX
 648:{a1(=$135589255),a0(=$-1)}MOV
 652:{a245(=$3988),$0004(=$4)}ADD
 660:a0(=$-1) POP (SP=3996) 
 664:[12]DS(=$135605920) PUSH (SP=3992) 
 672:a1(=$-1) PUSH (SP=3988) 
 676:a0(=$135589244) PUSH (SP=3984) 
 680:{$0bf1(=$3057),$000c(=$12)}CALLEX
 692:{a245(=$3984),$000c(=$12)}ADD
 700:{a0(=$1),$0000(=$0)}MOV
 708:LEAVE 
RET SP=4000,CP=4000
EXIT

 104:{a245(=$3992),$0004(=$4)}ADD
 112:{a0(=$0),$002e(=$46)}MOV
 120:{a0(=$46),a242(=$135372171)}ADD
 124:a0(=$135372217) PUSH (SP=3992) 
 128:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>int x, y;
284>int legframe, legtics;
285>BITMAP *bmp;
286>};
287>
288> 
289>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
290>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
291>typedef void weapon_type_t;	       
292>import int create_weapon_type(char *name);    
293>import int assign_weapon_handler(int typenum, seer_addr handler);
294>
295>#! 7 "scripts/imports.sh"
296>
297>
298>#! 7 "!!_internal_Script"
299>
300>export script_main;
301>export script_exit;
302>
303>
304>DATAFILE *dat;
305>BITMAP *ammo, *weapon, *status;
306>int typenum;
307>
308>
309>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
310>{
311>    
312>
313>
314>
315>
316>
317>
318>	
319>}
320>
321>
322>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
323>{
324>    
325>
326>
327>
328>
329>
330>
331>
332>
333>}
334>
335>
336>void shotgun(msg_t msg, player_t *pl)
337>{
338>    
339>
340>
341>
342>
343>
344>
345>
346>
347>}
348>
349>
350>
351>
352>
353>
354>int script_main()
355>{
356>    dat = load_datafile("data/shotgun.dat");
357>    if (!dat)
358>      return -1;
359>
360>    ammo 	= df_dat(df_get_item(dat, "ammo"));
361>    weapon 	= df_dat(df_get_item(dat, "weapon"));
362>    status 	= df_dat(df_get_item(dat, "status"));
363>
364>    typenum = create_weapon_type("shotgun");
365>    assign_weapon_handler(typenum, addressof("shotgun"));
366>    
367>    create_object_type("shotgun;ammo", addressof("ammo_pickup"), ammo);
368>    create_object_type("shotgun;weapon", addressof("weapon_pickup"), weapon);
369>       
370>    return 0;
371>}
372>
373>
374>
375>
376>
377>
378>
379>void script_exit()
380>{
381>    unload_datafile(dat);
382>}
383>
384>
385>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(8124f18)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(8157118)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(81571f0,8157248,81572a0,81572f8,8157350)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(8157468,815a9b0)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(815aa98,815aaf0,815ab48)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(815ac40,815aca8,815ad00,815ad58,815adb0)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(815aec8)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(815b350,815b3a8)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(815b498)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(815b570,815b5c8,815b620,815b678)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(815b778,815b7d0)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(815b8c0)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(815b998,815b9f0,815ba48)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(815bb48)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(815bc28,815bc90,815bce8)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(815bdf0,815be48,815bea0,815bef8)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(815bff8,815c050,815c0a8)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(815c198,815c1f0,815c248)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(815c340,815c398,815c3f0,815c448)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(815c548)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(815c618)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(815c6e8)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(815c7b8,815c810)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(815c8f0,815c948)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(815ca28,815ca80)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(815cb60,815cbc8,815cc20,815cc78)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(815cd78,815cde0,815ce38,815ce90,815cee8)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(815d000,815d058,815d0c0,815d118)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(815d218)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(815d5e8,815d640,815d688,815d6d0)>...
Declaration of `do_line' as <(815d360,815d3c8,815d420,815d478,815d4d0,815d528,815d580)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(815d840,815d8a8,815d900,815d958,815d9b0,815da08,815da60,815dab8)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(815dbf8,815dc60,815dcb8,815dd20)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(815de20,815de88,815dee0,815df38,815df90,815dfe8)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(815e338,815e390,815e3d8,815e420)>...
Declaration of `do_circle' as <(815e108,815e170,815e1c8,815e220,815e278,815e2d0)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(815e580,815e5e8,815e640,815e698,815e6f0)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(815e800,815e868,815e8c0,815e918,815e970)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(815ecd8,815ed30,815ed78,815edc0)>...
Declaration of `do_ellipse' as <(815ea50,815eab8,815eb10,815eb68,815ebc0,815ec18,815ec70)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(815ef30,815ef98,815eff0,815f048,815f0a0,815f0f8)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(815f218,815f280,815f2d8,815f330,815f388,815f3e0)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(815f500,815f568,815f5c0,815f628)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(815f738,815f7a0,815f808)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(815f8f8,815f960,815f9b8,815fa10)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(815fb10,815fb78,815fbe0,815fc38,815fc90,815fce8,815fd40,815fd98)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(815fed8,815ff40,815ffa8,8160000,8160058,81600b0,8160108,8160160)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(81602a8,8160310,8160378,81603d0,8160428,8160480,81604d8,8160530,8160588,81605e0)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(8160748,81607b0,8160818,8160870,81608c8,8160920)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(8160a48,8160ab0,8160b18,8160b70,8160bc8)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(8160ce8,8160d50,8160db8,8160e10,8160e68,8160ec0)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(8160fe0)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(81610c8,8161130,8161198,81611f0)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(81612f0)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(81613c0,8161428,8161490,81614f8,8161550,81615a8)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(81616d0,8161738,81617a0,8161808,8161860,81618b8)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(81619e0,8161a48,8161ab0,8161b18,8161b70,8161bc8,8161c20,8161c78)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(8161db8,8161e20,8161e88,8161ee0,8161f38,8161f90,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(81620d8,8162140,81621a8,8162200,8162258,81622b0,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(81623f0,8162458)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(8162548)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(8162630)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(8162710,8162778,81627e0,8162838)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(8162970,81629d8,8162a40,8162a98)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(8162ba0)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(8162c88)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(8162de8)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(8163048,81630a0,81630f8)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(81631f8,8163250)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(8163338)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(8163420)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(8163500)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(81635e0)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(81636c0)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(81637a8)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(8163888,81638f0,8163948,81639a0,81639f8)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(8163b08)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(8163bf0,8163c58,8163cb0,8163d08,8163d60)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(8163e70)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(8163f58)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(8164038,81640a0)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(8164188,81641f0,8164248)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(81644a0)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(8164570,81645d8)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(8164730)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(8164810,8164878)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(8164968)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(8164a48,8164ab0)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(8164b98,8164c00)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(8164ce8)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(8164db8)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(8164e98)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(8164f78,8164fd0)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(81650c0,8165118)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(8165208)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(81652e8)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(81653c8,8165420)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(8165510,8165568)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(8165658,81656c0,8165718)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(8165818,8165880,81658d8)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(81659d8,8165a40,8165a98)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(8165b98,8165c00)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(8165cf8)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(8165dd8,8165e40)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(8165f30,8165f98)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(8166088,81660f0)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(81661e0,8166248)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(8166338,81663a0)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(8166490,81664f8,8166560)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(8166640,81666a8,8166710)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(8166810,8166878,81668e0)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(81669c0,8166a28,8166a90)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(8166b78,8166be0,8166c38)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(8166d30,8166d98,8166df0,8166e48,8166ea0,8166ef8)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(8167020,8167088,81670e0,8167138,8167190,81671e8)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(8167438,8167490,81674e8)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(8167310,8167378,81673d0,8167560)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(8167a28)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(8167af8,8167b60)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(8167c50)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(8167d38)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(8167e20,8167e88)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(8167f78,8167fe0)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(81680d0,8168138)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(8168218)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(81682e8,8168350)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(81684e8)>...
Declaration of `df_foreach' as <(8168418,8168480)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(81685f8,8168660)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(8168740)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(8168820)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(8168900,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(8168ab0,8168b18,8168b70)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Reading declaration:type is a standard `int'
Declaration of `legframe'...
struct:member legframe added
(Short)Declaration of `legtics' as (null)...
struct:member legtics added
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
struct:member bmp added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(8168ef0,8168f48)>...
Defining type 'weapon_handler_t' as *(8168ef0,8168f48)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(8169050,81690a8,8169110)>...
Defining type 'object_handler_t' as *(8169050,81690a8,8169110)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(8169268)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(8169358,81693b0)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(8169738,8169790,81697f8)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(8169900,8169958,81699c0)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void shotgun(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `shotgun' as <(8169ac0,8169b18)>...
Address:8
=======================>>ENTERING function `shotgun'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `shotgun'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/shotgun.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 17
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2903 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2934 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 22
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2903 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2934 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 29
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2903 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2934 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    typenum = create_weapon_type("shotgun");
Symbol:typenum
Symbol:create_weapon_type
 320: MOV a0 , 36
 328: ADD a0 , ES
 332: PUSH a0
 336: CALLEX 3084 , 4
 348: ADD SP , 4
 356: MOV [DS+20] , a0

>    assign_weapon_handler(typenum, addressof("shotgun"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 364: MOV a0 , 44
 372: ADD a0 , ES
 376: PUSH a0
 380: CALLEX 2797 , 4
 392: ADD SP , 4
 400: PUSH a0
 404: PUSH [DS+20]
 412: CALLEX 3114 , 8
 424: ADD SP , 8

>    create_object_type("shotgun;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 432: MOV a0 , 52
 440: ADD a0 , ES
Symbol:addressof
 444: PUSH a0
 448: MOV a1 , 65
 456: ADD a1 , ES
 460: PUSH a1
 464: CALLEX 2797 , 4
 476: MOV a1 , a0
 480: ADD SP , 4
 488: POP a0
Symbol:ammo
 492: PUSH [DS+8]
 500: PUSH a1
 504: PUSH a0
 508: CALLEX 3057 , 12
 520: ADD SP , 12

>    create_object_type("shotgun;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 528: MOV a0 , 77
 536: ADD a0 , ES
Symbol:addressof
 540: PUSH a0
 544: MOV a1 , 92
 552: ADD a1 , ES
 556: PUSH a1
 560: CALLEX 2797 , 4
 572: MOV a1 , a0
 576: ADD SP , 4
 584: POP a0
Symbol:weapon
 588: PUSH [DS+12]
 596: PUSH a1
 600: PUSH a0
 604: CALLEX 3057 , 12
 616: ADD SP , 12

>    return 0;
 624: MOV a0 , 0
 632: LEAVE 
 633: RET 
 634: LEAVE 
 635: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:636
=======================>>ENTERING function `script_exit'!
 636: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 640: PUSH [DS+4]
 648: CALLEX 1650 , 4
 660: ADD SP , 4
 668: LEAVE 
 669: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(8169050,81690a8,8169110)'
 weapon_handler_t : `*(8168ef0,8168f48)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+636
 script_main : `()' at CS+12
  shotgun : `(8169ac0,8169b18)' at CS+8
 weapon_pickup : `(8169900,8169958,81699c0)' at CS+4
 ammo_pickup : `(8169738,8169790,81697f8)' at CS+0
  typenum : at DS+20
   status : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(8169358,81693b0)' at 3114
 create_weapon_type : `(8169268)' at 3084
 create_object_type : `(8168ab0,8168b18,8168b70)' at 3057
   printf : `(8168900,...)' at 3030
    bmp_h : `(8168820)' at 3015
    bmp_w : `(8168740)' at 3001
 bmp_line : `(81685f8,8168660)*' at 2987
 df_foreach : `(8168418,8168480)' at 2970
 df_count : `(81682e8,8168350)' at 2951
   df_dat : `(8168218)*' at 2934
  df_item : `(81680d0,8168138)*' at 2919
 df_get_item : `(8167f78,8167fe0)*' at 2903
 df_get_item_num : `(8167e20,8167e88)' at 2883
 add_tiles_pack : `(8167d38)' at 2859
 add_script : `(8167c50)' at 2836
 exec_script : `(8167af8,8167b60)' at 2817
 addressof : `(8167a28)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(8167310,8167378,81673d0,8167560)' at 2639
 create_trans_table : `(8167020,8167088,81670e0,8167138,8167190,81671e8)' at 2612
 create_light_table : `(8166d30,8166d98,8166df0,8166e48,8166ea0,8166ef8)' at 2585
 create_rgb_table : `(8166b78,8166be0,8166c38)' at 2558
 save_tga : `(81669c0,8166a28,8166a90)' at 2533
 save_pcx : `(8166810,8166878,81668e0)' at 2516
 save_bmp : `(8166640,81666a8,8166710)' at 2499
 save_bitmap : `(8166490,81664f8,8166560)' at 2482
 load_tga : `(8166338,81663a0)*' at 2462
 load_pcx : `(81661e0,8166248)*' at 2445
 load_lbm : `(8166088,81660f0)*' at 2428
 load_bmp : `(8165f30,8165f98)*' at 2411
 load_bitmap : `(8165dd8,8165e40)*' at 2394
 get_filename : `(8165cf8)*' at 2374
 pack_fputs : `(8165b98,8165c00)' at 2353
 pack_fgets : `(81659d8,8165a40,8165a98)*' at 2334
 pack_fwrite : `(8165818,8165880,81658d8)' at 2315
 pack_fread : `(8165658,81656c0,8165718)' at 2295
 pack_mputl : `(8165510,8165568)' at 2276
 pack_mputw : `(81653c8,8165420)' at 2257
 pack_mgetl : `(81652e8)' at 2238
 pack_mgetw : `(8165208)' at 2219
 pack_iputl : `(81650c0,8165118)' at 2200
 pack_iputw : `(8164f78,8164fd0)' at 2181
 pack_igetl : `(8164e98)' at 2162
 pack_igetw : `(8164db8)' at 2143
 pack_fclose_chunk : `(8164ce8)*' at 2124
 pack_fopen_chunk : `(8164b98,8164c00)*' at 2098
 pack_fseek : `(8164a48,8164ab0)' at 2073
 pack_fclose : `(8164968)' at 2054
 pack_fopen : `(8164810,8164878)*' at 2034
 packfile_password : `(8164730)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(8164570,81645d8)' at 1963
 midi_seek : `(81644a0)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(8164188,81641f0,8164248)' at 1871
 play_midi : `(8164038,81640a0)' at 1846
 destroy_midi : `(8163f58)' at 1828
 load_midi : `(8163e70)*' at 1807
 adjust_sample : `(8163bf0,8163c58,8163cb0,8163d08,8163d60)' at 1789
 stop_sample : `(8163b08)' at 1767
 play_sample : `(8163888,81638f0,8163948,81639a0,81639f8)' at 1747
 destroy_sample : `(81637a8)' at 1727
 load_voc : `(81636c0)*' at 1704
 load_wav : `(81635e0)*' at 1687
 load_sample : `(8163500)*' at 1670
 unload_datafile : `(8163420)' at 1650
 load_datafile : `(8163338)*' at 1626
 set_volume : `(81631f8,8163250)' at 1604
 install_sound : `(8163048,81630a0,81630f8)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(8162de8)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(8162c88)' at 1437
 open_fli : `(8162ba0)' at 1413
 play_memory_fli : `(8162970,81629d8,8162a40,8162a98)' at 1396
 play_fli : `(8162710,8162778,81627e0,8162838)' at 1372
 destroy_font : `(8162630)' at 1355
 text_height : `(8162548)' at 1334
 text_length : `(81623f0,8162458)' at 1314
 textprintf_centre : `(81620d8,8162140,81621a8,8162200,8162258,81622b0,...)' at 1294
 textprintf : `(8161db8,8161e20,8161e88,8161ee0,8161f38,8161f90,...)' at 1268
 textout_justify : `(81619e0,8161a48,8161ab0,8161b18,8161b70,8161bc8,8161c20,8161c78)' at 1249
 textout_centre : `(81616d0,8161738,81617a0,8161808,8161860,81618b8)' at 1225
  textout : `(81613c0,8161428,8161490,81614f8,8161550,81615a8)' at 1202
 text_mode : `(81612f0)' at 1186
 draw_trans_sprite : `(81610c8,8161130,8161198,81611f0)' at 1168
    clear : `(8160fe0)' at 1142
 rotate_scaled_sprite : `(8160ce8,8160d50,8160db8,8160e10,8160e68,8160ec0)' at 1128
 rotate_sprite : `(8160a48,8160ab0,8160b18,8160b70,8160bc8)' at 1099
 stretch_sprite : `(8160748,81607b0,8160818,8160870,81608c8,8160920)' at 1077
 stretch_blit : `(81602a8,8160310,8160378,81603d0,8160428,8160480,81604d8,8160530,8160588,81605e0)' at 1054
 masked_blit : `(815fed8,815ff40,815ffa8,8160000,8160058,81600b0,8160108,8160160)' at 1033
     blit : `(815fb10,815fb78,815fbe0,815fc38,815fc90,815fce8,815fd40,815fd98)' at 1013
 floodfill : `(815f8f8,815f960,815f9b8,815fa10)' at 1000
   spline : `(815f738,815f7a0,815f808)' at 982
 calc_spline : `(815f500,815f568,815f5c0,815f628)' at 967
 ellipsefill : `(815f218,815f280,815f2d8,815f330,815f388,815f3e0)' at 947
  ellipse : `(815ef30,815ef98,815eff0,815f048,815f0a0,815f0f8)' at 927
 do_ellipse : `(815ea50,815eab8,815eb10,815eb68,815ebc0,815ec18,815ec70)' at 911
 circlefill : `(815e800,815e868,815e8c0,815e918,815e970)' at 892
   circle : `(815e580,815e5e8,815e640,815e698,815e6f0)' at 873
 do_circle : `(815e108,815e170,815e1c8,815e220,815e278,815e2d0)' at 858
     rect : `(815de20,815de88,815dee0,815df38,815df90,815dfe8)' at 840
  polygon : `(815dbf8,815dc60,815dcb8,815dd20)' at 827
 triangle : `(815d840,815d8a8,815d900,815d958,815d9b0,815da08,815da60,815dab8)' at 811
  do_line : `(815d360,815d3c8,815d420,815d478,815d4d0,815d528,815d580)' at 794
 solid_mode : `()' at 778
 xor_mode : `(815d218)' at 759
 drawing_mode : `(815d000,815d058,815d0c0,815d118)' at 742
 set_clip : `(815cd78,815cde0,815ce38,815ce90,815cee8)' at 721
 putpixel : `(815cb60,815cbc8,815cc20,815cc78)' at 704
 getb_depth : `(815ca28,815ca80)' at 687
 getg_depth : `(815c8f0,815c948)' at 668
 getr_depth : `(815c7b8,815c810)' at 649
     getb : `(815c6e8)' at 630
     getg : `(815c618)' at 617
     getr : `(815c548)' at 604
 makecol_depth : `(815c340,815c398,815c3f0,815c448)' at 591
 makecol8 : `(815c198,815c1f0,815c248)' at 569
  makecol : `(815bff8,815c050,815c0a8)' at 552
 bestfit_color : `(815bdf0,815be48,815bea0,815bef8)' at 536
 generate_optimized_palette : `(815bc28,815bc90,815bce8)' at 514
 generate_332_palette : `(815bb48)' at 479
 get_pallete_range : `(815b998,815b9f0,815ba48)' at 450
 get_pallete : `(815b8c0)' at 424
 get_color : `(815b778,815b7d0)' at 404
 set_pallete_range : `(815b570,815b5c8,815b620,815b678)' at 386
 set_pallete : `(815b498)' at 360
 set_color : `(815b350,815b3a8)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(815aec8)' at 288
 create_sub_bitmap : `(815ac40,815aca8,815ad00,815ad58,815adb0)*' at 265
 create_bitmap_ex : `(815aa98,815aaf0,815ab48)*' at 239
 create_bitmap : `(8157468,815a9b0)*' at 214
 set_gfx_mode : `(81571f0,8157248,81572a0,81572f8,8157350)' at 192
 set_color_conversion : `(8157118)' at 171
 set_color_depth : `(8124f18)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:670
Inits size:0
Consts size:106
Data size:24
Stack size:4000
Doing CleanUp............................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135703899
with addr:134523620 and params:0
Importing allegro_exit at 135703920
with addr:134523572 and params:0
Importing install_mouse at 135703942
with addr:134522724 and params:0
Importing install_timer at 135703964
with addr:134523556 and params:0
Importing install_keyboard at 135703989
with addr:134523524 and params:0
Importing screen at 135704004
with addr:134719304 and params:-1
Importing set_color_depth at 135704028
with addr:134523604 and params:4
Importing set_color_conversion at 135704057
with addr:134521924 and params:4
Importing set_gfx_mode at 135704078
with addr:134521700 and params:20
Importing create_bitmap at 135704100
with addr:134522932 and params:8
Importing create_bitmap_ex at 135704125
with addr:134522708 and params:12
Importing create_sub_bitmap at 135704151
with addr:134521860 and params:20
Importing destroy_bitmap at 135704174
with addr:134523428 and params:4
Importing rgb_map at 135704190
with addr:134720500 and params:-1
Importing color_map at 135704208
with addr:134720492 and params:-1
Importing set_color at 135704226
with addr:134523380 and params:8
Importing set_pallete at 135704246
with addr:134522148 and params:1024
Importing set_pallete_range at 135704272
with addr:134522228 and params:1036
Importing get_color at 135704290
with addr:134523316 and params:8
Importing get_pallete at 135704310
with addr:134521972 and params:1024
Importing get_pallete_range at 135704336
with addr:134524116 and params:1032
Importing generate_332_palette at 135704365
with addr:134521572 and params:1024
Importing generate_optimized_palette at 135704400
with addr:134523668 and params:1284
Importing bestfit_color at 135704422
with addr:134522820 and params:1036
Importing makecol at 135704438
with addr:134523988 and params:12
Importing makecol8 at 135704455
with addr:134524068 and params:12
Importing makecol_depth at 135704477
with addr:134522564 and params:16
Importing getr at 135704490
with addr:134522788 and params:4
Importing getg at 135704503
with addr:134523636 and params:4
Importing getb at 135704516
with addr:134523812 and params:4
Importing getr_depth at 135704535
with addr:134523716 and params:8
Importing getg_depth at 135704554
with addr:134522180 and params:8
Importing getb_depth at 135704573
with addr:134523140 and params:8
Importing putpixel at 135704590
with addr:134521876 and params:16
Importing set_clip at 135704607
with addr:134523508 and params:20
Importing drawing_mode at 135704628
with addr:134521556 and params:16
Importing xor_mode at 135704645
with addr:134522340 and params:4
Importing solid_mode at 135704664
with addr:134521780 and params:0
Importing do_line at 135704680
with addr:134523188 and params:28
Importing triangle at 135704697
with addr:134521812 and params:32
Importing polygon at 135704713
with addr:134522132 and params:16
Importing rect at 135704726
with addr:134523652 and params:24
Importing do_circle at 135704744
with addr:134521588 and params:24
Importing circle at 135704759
with addr:134522676 and params:20
Importing circlefill at 135704778
with addr:134523700 and params:20
Importing do_ellipse at 135704797
with addr:134522020 and params:28
Importing ellipse at 135704813
with addr:134524036 and params:24
Importing ellipsefill at 135704833
with addr:134521668 and params:24
Importing calc_spline at 135704853
with addr:134522772 and params:16
Importing spline at 135704868
with addr:134521716 and params:40
Importing floodfill at 135704886
with addr:134522996 and params:16
Importing blit at 135704899
with addr:134523172 and params:32
Importing masked_blit at 135704919
with addr:134524132 and params:32
Importing stretch_blit at 135704940
with addr:134524052 and params:40
Importing stretch_sprite at 135704963
with addr:134523492 and params:24
Importing rotate_sprite at 135704985
with addr:134523764 and params:20
Importing rotate_scaled_sprite at 135705014
with addr:134522212 and params:24
Importing clear at 135705028
with addr:134522532 and params:4
Importing draw_trans_sprite at 135705054
with addr:134522100 and params:16
Importing text_mode at 135705072
with addr:134523300 and params:4
Importing textout at 135705088
with addr:134521652 and params:24
Importing textout_centre at 135705111
with addr:134522868 and params:24
Importing textout_justify at 135705135
with addr:134522484 and params:32
Importing textprintf at 135705154
with addr:134521620 and params:24
Importing textprintf_centre at 135705180
with addr:134522612 and params:24
Importing text_length at 135705200
with addr:134522756 and params:8
Importing text_height at 135705220
with addr:134521748 and params:4
Importing destroy_font at 135705241
with addr:134523396 and params:4
Importing play_fli at 135705258
with addr:134523892 and params:16
Importing play_memory_fli at 135705282
with addr:134522372 and params:16
Importing open_fli at 135705299
with addr:134523476 and params:4
Importing open_memory_fli at 135705323
with addr:134521636 and params:4
Importing close_fli at 135705341
with addr:134522404 and params:0
Importing next_fli_frame at 135705364
with addr:134522884 and params:4
Importing reset_fli_variables at 135705392
with addr:134521844 and params:0
Importing fli_bitmap at 135705411
with addr:134719300 and params:-1
Importing fli_pallete at 135705431
with addr:134719320 and params:-1
Importing fli_frame at 135705449
with addr:134720496 and params:-1
Importing install_sound at 135705471
with addr:134523924 and params:12
Importing set_volume at 135705490
with addr:134522116 and params:8
Importing load_datafile at 135705512
with addr:134524084 and params:4
Importing unload_datafile at 135705536
with addr:134523876 and params:4
Importing load_sample at 135705556
with addr:134522276 and params:4
Importing load_wav at 135705573
with addr:134522580 and params:4
Importing load_voc at 135705590
with addr:134522004 and params:4
Importing destroy_sample at 135705613
with addr:134523956 and params:4
Importing play_sample at 135705633
with addr:134522164 and params:20
Importing stop_sample at 135705653
with addr:134523940 and params:4
Importing adjust_sample at 135705675
with addr:134522356 and params:20
Importing load_midi at 135705693
with addr:134523044 and params:4
Importing destroy_midi at 135705714
with addr:134522388 and params:4
Importing play_midi at 135705732
with addr:134522260 and params:8
Importing play_looped_midi at 135705757
with addr:134523236 and params:12
Importing stop_midi at 135705775
with addr:134521956 and params:0
Importing midi_pause at 135705794
with addr:134523092 and params:0
Importing midi_resume at 135705814
with addr:134523364 and params:0
Importing midi_seek at 135705832
with addr:134522500 and params:4
Importing midi_out at 135705849
with addr:134522804 and params:8
Importing load_midi_patches at 135705875
with addr:134522308 and params:0
Importing packfile_password at 135705901
with addr:134523220 and params:4
Importing pack_fopen at 135705920
with addr:134523012 and params:8
Importing pack_fclose at 135705940
with addr:134522964 and params:4
Importing pack_fseek at 135705959
with addr:134523412 and params:8
Importing pack_fopen_chunk at 135705984
with addr:134521828 and params:8
Importing pack_fclose_chunk at 135706010
with addr:134523972 and params:4
Importing pack_igetw at 135706029
with addr:134523108 and params:4
Importing pack_igetl at 135706048
with addr:134522292 and params:4
Importing pack_iputw at 135706067
with addr:134522036 and params:8
Importing pack_iputl at 135706086
with addr:134522052 and params:8
Importing pack_mgetw at 135706105
with addr:134522436 and params:4
Importing pack_mgetl at 135706124
with addr:134524020 and params:4
Importing pack_mputw at 135706143
with addr:134522244 and params:8
Importing pack_mputl at 135706162
with addr:134523268 and params:8
Importing pack_fread at 135706181
with addr:134522948 and params:12
Importing pack_fwrite at 135706201
with addr:134523460 and params:12
Importing pack_fgets at 135706220
with addr:134522068 and params:12
Importing pack_fputs at 135706239
with addr:134522084 and params:8
Importing get_filename at 135706260
with addr:134522548 and params:4
Importing load_bitmap at 135706280
with addr:134522916 and params:8
Importing load_bmp at 135706297
with addr:134521604 and params:8
Importing load_lbm at 135706314
with addr:134523444 and params:8
Importing load_pcx at 135706331
with addr:134522196 and params:8
Importing load_tga at 135706348
with addr:134523204 and params:8
Importing save_bitmap at 135706368
with addr:134522660 and params:12
Importing save_bmp at 135706385
with addr:134523780 and params:12
Importing save_pcx at 135706402
with addr:134522596 and params:12
Importing save_tga at 135706419
with addr:134523076 and params:12
Importing create_rgb_table at 135706444
with addr:134523828 and params:1032
Importing create_light_table at 135706471
with addr:134524100 and params:1044
Importing create_trans_table at 135706498
with addr:134523124 and params:1044
Importing create_color_table at 135706525
with addr:134523028 and params:1036
Importing mouse_x at 135706541
with addr:134719296 and params:-1
Importing mouse_y at 135706557
with addr:134720484 and params:-1
Importing mouse_b at 135706573
with addr:134719316 and params:-1
Importing mouse_pos at 135706591
with addr:134720488 and params:-1
Importing freeze_mouse_flag at 135706617
with addr:134720344 and params:-1
Importing keypressed at 135706636
with addr:134522692 and params:0
Importing readkey at 135706652
with addr:134523748 and params:0
Importing dbuf at 135706665
with addr:134720560 and params:-1
Importing addressof at 135706683
with addr:134525100 and params:4
Importing exec_script at 135706703
with addr:134525120 and params:8
Importing add_script at 135706722
with addr:134524800 and params:4
Importing add_tiles_pack at 135706745
with addr:134525492 and params:4
Importing df_get_item_num at 135706769
with addr:134524416 and params:8
Importing df_get_item at 135706789
with addr:134524504 and params:8
Importing df_item at 135706805
with addr:134524540 and params:8
Importing df_dat at 135706820
with addr:134524564 and params:4
Importing df_count at 135706837
with addr:134524584 and params:8
Importing df_foreach at 135706856
with addr:134524636 and params:8
Importing bmp_line at 135706873
with addr:134524708 and params:8
Importing bmp_w at 135706887
with addr:134524744 and params:4
Importing bmp_h at 135706901
with addr:134524764 and params:4
Importing printf at 135706916
with addr:134523252 and params:4
Importing create_object_type at 135706943
with addr:134530064 and params:12
Importing create_weapon_type at 135706970
with addr:134530336 and params:4
Importing assign_weapon_handler at 135707000
with addr:134530444 and params:8
Importing  at 135707009

0:Address 0, size 0,Calling 109
Size of params:0


Executing function from shotgun.sc!
 12:ENTER 135632212 
NOP 
NOP 
NOP 
 16:{a0(=$1076136184),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135707687)}ADD
 28:a0(=$135707687) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$0),a0(=$135701560)}MOV
 60:{a0(=$135701560),[4]DS(=$135701560)}MOV
 68:a0(=$135701560) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$0011(=$17)}MOV
 100:{a0(=$17),a242(=$135707687)}ADD
 104:a0(=$135707704) PUSH (SP=3992) 
 108:[4]DS(=$135701560) PUSH (SP=3988) 
 116:{$0b57(=$2903),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135701560) PUSH (SP=3992) 
 140:{$0b76(=$2934),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$0),a0(=$135602656)}MOV
 168:{a0(=$135602656),$0016(=$22)}MOV
 176:{a0(=$22),a242(=$135707687)}ADD
 180:a0(=$135707709) PUSH (SP=3992) 
 184:[4]DS(=$135701560) PUSH (SP=3988) 
 192:{$0b57(=$2903),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$135701784) PUSH (SP=3992) 
 216:{$0b76(=$2934),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$0),a0(=$135718312)}MOV
 244:{a0(=$135718312),$001d(=$29)}MOV
 252:{a0(=$29),a242(=$135707687)}ADD
 256:a0(=$135707716) PUSH (SP=3992) 
 260:[4]DS(=$135701560) PUSH (SP=3988) 
 268:{$0b57(=$2903),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$135701768) PUSH (SP=3992) 
 292:{$0b76(=$2934),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$0),a0(=$135717448)}MOV
 320:{a0(=$135717448),$0024(=$36)}MOV
 328:{a0(=$36),a242(=$135707687)}ADD
 332:a0(=$135707723) PUSH (SP=3992) 
 336:{$0c0c(=$3084),$0004(=$4)}CALLEX
 348:{a245(=$3992),$0004(=$4)}ADD
 356:{[20]DS(=$0),a0(=$1)}MOV
 364:{a0(=$1),$002c(=$44)}MOV
 372:{a0(=$44),a242(=$135707687)}ADD
 376:a0(=$135707731) PUSH (SP=3992) 
 380:{$0aed(=$2797),$0004(=$4)}CALLEX
 392:{a245(=$3992),$0004(=$4)}ADD
 400:a0(=$-1) PUSH (SP=3992) 
 404:[20]DS(=$1) PUSH (SP=3988) 
 412:{$0c2a(=$3114),$0008(=$8)}CALLEX
 424:{a245(=$3988),$0008(=$8)}ADD
 432:{a0(=$0),$0034(=$52)}MOV
 440:{a0(=$52),a242(=$135707687)}ADD
 444:a0(=$135707739) PUSH (SP=3992) 
 448:{a1(=$1076136184),$0041(=$65)}MOV
 456:{a1(=$65),a242(=$135707687)}ADD
 460:a1(=$135707752) PUSH (SP=3988) 
 464:{$0aed(=$2797),$0004(=$4)}CALLEX
 476:{a1(=$135707752),a0(=$-1)}MOV
 480:{a245(=$3988),$0004(=$4)}ADD
 488:a0(=$-1) POP (SP=3996) 
 492:[8]DS(=$135602656) PUSH (SP=3992) 
 500:a1(=$-1) PUSH (SP=3988) 
 504:a0(=$135707739) PUSH (SP=3984) 
 508:{$0bf1(=$3057),$000c(=$12)}CALLEX
 520:{a245(=$3984),$000c(=$12)}ADD
 528:{a0(=$2),$004d(=$77)}MOV
 536:{a0(=$77),a242(=$135707687)}ADD
 540:a0(=$135707764) PUSH (SP=3992) 
 544:{a1(=$-1),$005c(=$92)}MOV
 552:{a1(=$92),a242(=$135707687)}ADD
 556:a1(=$135707779) PUSH (SP=3988) 
 560:{$0aed(=$2797),$0004(=$4)}CALLEX
 572:{a1(=$135707779),a0(=$-1)}MOV
 576:{a245(=$3988),$0004(=$4)}ADD
 584:a0(=$-1) POP (SP=3996) 
 588:[12]DS(=$135718312) PUSH (SP=3992) 
 596:a1(=$-1) PUSH (SP=3988) 
 600:a0(=$135707764) PUSH (SP=3984) 
 604:{$0bf1(=$3057),$000c(=$12)}CALLEX
 616:{a245(=$3984),$000c(=$12)}ADD
 624:{a0(=$3),$0000(=$0)}MOV
 632:LEAVE 
RET SP=4000,CP=4000
EXIT

 140:{a245(=$3992),$0004(=$4)}ADD
 148:{a0(=$0),$0000(=$0)}MOV
 156:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 85
Size of params:0


Executing function from rpg.sc!
 712:ENTER 135414984 
NOP 
NOP 
NOP 
 716:[4]DS(=$135602832) PUSH (SP=3992) 
 724:{$0672(=$1650),$0004(=$4)}CALLEX
 736:{a245(=$3992),$0004(=$4)}ADD
 744:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 89
Size of params:0


Executing function from shotgun.sc!
 636:ENTER 135632212 
NOP 
NOP 
NOP 
 640:[4]DS(=$135701560) PUSH (SP=3992) 
 648:{$0672(=$1650),$0004(=$4)}CALLEX
 660:{a245(=$3992),$0004(=$4)}ADD
 668:LEAVE 
RET SP=4000,CP=4000
EXIT
