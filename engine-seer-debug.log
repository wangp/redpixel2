SeeRC debugger data:
 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>unsigned int x, y;
284>};
285>
286> 
287>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
288>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
289>typedef void weapon_type_t;	       
290>import int create_weapon_type(char *name);    
291>import int assign_weapon_handler(int typenum, seer_addr handler);
292>
293>#! 7 "scripts/imports.sh"
294>
295>
296>#! 7 "!!_internal_Script"
297>
298>export init;
299>
300>
301>
302>
303>
304>
305>int init()
306>{   
307>     
308>    
309>    add_tiles_pack("data/tiles.dat");
310>    add_tiles_pack("data/tiles2.dat");
311>    
312>     
313>    add_script("scripts/rpg.sc");
314>    add_script("scripts/shotgun.sc");
315>
316>    return 0;
317>}
318>
319>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(80f58c0)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(80f9fc0)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(80fa098,80fa0f0,80fa148,80fa1a0,80fa1f8)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(80fd7c8,80fd820)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(80fd908,80fd960,80fd9b8)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(80fdab0,80fdb18,80fdb70,80fdbc8,80fdc20)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(80fdd38)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(80fe1c0,80fe218)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(80fe308)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(80fe3e0,80fe438,80fe490,80fe4e8)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(80fe5e8,80fe640)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(80fe730)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(80fe808,80fe860,80fe8b8)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(80fe9b8)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(80fea98,80feb00,80feb58)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(80fec60,80fecb8,80fed10,80fed68)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(80fee68,80feec0,80fef18)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(80ff008,80ff060,80ff0b8)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(80ff1b0,80ff208,80ff260,80ff2b8)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(80ff3b8)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(80ff488)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(80ff558)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(80ff628,80ff680)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(80ff760,80ff7b8)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(80ff898,80ff8f0)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(80ff9d0,80ffa38,80ffa90,80ffae8)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(80ffbe8,80ffc50,80ffca8,80ffd00,80ffd58)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(80ffe70,80ffec8,80fff30,80fff88)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(8100088)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8100458,81004b0,81004f8,8100540)>...
Declaration of `do_line' as <(81001d0,8100238,8100290,81002e8,8100340,8100398,81003f0)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(81006b0,8100718,8100770,81007c8,8100820,8100878,81008d0,8100928)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(8100a68,8100ad0,8100b28,8100b90)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(8100c90,8100cf8,8100d50,8100da8,8100e00,8100e58)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(81011a8,8101200,8101248,8101290)>...
Declaration of `do_circle' as <(8100f78,8100fe0,8101038,8101090,81010e8,8101140)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(81013f0,8101458,81014b0,8101508,8101560)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(8101670,81016d8,8101730,8101788,81017e0)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8101b78,8101bd0,8101c18,8101c60)>...
Declaration of `do_ellipse' as <(81018f0,8101958,81019b0,8101a08,8101a60,8101ab8,8101b10)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(8101dd0,8101e38,8101e90,8101ee8,8101f40,8101f98)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(81020b8,8102120,8102178,81021d0,8102228,8102280)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(81023a0,8102408,8102460,81024c8)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(81025d8,8102640,81026a8)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(8102798,8102800,8102858,81028b0)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(81029b0,8102a18,8102a80,8102ad8,8102b30,8102b88,8102be0,8102c38)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(8102d78,8102de0,8102e48,8102ea0,8102ef8,8102f50,8102fa8,8103000)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(8103148,81031b0,8103218,8103270,81032c8,8103320,8103378,81033d0,8103428,8103480)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(81035e8,8103650,81036b8,8103710,8103768,81037c0)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(81038e8,8103950,81039b8,8103a10,8103a68)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(8103b88,8103bf0,8103c58,8103cb0,8103d08,8103d60)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(8103e80)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(8103f68,8103fd0,8104038,8104090)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(8104190)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(8104260,81042c8,8104330,8104398,81043f0,8104448)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(8104570,81045d8,8104640,81046a8,8104700,8104758)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(8104880,81048e8,8104950,81049b8,8104a10,8104a68,8104ac0,8104b18)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(8104c58,8104cc0,8104d28,8104d80,8104dd8,8104e30,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(8104f78,8104fe0,8105048,81050a0,81050f8,8105150,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(8105290,81052f8)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(81053e8)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(81054d0)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(81055b0,8105618,8105680,81056d8)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(8105810,8105878,81058e0,8105938)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(8105a58)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(8105b40)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(8105ca0)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(8105f10,8105f68,8105fc0)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(81060c0,8106118)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(8106200)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(81062e8)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(81063c8)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(81064a8)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(8106588)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(8106670)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(8106750,81067b8,8106810,8106868,81068c0)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(81069d0)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(8106ab8,8106b20,8106b78,8106bd0,8106c28)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(8106d38)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(8106e20)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(8106f00,8106f68)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(8107050,81070b8,8107110)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(8107368)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(8107438,81074a0)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(8107608)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(81076e8,8107750)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(8107840)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(8107920,8107988)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(8107a70,8107ad8)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(8107bc0)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(8107c90)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(8107d70)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(8107e50,8107ea8)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(8107f98,8107ff0)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(81080e0)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(81081c0)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(81082a0,81082f8)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(81083e8,8108440)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(8108530,8108598,81085f0)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(81086f0,8108758,81087b0)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(81088b0,8108918,8108970)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(8108a70,8108ad8)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(8108bd0)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(8108cb0,8108d18)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(8108df0,8108e58)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(8108f48,8108fb0)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(81090a0,8109108)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(81091f8,8109260)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(8109350,81093b8,8109420)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(8109500,8109568,81095d0)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(81096d0,8109738,81097a0)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(81098a0,8109908,8109970)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(8109a78,8109ae0,8109b38)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(8109c30,8109c98,8109cf0,8109d48,8109da0,8109df8)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(8109f20,8109f88,8109fe0,810a038,810a090,810a0e8)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(810a338,810a390,810a3e8)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(810a210,810a278,810a2d0,810a480)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(810a948)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(810aa28,810aa90)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(810ab80)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(810ac68)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(810ad50,810adb8)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(810ae90,810aef8)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(810afe8,810b050)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(810b130)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(810b210,810b278)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(810b428)>...
Declaration of `df_foreach' as <(810b358,810b3c0)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(810b538,810b5a0)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(810b680)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(810b750)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(810b830,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(810b9e0,810ba48,810baa0)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(810bd08,810bd60)>...
Defining type 'weapon_handler_t' as *(810bd08,810bd60)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(810be68,810bec0,810bf28)>...
Defining type 'object_handler_t' as *(810be68,810bec0,810bf28)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(810c080)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(810c170,810c1c8)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export init;

>int init()
Reading declaration:type is a standard `int'
Declaration of `init' as <()>...
Address:0
=======================>>ENTERING function `init'!
   0: ENTER 

>    add_tiles_pack("data/tiles.dat");
Symbol:add_tiles_pack
   4: MOV a0 , 0
  12: ADD a0 , ES
  16: PUSH a0
  20: CALLEX 2859 , 4
  32: ADD SP , 4

>    add_tiles_pack("data/tiles2.dat");
Symbol:add_tiles_pack
  40: MOV a0 , 15
  48: ADD a0 , ES
  52: PUSH a0
  56: CALLEX 2859 , 4
  68: ADD SP , 4

>    add_script("scripts/rpg.sc");
Symbol:add_script
  76: MOV a0 , 31
  84: ADD a0 , ES
  88: PUSH a0
  92: CALLEX 2836 , 4
 104: ADD SP , 4

>    add_script("scripts/shotgun.sc");
Symbol:add_script
 112: MOV a0 , 46
 120: ADD a0 , ES
 124: PUSH a0
 128: CALLEX 2836 , 4
 140: ADD SP , 4

>    return 0;
 148: MOV a0 , 0
 156: LEAVE 
 157: RET 
 158: LEAVE 
 159: RET 
+++
Local symbols:
=======================>>LEAVING  function `init'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(810be68,810bec0,810bf28)'
 weapon_handler_t : `*(810bd08,810bd60)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->init

Global Symbols:
     init : `()' at CS+0
 assign_weapon_handler : `(810c170,810c1c8)' at 3114
 create_weapon_type : `(810c080)' at 3084
 create_object_type : `(810b9e0,810ba48,810baa0)' at 3057
   printf : `(810b830,...)' at 3030
    bmp_h : `(810b750)' at 3015
    bmp_w : `(810b680)' at 3001
 bmp_line : `(810b538,810b5a0)*' at 2987
 df_foreach : `(810b358,810b3c0)' at 2970
 df_count : `(810b210,810b278)' at 2951
   df_dat : `(810b130)*' at 2934
  df_item : `(810afe8,810b050)*' at 2919
 df_get_item : `(810ae90,810aef8)*' at 2903
 df_get_item_num : `(810ad50,810adb8)' at 2883
 add_tiles_pack : `(810ac68)' at 2859
 add_script : `(810ab80)' at 2836
 exec_script : `(810aa28,810aa90)' at 2817
 addressof : `(810a948)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(810a210,810a278,810a2d0,810a480)' at 2639
 create_trans_table : `(8109f20,8109f88,8109fe0,810a038,810a090,810a0e8)' at 2612
 create_light_table : `(8109c30,8109c98,8109cf0,8109d48,8109da0,8109df8)' at 2585
 create_rgb_table : `(8109a78,8109ae0,8109b38)' at 2558
 save_tga : `(81098a0,8109908,8109970)' at 2533
 save_pcx : `(81096d0,8109738,81097a0)' at 2516
 save_bmp : `(8109500,8109568,81095d0)' at 2499
 save_bitmap : `(8109350,81093b8,8109420)' at 2482
 load_tga : `(81091f8,8109260)*' at 2462
 load_pcx : `(81090a0,8109108)*' at 2445
 load_lbm : `(8108f48,8108fb0)*' at 2428
 load_bmp : `(8108df0,8108e58)*' at 2411
 load_bitmap : `(8108cb0,8108d18)*' at 2394
 get_filename : `(8108bd0)*' at 2374
 pack_fputs : `(8108a70,8108ad8)' at 2353
 pack_fgets : `(81088b0,8108918,8108970)*' at 2334
 pack_fwrite : `(81086f0,8108758,81087b0)' at 2315
 pack_fread : `(8108530,8108598,81085f0)' at 2295
 pack_mputl : `(81083e8,8108440)' at 2276
 pack_mputw : `(81082a0,81082f8)' at 2257
 pack_mgetl : `(81081c0)' at 2238
 pack_mgetw : `(81080e0)' at 2219
 pack_iputl : `(8107f98,8107ff0)' at 2200
 pack_iputw : `(8107e50,8107ea8)' at 2181
 pack_igetl : `(8107d70)' at 2162
 pack_igetw : `(8107c90)' at 2143
 pack_fclose_chunk : `(8107bc0)*' at 2124
 pack_fopen_chunk : `(8107a70,8107ad8)*' at 2098
 pack_fseek : `(8107920,8107988)' at 2073
 pack_fclose : `(8107840)' at 2054
 pack_fopen : `(81076e8,8107750)*' at 2034
 packfile_password : `(8107608)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(8107438,81074a0)' at 1963
 midi_seek : `(8107368)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(8107050,81070b8,8107110)' at 1871
 play_midi : `(8106f00,8106f68)' at 1846
 destroy_midi : `(8106e20)' at 1828
 load_midi : `(8106d38)*' at 1807
 adjust_sample : `(8106ab8,8106b20,8106b78,8106bd0,8106c28)' at 1789
 stop_sample : `(81069d0)' at 1767
 play_sample : `(8106750,81067b8,8106810,8106868,81068c0)' at 1747
 destroy_sample : `(8106670)' at 1727
 load_voc : `(8106588)*' at 1704
 load_wav : `(81064a8)*' at 1687
 load_sample : `(81063c8)*' at 1670
 unload_datafile : `(81062e8)' at 1650
 load_datafile : `(8106200)*' at 1626
 set_volume : `(81060c0,8106118)' at 1604
 install_sound : `(8105f10,8105f68,8105fc0)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(8105ca0)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(8105b40)' at 1437
 open_fli : `(8105a58)' at 1413
 play_memory_fli : `(8105810,8105878,81058e0,8105938)' at 1396
 play_fli : `(81055b0,8105618,8105680,81056d8)' at 1372
 destroy_font : `(81054d0)' at 1355
 text_height : `(81053e8)' at 1334
 text_length : `(8105290,81052f8)' at 1314
 textprintf_centre : `(8104f78,8104fe0,8105048,81050a0,81050f8,8105150,...)' at 1294
 textprintf : `(8104c58,8104cc0,8104d28,8104d80,8104dd8,8104e30,...)' at 1268
 textout_justify : `(8104880,81048e8,8104950,81049b8,8104a10,8104a68,8104ac0,8104b18)' at 1249
 textout_centre : `(8104570,81045d8,8104640,81046a8,8104700,8104758)' at 1225
  textout : `(8104260,81042c8,8104330,8104398,81043f0,8104448)' at 1202
 text_mode : `(8104190)' at 1186
 draw_trans_sprite : `(8103f68,8103fd0,8104038,8104090)' at 1168
    clear : `(8103e80)' at 1142
 rotate_scaled_sprite : `(8103b88,8103bf0,8103c58,8103cb0,8103d08,8103d60)' at 1128
 rotate_sprite : `(81038e8,8103950,81039b8,8103a10,8103a68)' at 1099
 stretch_sprite : `(81035e8,8103650,81036b8,8103710,8103768,81037c0)' at 1077
 stretch_blit : `(8103148,81031b0,8103218,8103270,81032c8,8103320,8103378,81033d0,8103428,8103480)' at 1054
 masked_blit : `(8102d78,8102de0,8102e48,8102ea0,8102ef8,8102f50,8102fa8,8103000)' at 1033
     blit : `(81029b0,8102a18,8102a80,8102ad8,8102b30,8102b88,8102be0,8102c38)' at 1013
 floodfill : `(8102798,8102800,8102858,81028b0)' at 1000
   spline : `(81025d8,8102640,81026a8)' at 982
 calc_spline : `(81023a0,8102408,8102460,81024c8)' at 967
 ellipsefill : `(81020b8,8102120,8102178,81021d0,8102228,8102280)' at 947
  ellipse : `(8101dd0,8101e38,8101e90,8101ee8,8101f40,8101f98)' at 927
 do_ellipse : `(81018f0,8101958,81019b0,8101a08,8101a60,8101ab8,8101b10)' at 911
 circlefill : `(8101670,81016d8,8101730,8101788,81017e0)' at 892
   circle : `(81013f0,8101458,81014b0,8101508,8101560)' at 873
 do_circle : `(8100f78,8100fe0,8101038,8101090,81010e8,8101140)' at 858
     rect : `(8100c90,8100cf8,8100d50,8100da8,8100e00,8100e58)' at 840
  polygon : `(8100a68,8100ad0,8100b28,8100b90)' at 827
 triangle : `(81006b0,8100718,8100770,81007c8,8100820,8100878,81008d0,8100928)' at 811
  do_line : `(81001d0,8100238,8100290,81002e8,8100340,8100398,81003f0)' at 794
 solid_mode : `()' at 778
 xor_mode : `(8100088)' at 759
 drawing_mode : `(80ffe70,80ffec8,80fff30,80fff88)' at 742
 set_clip : `(80ffbe8,80ffc50,80ffca8,80ffd00,80ffd58)' at 721
 putpixel : `(80ff9d0,80ffa38,80ffa90,80ffae8)' at 704
 getb_depth : `(80ff898,80ff8f0)' at 687
 getg_depth : `(80ff760,80ff7b8)' at 668
 getr_depth : `(80ff628,80ff680)' at 649
     getb : `(80ff558)' at 630
     getg : `(80ff488)' at 617
     getr : `(80ff3b8)' at 604
 makecol_depth : `(80ff1b0,80ff208,80ff260,80ff2b8)' at 591
 makecol8 : `(80ff008,80ff060,80ff0b8)' at 569
  makecol : `(80fee68,80feec0,80fef18)' at 552
 bestfit_color : `(80fec60,80fecb8,80fed10,80fed68)' at 536
 generate_optimized_palette : `(80fea98,80feb00,80feb58)' at 514
 generate_332_palette : `(80fe9b8)' at 479
 get_pallete_range : `(80fe808,80fe860,80fe8b8)' at 450
 get_pallete : `(80fe730)' at 424
 get_color : `(80fe5e8,80fe640)' at 404
 set_pallete_range : `(80fe3e0,80fe438,80fe490,80fe4e8)' at 386
 set_pallete : `(80fe308)' at 360
 set_color : `(80fe1c0,80fe218)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(80fdd38)' at 288
 create_sub_bitmap : `(80fdab0,80fdb18,80fdb70,80fdbc8,80fdc20)*' at 265
 create_bitmap_ex : `(80fd908,80fd960,80fd9b8)*' at 239
 create_bitmap : `(80fd7c8,80fd820)*' at 214
 set_gfx_mode : `(80fa098,80fa0f0,80fa148,80fa1a0,80fa1f8)' at 192
 set_color_conversion : `(80f9fc0)' at 171
 set_color_depth : `(80f58c0)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:160
Inits size:0
Consts size:65
Data size:0
Stack size:4000
Doing CleanUp............................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135320565
with addr:134523620 and params:0
Importing allegro_exit at 135320586
with addr:134523572 and params:0
Importing install_mouse at 135320608
with addr:134522724 and params:0
Importing install_timer at 135320630
with addr:134523556 and params:0
Importing install_keyboard at 135320655
with addr:134523524 and params:0
Importing screen at 135320670
with addr:134718664 and params:-1
Importing set_color_depth at 135320694
with addr:134523604 and params:4
Importing set_color_conversion at 135320723
with addr:134521924 and params:4
Importing set_gfx_mode at 135320744
with addr:134521700 and params:20
Importing create_bitmap at 135320766
with addr:134522932 and params:8
Importing create_bitmap_ex at 135320791
with addr:134522708 and params:12
Importing create_sub_bitmap at 135320817
with addr:134521860 and params:20
Importing destroy_bitmap at 135320840
with addr:134523428 and params:4
Importing rgb_map at 135320856
with addr:134719860 and params:-1
Importing color_map at 135320874
with addr:134719852 and params:-1
Importing set_color at 135320892
with addr:134523380 and params:8
Importing set_pallete at 135320912
with addr:134522148 and params:1024
Importing set_pallete_range at 135320938
with addr:134522228 and params:1036
Importing get_color at 135320956
with addr:134523316 and params:8
Importing get_pallete at 135320976
with addr:134521972 and params:1024
Importing get_pallete_range at 135321002
with addr:134524116 and params:1032
Importing generate_332_palette at 135321031
with addr:134521572 and params:1024
Importing generate_optimized_palette at 135321066
with addr:134523668 and params:1284
Importing bestfit_color at 135321088
with addr:134522820 and params:1036
Importing makecol at 135321104
with addr:134523988 and params:12
Importing makecol8 at 135321121
with addr:134524068 and params:12
Importing makecol_depth at 135321143
with addr:134522564 and params:16
Importing getr at 135321156
with addr:134522788 and params:4
Importing getg at 135321169
with addr:134523636 and params:4
Importing getb at 135321182
with addr:134523812 and params:4
Importing getr_depth at 135321201
with addr:134523716 and params:8
Importing getg_depth at 135321220
with addr:134522180 and params:8
Importing getb_depth at 135321239
with addr:134523140 and params:8
Importing putpixel at 135321256
with addr:134521876 and params:16
Importing set_clip at 135321273
with addr:134523508 and params:20
Importing drawing_mode at 135321294
with addr:134521556 and params:16
Importing xor_mode at 135321311
with addr:134522340 and params:4
Importing solid_mode at 135321330
with addr:134521780 and params:0
Importing do_line at 135321346
with addr:134523188 and params:28
Importing triangle at 135321363
with addr:134521812 and params:32
Importing polygon at 135321379
with addr:134522132 and params:16
Importing rect at 135321392
with addr:134523652 and params:24
Importing do_circle at 135321410
with addr:134521588 and params:24
Importing circle at 135321425
with addr:134522676 and params:20
Importing circlefill at 135321444
with addr:134523700 and params:20
Importing do_ellipse at 135321463
with addr:134522020 and params:28
Importing ellipse at 135321479
with addr:134524036 and params:24
Importing ellipsefill at 135321499
with addr:134521668 and params:24
Importing calc_spline at 135321519
with addr:134522772 and params:16
Importing spline at 135321534
with addr:134521716 and params:40
Importing floodfill at 135321552
with addr:134522996 and params:16
Importing blit at 135321565
with addr:134523172 and params:32
Importing masked_blit at 135321585
with addr:134524132 and params:32
Importing stretch_blit at 135321606
with addr:134524052 and params:40
Importing stretch_sprite at 135321629
with addr:134523492 and params:24
Importing rotate_sprite at 135321651
with addr:134523764 and params:20
Importing rotate_scaled_sprite at 135321680
with addr:134522212 and params:24
Importing clear at 135321694
with addr:134522532 and params:4
Importing draw_trans_sprite at 135321720
with addr:134522100 and params:16
Importing text_mode at 135321738
with addr:134523300 and params:4
Importing textout at 135321754
with addr:134521652 and params:24
Importing textout_centre at 135321777
with addr:134522868 and params:24
Importing textout_justify at 135321801
with addr:134522484 and params:32
Importing textprintf at 135321820
with addr:134521620 and params:24
Importing textprintf_centre at 135321846
with addr:134522612 and params:24
Importing text_length at 135321866
with addr:134522756 and params:8
Importing text_height at 135321886
with addr:134521748 and params:4
Importing destroy_font at 135321907
with addr:134523396 and params:4
Importing play_fli at 135321924
with addr:134523892 and params:16
Importing play_memory_fli at 135321948
with addr:134522372 and params:16
Importing open_fli at 135321965
with addr:134523476 and params:4
Importing open_memory_fli at 135321989
with addr:134521636 and params:4
Importing close_fli at 135322007
with addr:134522404 and params:0
Importing next_fli_frame at 135322030
with addr:134522884 and params:4
Importing reset_fli_variables at 135322058
with addr:134521844 and params:0
Importing fli_bitmap at 135322077
with addr:134718660 and params:-1
Importing fli_pallete at 135322097
with addr:134718680 and params:-1
Importing fli_frame at 135322115
with addr:134719856 and params:-1
Importing install_sound at 135322137
with addr:134523924 and params:12
Importing set_volume at 135322156
with addr:134522116 and params:8
Importing load_datafile at 135322178
with addr:134524084 and params:4
Importing unload_datafile at 135322202
with addr:134523876 and params:4
Importing load_sample at 135322222
with addr:134522276 and params:4
Importing load_wav at 135322239
with addr:134522580 and params:4
Importing load_voc at 135322256
with addr:134522004 and params:4
Importing destroy_sample at 135322279
with addr:134523956 and params:4
Importing play_sample at 135322299
with addr:134522164 and params:20
Importing stop_sample at 135322319
with addr:134523940 and params:4
Importing adjust_sample at 135322341
with addr:134522356 and params:20
Importing load_midi at 135322359
with addr:134523044 and params:4
Importing destroy_midi at 135322380
with addr:134522388 and params:4
Importing play_midi at 135322398
with addr:134522260 and params:8
Importing play_looped_midi at 135322423
with addr:134523236 and params:12
Importing stop_midi at 135322441
with addr:134521956 and params:0
Importing midi_pause at 135322460
with addr:134523092 and params:0
Importing midi_resume at 135322480
with addr:134523364 and params:0
Importing midi_seek at 135322498
with addr:134522500 and params:4
Importing midi_out at 135322515
with addr:134522804 and params:8
Importing load_midi_patches at 135322541
with addr:134522308 and params:0
Importing packfile_password at 135322567
with addr:134523220 and params:4
Importing pack_fopen at 135322586
with addr:134523012 and params:8
Importing pack_fclose at 135322606
with addr:134522964 and params:4
Importing pack_fseek at 135322625
with addr:134523412 and params:8
Importing pack_fopen_chunk at 135322650
with addr:134521828 and params:8
Importing pack_fclose_chunk at 135322676
with addr:134523972 and params:4
Importing pack_igetw at 135322695
with addr:134523108 and params:4
Importing pack_igetl at 135322714
with addr:134522292 and params:4
Importing pack_iputw at 135322733
with addr:134522036 and params:8
Importing pack_iputl at 135322752
with addr:134522052 and params:8
Importing pack_mgetw at 135322771
with addr:134522436 and params:4
Importing pack_mgetl at 135322790
with addr:134524020 and params:4
Importing pack_mputw at 135322809
with addr:134522244 and params:8
Importing pack_mputl at 135322828
with addr:134523268 and params:8
Importing pack_fread at 135322847
with addr:134522948 and params:12
Importing pack_fwrite at 135322867
with addr:134523460 and params:12
Importing pack_fgets at 135322886
with addr:134522068 and params:12
Importing pack_fputs at 135322905
with addr:134522084 and params:8
Importing get_filename at 135322926
with addr:134522548 and params:4
Importing load_bitmap at 135322946
with addr:134522916 and params:8
Importing load_bmp at 135322963
with addr:134521604 and params:8
Importing load_lbm at 135322980
with addr:134523444 and params:8
Importing load_pcx at 135322997
with addr:134522196 and params:8
Importing load_tga at 135323014
with addr:134523204 and params:8
Importing save_bitmap at 135323034
with addr:134522660 and params:12
Importing save_bmp at 135323051
with addr:134523780 and params:12
Importing save_pcx at 135323068
with addr:134522596 and params:12
Importing save_tga at 135323085
with addr:134523076 and params:12
Importing create_rgb_table at 135323110
with addr:134523828 and params:1032
Importing create_light_table at 135323137
with addr:134524100 and params:1044
Importing create_trans_table at 135323164
with addr:134523124 and params:1044
Importing create_color_table at 135323191
with addr:134523028 and params:1036
Importing mouse_x at 135323207
with addr:134718656 and params:-1
Importing mouse_y at 135323223
with addr:134719844 and params:-1
Importing mouse_b at 135323239
with addr:134718676 and params:-1
Importing mouse_pos at 135323257
with addr:134719848 and params:-1
Importing freeze_mouse_flag at 135323283
with addr:134719704 and params:-1
Importing keypressed at 135323302
with addr:134522692 and params:0
Importing readkey at 135323318
with addr:134523748 and params:0
Importing dbuf at 135323331
with addr:134719920 and params:-1
Importing addressof at 135323349
with addr:134525100 and params:4
Importing exec_script at 135323369
with addr:134525120 and params:8
Importing add_script at 135323388
with addr:134524800 and params:4
Importing add_tiles_pack at 135323411
with addr:134525492 and params:4
Importing df_get_item_num at 135323435
with addr:134524416 and params:8
Importing df_get_item at 135323455
with addr:134524504 and params:8
Importing df_item at 135323471
with addr:134524540 and params:8
Importing df_dat at 135323486
with addr:134524564 and params:4
Importing df_count at 135323503
with addr:134524584 and params:8
Importing df_foreach at 135323522
with addr:134524636 and params:8
Importing bmp_line at 135323539
with addr:134524708 and params:8
Importing bmp_w at 135323553
with addr:134524744 and params:4
Importing bmp_h at 135323567
with addr:134524764 and params:4
Importing printf at 135323582
with addr:134523252 and params:4
Importing create_object_type at 135323609
with addr:134530064 and params:12
Importing create_weapon_type at 135323636
with addr:134530336 and params:4
Importing assign_weapon_handler at 135323666
with addr:134530444 and params:8
Importing  at 135323675

0:Address 0, size 0,Calling 79
Size of params:0


Executing function from init.sc!
 0:ENTER 135250644 
NOP 
NOP 
NOP 
 4:{a0(=$1076136184),$0000(=$0)}MOV
 12:{a0(=$0),a242(=$135323843)}ADD
 16:a0(=$135323843) PUSH (SP=3992) 
 20:{$0b2b(=$2859),$0004(=$4)}CALLEX
 32:{a245(=$3992),$0004(=$4)}ADD
 40:{a0(=$16777216),$000f(=$15)}MOV
 48:{a0(=$15),a242(=$135323843)}ADD
 52:a0(=$135323858) PUSH (SP=3992) 
 56:{$0b2b(=$2859),$0004(=$4)}CALLEX
 68:{a245(=$3992),$0004(=$4)}ADD
 76:{a0(=$33554432),$001f(=$31)}MOV
 84:{a0(=$31),a242(=$135323843)}ADD
 88:a0(=$135323874) PUSH (SP=3992) 
 92:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>unsigned int x, y;
284>};
285>
286> 
287>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
288>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
289>typedef void weapon_type_t;	       
290>import int create_weapon_type(char *name);    
291>import int assign_weapon_handler(int typenum, seer_addr handler);
292>
293>#! 7 "scripts/imports.sh"
294>
295>
296>#! 7 "!!_internal_Script"
297>
298>export script_main;
299>export script_exit;
300>
301>
302>DATAFILE *dat;
303>BITMAP *ammo, *weapon, *projectile, *status;
304>int typenum;
305>
306>
307>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
308>{
309>    
310>
311>
312>
313>
314>
315>
316>	
317>}
318>
319>
320>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
321>{
322>    
323>
324>
325>
326>
327>
328>
329>
330>
331>}
332>
333>
334>void rpg(msg_t msg, player_t *pl)
335>{
336>    
337>
338>
339>
340>
341>
342>
343>
344>
345>}
346>
347>
348>
349>
350>
351>
352>int script_main()
353>{
354>    dat = load_datafile("data/rpg.dat");
355>    if (!dat)
356>      return -1;
357>
358>    ammo 	= df_dat(df_get_item(dat, "ammo"));
359>    weapon 	= df_dat(df_get_item(dat, "weapon"));
360>    projectile  = df_dat(df_get_item(dat, "ejected"));
361>    status 	= df_dat(df_get_item(dat, "status"));
362>
363>    typenum = create_weapon_type("rpg");
364>    assign_weapon_handler(typenum, addressof("rpg"));
365>    
366>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
367>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
368>       
369>    return 0;
370>}
371>
372>
373>
374>
375>
376>
377>
378>void script_exit()
379>{
380>    unload_datafile(dat);
381>}
382>
383>
384>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(8119898)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(8119978)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(8119a50,8119aa8,8119b00,8119b58,8119bb0)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(8119cc8,8119d20)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(8119e08,8119e60,8119eb8)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(8119fb0,811a018,811a070,811a0c8,811a120)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(811a238)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(811a6c0,811a718)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(811a808)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(811a8e0,811a938,811a990,811a9e8)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(811aae8,811ab40)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(811ac30)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(811ad08,811ad60,811adb8)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(811aeb8)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(811af98,811b000,811b058)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(811b160,811b1b8,811b210,811b268)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(811b368,811b3c0,811b418)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(811b508,811b560,811b5b8)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(811b6b0,811b708,811b760,811b7b8)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(811b8b8)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(811b988)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(811ba58)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(811bb28,811bb80)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(811bc60,811bcb8)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(811bd98,811bdf0)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(811bed0,811bf38,811bf90,811bfe8)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(811c0e8,811c150,811c1a8,811c200,811c258)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(811c370,811c3c8,811c430,811c488)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(811c588)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(811c958,811c9b0,811c9f8,811ca40)>...
Declaration of `do_line' as <(811c6d0,811c738,811c790,811c7e8,811c840,811c898,811c8f0)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(811cb30,811cb98,811cbf0,811cc48,811cca0,811ccf8,811cd50,811cda8)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(811ce58,811cec0,811cf18,811cf80)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(811d080,811d0e8,811d140,811d198,811d1f0,811d248)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(812b4f0,812b3f8,812b388,812b2a8)>...
Declaration of `do_circle' as <(812b878,812b780,812b710,812b6b0,812b5b8,812b548)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(81146f8,8115cd8,8115d20,8114c60,8114cb8)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(8114d98,8114e00,8114e58,8114eb0,8129388)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8129aa8,8129b00,8129b48,8129b90)>...
Declaration of `do_ellipse' as <(8129498,8129500,8129558,81295b0,8129608,81299e8,8129a40)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(812a0d8,812a130,812a188,812a1e0,812a238,812a290)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(812a3b0,812a418,812ad20,812ad78,812add0,812ae28)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(812af48,812afb0,812b008,812b070)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(812b180,812b1e8,81151c8)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(81152b8,8115320,8115378,81153d0)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(81154d0,8115538,81155a0,81155f8,8115650,81156a8,8138030,8138088)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(81381c8,8138230,8138298,81382f0,8138348,81383a0,81383f8,8138450)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(8138598,8138600,8138668,81386c0,8138718,8138770,81387c8,8138820,8138878,81388d0)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(8138a38,8138aa0,8138b08,8138b60,8138bb8,8138c10)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(8138d38,8138da0,8138e08,8138e60,8138eb8)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(8138fd8,8139040,81390a8,8139100,8139158,81391b0)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(81392d0)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(81393a8,8139410,8139478,81394d0)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(81395d0)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(81396a0,8139708,8139770,81397d8,8139830,8139888)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(81399b0,8139a18,8139a80,8139ae8,8139b40,8139b98)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(8139cc0,8139d28,8139d90,8139df8,8139e50,8139ea8,8139f00,8139f58)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(813a098,813a100,813a168,813a1c0,813a218,813a270,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(813a3b8,813a420,813a488,813a4e0,813a538,813a590,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(813a6d0,813a738)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(813a828)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(813a910)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(813a9f0,813aa58,813aac0,813ab18)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(813ac50,813acb8,813ad20,813ad78)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(813aea8)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(813af90)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(813b0f0)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(813b350,813b3a8,813b400)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(813b4e0,813b538)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(813b620)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(813b708)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(813b7e8)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(813b8c8)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(813b9a8)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(813ba90)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(813bb70,813bbd8,813bc30,813bc88,813bce0)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(813bdf0)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(813bed8,813bf40,813bf98,813bff0,813c048)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(813c158)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(813c240)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(813c320,813c388)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(813c470,813c4d8,813c530)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(813c778)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(813c848,813c8b0)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(813ca18)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(813caf8,813cb60)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(813cc50)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(813cd30,813cd98)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(813ce80,813cee8)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(813cfd0)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(813d0b0)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(813d190)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(813d270,813d2c8)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(813d3b8,813d410)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(813d500)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(813d5e0)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(813d6c0,813d718)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(813d808,813d860)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(813d950,813d9b8,813da10)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(813db10,813db78,813dbd0)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(813dcd0,813dd38,813dd90)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(813de90,813def8)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(813dff0)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(813e0d0,813e138)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(813e228,813e290)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(813e380,813e3e8)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(813e4d8,813e540)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(813e630,813e698)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(813e788,813e7f0,813e858)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(813e958,813e9c0,813ea28)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(813eb28,813eb90,813ebf8)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(813ecf8,813ed60,813edc8)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(813eed0,813ef38,813ef90)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(813f088,813f0f0,813f148,813f1a0,813f1f8,813f250)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(813f378,813f3e0,813f438,813f490,813f4e8,813f540)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(813f790,813f7e8,813f840)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(813f668,813f6d0,813f728,813f8d8)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(813fda0)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(813fe80,813fee8)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(813ffd8)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(81400c0)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(81401a8,8140210)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(8140300,8140368)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(8140440,81404a8)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(8140588)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(8140668,81406d0)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(8140880)>...
Declaration of `df_foreach' as <(81407b0,8140818)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(8140990,81409f8)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(8140ad8)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(8140bb8)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(8140c98,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(8140e48,8140eb0,8140f08)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(8141170,81411c8)>...
Defining type 'weapon_handler_t' as *(8141170,81411c8)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(81412d0,8141328,8141390)>...
Defining type 'object_handler_t' as *(81412d0,8141328,8141390)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(81414f8)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(81415e8,8141640)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *projectile, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `projectile' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(8141a30,8141a88,8141af0)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(8141bf8,8141c50,8141cb8)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void rpg(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `rpg' as <(8141db8,8141e10)>...
Address:8
=======================>>ENTERING function `rpg'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `rpg'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/rpg.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 13
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2903 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2934 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 18
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2903 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2934 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    projectile  = df_dat(df_get_item(dat, "ejected"));
Symbol:projectile
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 25
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2903 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2934 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 320: MOV a0 , 33
 328: ADD a0 , ES
 332: PUSH a0
 336: PUSH [DS+4]
 344: CALLEX 2903 , 8
 356: ADD SP , 8
 364: PUSH a0
 368: CALLEX 2934 , 4
 380: ADD SP , 4
 388: MOV [DS+20] , a0

>    typenum = create_weapon_type("rpg");
Symbol:typenum
Symbol:create_weapon_type
 396: MOV a0 , 40
 404: ADD a0 , ES
 408: PUSH a0
 412: CALLEX 3084 , 4
 424: ADD SP , 4
 432: MOV [DS+24] , a0

>    assign_weapon_handler(typenum, addressof("rpg"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 440: MOV a0 , 44
 448: ADD a0 , ES
 452: PUSH a0
 456: CALLEX 2797 , 4
 468: ADD SP , 4
 476: PUSH a0
 480: PUSH [DS+24]
 488: CALLEX 3114 , 8
 500: ADD SP , 8

>    create_object_type("rpg;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 508: MOV a0 , 48
 516: ADD a0 , ES
Symbol:addressof
 520: PUSH a0
 524: MOV a1 , 57
 532: ADD a1 , ES
 536: PUSH a1
 540: CALLEX 2797 , 4
 552: MOV a1 , a0
 556: ADD SP , 4
 564: POP a0
Symbol:ammo
 568: PUSH [DS+8]
 576: PUSH a1
 580: PUSH a0
 584: CALLEX 3057 , 12
 596: ADD SP , 12

>    create_object_type("rpg;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 604: MOV a0 , 69
 612: ADD a0 , ES
Symbol:addressof
 616: PUSH a0
 620: MOV a1 , 80
 628: ADD a1 , ES
 632: PUSH a1
 636: CALLEX 2797 , 4
 648: MOV a1 , a0
 652: ADD SP , 4
 660: POP a0
Symbol:weapon
 664: PUSH [DS+12]
 672: PUSH a1
 676: PUSH a0
 680: CALLEX 3057 , 12
 692: ADD SP , 12

>    return 0;
 700: MOV a0 , 0
 708: LEAVE 
 709: RET 
 710: LEAVE 
 711: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:712
=======================>>ENTERING function `script_exit'!
 712: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 716: PUSH [DS+4]
 724: CALLEX 1650 , 4
 736: ADD SP , 4
 744: LEAVE 
 745: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(81412d0,8141328,8141390)'
 weapon_handler_t : `*(8141170,81411c8)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+712
 script_main : `()' at CS+12
      rpg : `(8141db8,8141e10)' at CS+8
 weapon_pickup : `(8141bf8,8141c50,8141cb8)' at CS+4
 ammo_pickup : `(8141a30,8141a88,8141af0)' at CS+0
  typenum : at DS+24
   status : `*' at DS+20
 projectile : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(81415e8,8141640)' at 3114
 create_weapon_type : `(81414f8)' at 3084
 create_object_type : `(8140e48,8140eb0,8140f08)' at 3057
   printf : `(8140c98,...)' at 3030
    bmp_h : `(8140bb8)' at 3015
    bmp_w : `(8140ad8)' at 3001
 bmp_line : `(8140990,81409f8)*' at 2987
 df_foreach : `(81407b0,8140818)' at 2970
 df_count : `(8140668,81406d0)' at 2951
   df_dat : `(8140588)*' at 2934
  df_item : `(8140440,81404a8)*' at 2919
 df_get_item : `(8140300,8140368)*' at 2903
 df_get_item_num : `(81401a8,8140210)' at 2883
 add_tiles_pack : `(81400c0)' at 2859
 add_script : `(813ffd8)' at 2836
 exec_script : `(813fe80,813fee8)' at 2817
 addressof : `(813fda0)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(813f668,813f6d0,813f728,813f8d8)' at 2639
 create_trans_table : `(813f378,813f3e0,813f438,813f490,813f4e8,813f540)' at 2612
 create_light_table : `(813f088,813f0f0,813f148,813f1a0,813f1f8,813f250)' at 2585
 create_rgb_table : `(813eed0,813ef38,813ef90)' at 2558
 save_tga : `(813ecf8,813ed60,813edc8)' at 2533
 save_pcx : `(813eb28,813eb90,813ebf8)' at 2516
 save_bmp : `(813e958,813e9c0,813ea28)' at 2499
 save_bitmap : `(813e788,813e7f0,813e858)' at 2482
 load_tga : `(813e630,813e698)*' at 2462
 load_pcx : `(813e4d8,813e540)*' at 2445
 load_lbm : `(813e380,813e3e8)*' at 2428
 load_bmp : `(813e228,813e290)*' at 2411
 load_bitmap : `(813e0d0,813e138)*' at 2394
 get_filename : `(813dff0)*' at 2374
 pack_fputs : `(813de90,813def8)' at 2353
 pack_fgets : `(813dcd0,813dd38,813dd90)*' at 2334
 pack_fwrite : `(813db10,813db78,813dbd0)' at 2315
 pack_fread : `(813d950,813d9b8,813da10)' at 2295
 pack_mputl : `(813d808,813d860)' at 2276
 pack_mputw : `(813d6c0,813d718)' at 2257
 pack_mgetl : `(813d5e0)' at 2238
 pack_mgetw : `(813d500)' at 2219
 pack_iputl : `(813d3b8,813d410)' at 2200
 pack_iputw : `(813d270,813d2c8)' at 2181
 pack_igetl : `(813d190)' at 2162
 pack_igetw : `(813d0b0)' at 2143
 pack_fclose_chunk : `(813cfd0)*' at 2124
 pack_fopen_chunk : `(813ce80,813cee8)*' at 2098
 pack_fseek : `(813cd30,813cd98)' at 2073
 pack_fclose : `(813cc50)' at 2054
 pack_fopen : `(813caf8,813cb60)*' at 2034
 packfile_password : `(813ca18)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(813c848,813c8b0)' at 1963
 midi_seek : `(813c778)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(813c470,813c4d8,813c530)' at 1871
 play_midi : `(813c320,813c388)' at 1846
 destroy_midi : `(813c240)' at 1828
 load_midi : `(813c158)*' at 1807
 adjust_sample : `(813bed8,813bf40,813bf98,813bff0,813c048)' at 1789
 stop_sample : `(813bdf0)' at 1767
 play_sample : `(813bb70,813bbd8,813bc30,813bc88,813bce0)' at 1747
 destroy_sample : `(813ba90)' at 1727
 load_voc : `(813b9a8)*' at 1704
 load_wav : `(813b8c8)*' at 1687
 load_sample : `(813b7e8)*' at 1670
 unload_datafile : `(813b708)' at 1650
 load_datafile : `(813b620)*' at 1626
 set_volume : `(813b4e0,813b538)' at 1604
 install_sound : `(813b350,813b3a8,813b400)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(813b0f0)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(813af90)' at 1437
 open_fli : `(813aea8)' at 1413
 play_memory_fli : `(813ac50,813acb8,813ad20,813ad78)' at 1396
 play_fli : `(813a9f0,813aa58,813aac0,813ab18)' at 1372
 destroy_font : `(813a910)' at 1355
 text_height : `(813a828)' at 1334
 text_length : `(813a6d0,813a738)' at 1314
 textprintf_centre : `(813a3b8,813a420,813a488,813a4e0,813a538,813a590,...)' at 1294
 textprintf : `(813a098,813a100,813a168,813a1c0,813a218,813a270,...)' at 1268
 textout_justify : `(8139cc0,8139d28,8139d90,8139df8,8139e50,8139ea8,8139f00,8139f58)' at 1249
 textout_centre : `(81399b0,8139a18,8139a80,8139ae8,8139b40,8139b98)' at 1225
  textout : `(81396a0,8139708,8139770,81397d8,8139830,8139888)' at 1202
 text_mode : `(81395d0)' at 1186
 draw_trans_sprite : `(81393a8,8139410,8139478,81394d0)' at 1168
    clear : `(81392d0)' at 1142
 rotate_scaled_sprite : `(8138fd8,8139040,81390a8,8139100,8139158,81391b0)' at 1128
 rotate_sprite : `(8138d38,8138da0,8138e08,8138e60,8138eb8)' at 1099
 stretch_sprite : `(8138a38,8138aa0,8138b08,8138b60,8138bb8,8138c10)' at 1077
 stretch_blit : `(8138598,8138600,8138668,81386c0,8138718,8138770,81387c8,8138820,8138878,81388d0)' at 1054
 masked_blit : `(81381c8,8138230,8138298,81382f0,8138348,81383a0,81383f8,8138450)' at 1033
     blit : `(81154d0,8115538,81155a0,81155f8,8115650,81156a8,8138030,8138088)' at 1013
 floodfill : `(81152b8,8115320,8115378,81153d0)' at 1000
   spline : `(812b180,812b1e8,81151c8)' at 982
 calc_spline : `(812af48,812afb0,812b008,812b070)' at 967
 ellipsefill : `(812a3b0,812a418,812ad20,812ad78,812add0,812ae28)' at 947
  ellipse : `(812a0d8,812a130,812a188,812a1e0,812a238,812a290)' at 927
 do_ellipse : `(8129498,8129500,8129558,81295b0,8129608,81299e8,8129a40)' at 911
 circlefill : `(8114d98,8114e00,8114e58,8114eb0,8129388)' at 892
   circle : `(81146f8,8115cd8,8115d20,8114c60,8114cb8)' at 873
 do_circle : `(812b878,812b780,812b710,812b6b0,812b5b8,812b548)' at 858
     rect : `(811d080,811d0e8,811d140,811d198,811d1f0,811d248)' at 840
  polygon : `(811ce58,811cec0,811cf18,811cf80)' at 827
 triangle : `(811cb30,811cb98,811cbf0,811cc48,811cca0,811ccf8,811cd50,811cda8)' at 811
  do_line : `(811c6d0,811c738,811c790,811c7e8,811c840,811c898,811c8f0)' at 794
 solid_mode : `()' at 778
 xor_mode : `(811c588)' at 759
 drawing_mode : `(811c370,811c3c8,811c430,811c488)' at 742
 set_clip : `(811c0e8,811c150,811c1a8,811c200,811c258)' at 721
 putpixel : `(811bed0,811bf38,811bf90,811bfe8)' at 704
 getb_depth : `(811bd98,811bdf0)' at 687
 getg_depth : `(811bc60,811bcb8)' at 668
 getr_depth : `(811bb28,811bb80)' at 649
     getb : `(811ba58)' at 630
     getg : `(811b988)' at 617
     getr : `(811b8b8)' at 604
 makecol_depth : `(811b6b0,811b708,811b760,811b7b8)' at 591
 makecol8 : `(811b508,811b560,811b5b8)' at 569
  makecol : `(811b368,811b3c0,811b418)' at 552
 bestfit_color : `(811b160,811b1b8,811b210,811b268)' at 536
 generate_optimized_palette : `(811af98,811b000,811b058)' at 514
 generate_332_palette : `(811aeb8)' at 479
 get_pallete_range : `(811ad08,811ad60,811adb8)' at 450
 get_pallete : `(811ac30)' at 424
 get_color : `(811aae8,811ab40)' at 404
 set_pallete_range : `(811a8e0,811a938,811a990,811a9e8)' at 386
 set_pallete : `(811a808)' at 360
 set_color : `(811a6c0,811a718)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(811a238)' at 288
 create_sub_bitmap : `(8119fb0,811a018,811a070,811a0c8,811a120)*' at 265
 create_bitmap_ex : `(8119e08,8119e60,8119eb8)*' at 239
 create_bitmap : `(8119cc8,8119d20)*' at 214
 set_gfx_mode : `(8119a50,8119aa8,8119b00,8119b58,8119bb0)' at 192
 set_color_conversion : `(8119978)' at 171
 set_color_depth : `(8119898)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:746
Inits size:0
Consts size:94
Data size:28
Stack size:4000
REALLOC from 4090 to 4712!!
Doing CleanUp................................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135536783
with addr:134523620 and params:0
Importing allegro_exit at 135536804
with addr:134523572 and params:0
Importing install_mouse at 135536826
with addr:134522724 and params:0
Importing install_timer at 135536848
with addr:134523556 and params:0
Importing install_keyboard at 135536873
with addr:134523524 and params:0
Importing screen at 135536888
with addr:134718664 and params:-1
Importing set_color_depth at 135536912
with addr:134523604 and params:4
Importing set_color_conversion at 135536941
with addr:134521924 and params:4
Importing set_gfx_mode at 135536962
with addr:134521700 and params:20
Importing create_bitmap at 135536984
with addr:134522932 and params:8
Importing create_bitmap_ex at 135537009
with addr:134522708 and params:12
Importing create_sub_bitmap at 135537035
with addr:134521860 and params:20
Importing destroy_bitmap at 135537058
with addr:134523428 and params:4
Importing rgb_map at 135537074
with addr:134719860 and params:-1
Importing color_map at 135537092
with addr:134719852 and params:-1
Importing set_color at 135537110
with addr:134523380 and params:8
Importing set_pallete at 135537130
with addr:134522148 and params:1024
Importing set_pallete_range at 135537156
with addr:134522228 and params:1036
Importing get_color at 135537174
with addr:134523316 and params:8
Importing get_pallete at 135537194
with addr:134521972 and params:1024
Importing get_pallete_range at 135537220
with addr:134524116 and params:1032
Importing generate_332_palette at 135537249
with addr:134521572 and params:1024
Importing generate_optimized_palette at 135537284
with addr:134523668 and params:1284
Importing bestfit_color at 135537306
with addr:134522820 and params:1036
Importing makecol at 135537322
with addr:134523988 and params:12
Importing makecol8 at 135537339
with addr:134524068 and params:12
Importing makecol_depth at 135537361
with addr:134522564 and params:16
Importing getr at 135537374
with addr:134522788 and params:4
Importing getg at 135537387
with addr:134523636 and params:4
Importing getb at 135537400
with addr:134523812 and params:4
Importing getr_depth at 135537419
with addr:134523716 and params:8
Importing getg_depth at 135537438
with addr:134522180 and params:8
Importing getb_depth at 135537457
with addr:134523140 and params:8
Importing putpixel at 135537474
with addr:134521876 and params:16
Importing set_clip at 135537491
with addr:134523508 and params:20
Importing drawing_mode at 135537512
with addr:134521556 and params:16
Importing xor_mode at 135537529
with addr:134522340 and params:4
Importing solid_mode at 135537548
with addr:134521780 and params:0
Importing do_line at 135537564
with addr:134523188 and params:28
Importing triangle at 135537581
with addr:134521812 and params:32
Importing polygon at 135537597
with addr:134522132 and params:16
Importing rect at 135537610
with addr:134523652 and params:24
Importing do_circle at 135537628
with addr:134521588 and params:24
Importing circle at 135537643
with addr:134522676 and params:20
Importing circlefill at 135537662
with addr:134523700 and params:20
Importing do_ellipse at 135537681
with addr:134522020 and params:28
Importing ellipse at 135537697
with addr:134524036 and params:24
Importing ellipsefill at 135537717
with addr:134521668 and params:24
Importing calc_spline at 135537737
with addr:134522772 and params:16
Importing spline at 135537752
with addr:134521716 and params:40
Importing floodfill at 135537770
with addr:134522996 and params:16
Importing blit at 135537783
with addr:134523172 and params:32
Importing masked_blit at 135537803
with addr:134524132 and params:32
Importing stretch_blit at 135537824
with addr:134524052 and params:40
Importing stretch_sprite at 135537847
with addr:134523492 and params:24
Importing rotate_sprite at 135537869
with addr:134523764 and params:20
Importing rotate_scaled_sprite at 135537898
with addr:134522212 and params:24
Importing clear at 135537912
with addr:134522532 and params:4
Importing draw_trans_sprite at 135537938
with addr:134522100 and params:16
Importing text_mode at 135537956
with addr:134523300 and params:4
Importing textout at 135537972
with addr:134521652 and params:24
Importing textout_centre at 135537995
with addr:134522868 and params:24
Importing textout_justify at 135538019
with addr:134522484 and params:32
Importing textprintf at 135538038
with addr:134521620 and params:24
Importing textprintf_centre at 135538064
with addr:134522612 and params:24
Importing text_length at 135538084
with addr:134522756 and params:8
Importing text_height at 135538104
with addr:134521748 and params:4
Importing destroy_font at 135538125
with addr:134523396 and params:4
Importing play_fli at 135538142
with addr:134523892 and params:16
Importing play_memory_fli at 135538166
with addr:134522372 and params:16
Importing open_fli at 135538183
with addr:134523476 and params:4
Importing open_memory_fli at 135538207
with addr:134521636 and params:4
Importing close_fli at 135538225
with addr:134522404 and params:0
Importing next_fli_frame at 135538248
with addr:134522884 and params:4
Importing reset_fli_variables at 135538276
with addr:134521844 and params:0
Importing fli_bitmap at 135538295
with addr:134718660 and params:-1
Importing fli_pallete at 135538315
with addr:134718680 and params:-1
Importing fli_frame at 135538333
with addr:134719856 and params:-1
Importing install_sound at 135538355
with addr:134523924 and params:12
Importing set_volume at 135538374
with addr:134522116 and params:8
Importing load_datafile at 135538396
with addr:134524084 and params:4
Importing unload_datafile at 135538420
with addr:134523876 and params:4
Importing load_sample at 135538440
with addr:134522276 and params:4
Importing load_wav at 135538457
with addr:134522580 and params:4
Importing load_voc at 135538474
with addr:134522004 and params:4
Importing destroy_sample at 135538497
with addr:134523956 and params:4
Importing play_sample at 135538517
with addr:134522164 and params:20
Importing stop_sample at 135538537
with addr:134523940 and params:4
Importing adjust_sample at 135538559
with addr:134522356 and params:20
Importing load_midi at 135538577
with addr:134523044 and params:4
Importing destroy_midi at 135538598
with addr:134522388 and params:4
Importing play_midi at 135538616
with addr:134522260 and params:8
Importing play_looped_midi at 135538641
with addr:134523236 and params:12
Importing stop_midi at 135538659
with addr:134521956 and params:0
Importing midi_pause at 135538678
with addr:134523092 and params:0
Importing midi_resume at 135538698
with addr:134523364 and params:0
Importing midi_seek at 135538716
with addr:134522500 and params:4
Importing midi_out at 135538733
with addr:134522804 and params:8
Importing load_midi_patches at 135538759
with addr:134522308 and params:0
Importing packfile_password at 135538785
with addr:134523220 and params:4
Importing pack_fopen at 135538804
with addr:134523012 and params:8
Importing pack_fclose at 135538824
with addr:134522964 and params:4
Importing pack_fseek at 135538843
with addr:134523412 and params:8
Importing pack_fopen_chunk at 135538868
with addr:134521828 and params:8
Importing pack_fclose_chunk at 135538894
with addr:134523972 and params:4
Importing pack_igetw at 135538913
with addr:134523108 and params:4
Importing pack_igetl at 135538932
with addr:134522292 and params:4
Importing pack_iputw at 135538951
with addr:134522036 and params:8
Importing pack_iputl at 135538970
with addr:134522052 and params:8
Importing pack_mgetw at 135538989
with addr:134522436 and params:4
Importing pack_mgetl at 135539008
with addr:134524020 and params:4
Importing pack_mputw at 135539027
with addr:134522244 and params:8
Importing pack_mputl at 135539046
with addr:134523268 and params:8
Importing pack_fread at 135539065
with addr:134522948 and params:12
Importing pack_fwrite at 135539085
with addr:134523460 and params:12
Importing pack_fgets at 135539104
with addr:134522068 and params:12
Importing pack_fputs at 135539123
with addr:134522084 and params:8
Importing get_filename at 135539144
with addr:134522548 and params:4
Importing load_bitmap at 135539164
with addr:134522916 and params:8
Importing load_bmp at 135539181
with addr:134521604 and params:8
Importing load_lbm at 135539198
with addr:134523444 and params:8
Importing load_pcx at 135539215
with addr:134522196 and params:8
Importing load_tga at 135539232
with addr:134523204 and params:8
Importing save_bitmap at 135539252
with addr:134522660 and params:12
Importing save_bmp at 135539269
with addr:134523780 and params:12
Importing save_pcx at 135539286
with addr:134522596 and params:12
Importing save_tga at 135539303
with addr:134523076 and params:12
Importing create_rgb_table at 135539328
with addr:134523828 and params:1032
Importing create_light_table at 135539355
with addr:134524100 and params:1044
Importing create_trans_table at 135539382
with addr:134523124 and params:1044
Importing create_color_table at 135539409
with addr:134523028 and params:1036
Importing mouse_x at 135539425
with addr:134718656 and params:-1
Importing mouse_y at 135539441
with addr:134719844 and params:-1
Importing mouse_b at 135539457
with addr:134718676 and params:-1
Importing mouse_pos at 135539475
with addr:134719848 and params:-1
Importing freeze_mouse_flag at 135539501
with addr:134719704 and params:-1
Importing keypressed at 135539520
with addr:134522692 and params:0
Importing readkey at 135539536
with addr:134523748 and params:0
Importing dbuf at 135539549
with addr:134719920 and params:-1
Importing addressof at 135539567
with addr:134525100 and params:4
Importing exec_script at 135539587
with addr:134525120 and params:8
Importing add_script at 135539606
with addr:134524800 and params:4
Importing add_tiles_pack at 135539629
with addr:134525492 and params:4
Importing df_get_item_num at 135539653
with addr:134524416 and params:8
Importing df_get_item at 135539673
with addr:134524504 and params:8
Importing df_item at 135539689
with addr:134524540 and params:8
Importing df_dat at 135539704
with addr:134524564 and params:4
Importing df_count at 135539721
with addr:134524584 and params:8
Importing df_foreach at 135539740
with addr:134524636 and params:8
Importing bmp_line at 135539757
with addr:134524708 and params:8
Importing bmp_w at 135539771
with addr:134524744 and params:4
Importing bmp_h at 135539785
with addr:134524764 and params:4
Importing printf at 135539800
with addr:134523252 and params:4
Importing create_object_type at 135539827
with addr:134530064 and params:12
Importing create_weapon_type at 135539854
with addr:134530336 and params:4
Importing assign_weapon_handler at 135539884
with addr:134530444 and params:8
Importing  at 135539893

0:Address 0, size 0,Calling 105
Size of params:0


Executing function from rpg.sc!
 12:ENTER 135364320 
NOP 
NOP 
NOP 
 16:{a0(=$1076136184),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135540647)}ADD
 28:a0(=$135540647) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$-132122593),a0(=$135554304)}MOV
 60:{a0(=$135554304),[4]DS(=$135554304)}MOV
 68:a0(=$135554304) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$000d(=$13)}MOV
 100:{a0(=$13),a242(=$135540647)}ADD
 104:a0(=$135540660) PUSH (SP=3992) 
 108:[4]DS(=$135554304) PUSH (SP=3988) 
 116:{$0b57(=$2903),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135554304) PUSH (SP=3992) 
 140:{$0b76(=$2934),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$-132173240),a0(=$135558752)}MOV
 168:{a0(=$135558752),$0012(=$18)}MOV
 176:{a0(=$18),a242(=$135540647)}ADD
 180:a0(=$135540665) PUSH (SP=3992) 
 184:[4]DS(=$135554304) PUSH (SP=3988) 
 192:{$0b57(=$2903),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$135554560) PUSH (SP=3992) 
 216:{$0b76(=$2934),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$-132122593),a0(=$135558200)}MOV
 244:{a0(=$135558200),$0019(=$25)}MOV
 252:{a0(=$25),a242(=$135540647)}ADD
 256:a0(=$135540672) PUSH (SP=3992) 
 260:[4]DS(=$135554304) PUSH (SP=3988) 
 268:{$0b57(=$2903),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$0) PUSH (SP=3992) 
 292:{$0b76(=$2934),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$-132122593),a0(=$0)}MOV
 320:{a0(=$0),$0021(=$33)}MOV
 328:{a0(=$33),a242(=$135540647)}ADD
 332:a0(=$135540680) PUSH (SP=3992) 
 336:[4]DS(=$135554304) PUSH (SP=3988) 
 344:{$0b57(=$2903),$0008(=$8)}CALLEX
 356:{a245(=$3988),$0008(=$8)}ADD
 364:a0(=$135554544) PUSH (SP=3992) 
 368:{$0b76(=$2934),$0004(=$4)}CALLEX
 380:{a245(=$3992),$0004(=$4)}ADD
 388:{[20]DS(=$-132122593),a0(=$135557296)}MOV
 396:{a0(=$135557296),$0028(=$40)}MOV
 404:{a0(=$40),a242(=$135540647)}ADD
 408:a0(=$135540687) PUSH (SP=3992) 
 412:{$0c0c(=$3084),$0004(=$4)}CALLEX
 424:{a245(=$3992),$0004(=$4)}ADD
 432:{[24]DS(=$-132122593),a0(=$0)}MOV
 440:{a0(=$0),$002c(=$44)}MOV
 448:{a0(=$44),a242(=$135540647)}ADD
 452:a0(=$135540691) PUSH (SP=3992) 
 456:{$0aed(=$2797),$0004(=$4)}CALLEX
 468:{a245(=$3992),$0004(=$4)}ADD
 476:a0(=$-1) PUSH (SP=3992) 
 480:[24]DS(=$0) PUSH (SP=3988) 
 488:{$0c2a(=$3114),$0008(=$8)}CALLEX
 500:{a245(=$3988),$0008(=$8)}ADD
 508:{a0(=$0),$0030(=$48)}MOV
 516:{a0(=$48),a242(=$135540647)}ADD
 520:a0(=$135540695) PUSH (SP=3992) 
 524:{a1(=$1076136184),$0039(=$57)}MOV
 532:{a1(=$57),a242(=$135540647)}ADD
 536:a1(=$135540704) PUSH (SP=3988) 
 540:{$0aed(=$2797),$0004(=$4)}CALLEX
 552:{a1(=$135540704),a0(=$-1)}MOV
 556:{a245(=$3988),$0004(=$4)}ADD
 564:a0(=$-1) POP (SP=3996) 
 568:[8]DS(=$135558752) PUSH (SP=3992) 
 576:a1(=$-1) PUSH (SP=3988) 
 580:a0(=$135540695) PUSH (SP=3984) 
 584:{$0bf1(=$3057),$000c(=$12)}CALLEX
 596:{a245(=$3984),$000c(=$12)}ADD
 604:{a0(=$0),$0045(=$69)}MOV
 612:{a0(=$69),a242(=$135540647)}ADD
 616:a0(=$135540716) PUSH (SP=3992) 
 620:{a1(=$-1),$0050(=$80)}MOV
 628:{a1(=$80),a242(=$135540647)}ADD
 632:a1(=$135540727) PUSH (SP=3988) 
 636:{$0aed(=$2797),$0004(=$4)}CALLEX
 648:{a1(=$135540727),a0(=$-1)}MOV
 652:{a245(=$3988),$0004(=$4)}ADD
 660:a0(=$-1) POP (SP=3996) 
 664:[12]DS(=$135558200) PUSH (SP=3992) 
 672:a1(=$-1) PUSH (SP=3988) 
 676:a0(=$135540716) PUSH (SP=3984) 
 680:{$0bf1(=$3057),$000c(=$12)}CALLEX
 692:{a245(=$3984),$000c(=$12)}ADD
 700:{a0(=$1),$0000(=$0)}MOV
 708:LEAVE 
RET SP=4000,CP=4000
EXIT

 104:{a245(=$3992),$0004(=$4)}ADD
 112:{a0(=$0),$002e(=$46)}MOV
 120:{a0(=$46),a242(=$135323843)}ADD
 124:a0(=$135323889) PUSH (SP=3992) 
 128:{$0b14(=$2836),$0004(=$4)}CALLEX 1> 
 2>
 3>
 4>
 5>
 6>#! 0 "scripts/allegro.sh"
 7> 
 8>
 9>
10>
11>
12>
13>
14>
15>
16>
17>
18>
19>
20>
21>
22>
23>
24>
25>
26>
27>typedef void BITMAP;
28>typedef void MIDI;
29>typedef void SAMPLE;
30>typedef void FONT;
31>typedef void PACKFILE;
32>typedef void DATAFILE;
33>
34>import int allegro_init();
35>import void allegro_exit();
36>import int install_mouse();
37>import int install_timer();
38>import int install_keyboard();
39>
40>import BITMAP *screen;
41>import void set_color_depth(int depth);
42>import void set_color_conversion(int mode);
43>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
44>import BITMAP *create_bitmap(int width, int height);
45>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
46>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
47>
48>import void destroy_bitmap(BITMAP *bitmap);
49>
50>
51>
52>typedef int RGB;
53>typedef RGB PALLETE[256];
54>
55>struct RGB_MAP{
56>   unsigned char data[32][32][32];
57>};
58>
59>struct COLOR_MAP{
60>   unsigned char data[256][256];
61>};
62>import RGB_MAP *rgb_map;
63>import COLOR_MAP *color_map;
64>
65>import void set_color(int index, RGB *p);
66>import void set_pallete(PALLETE p);
67>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
68>import void get_color(int index, RGB *p);
69>import void get_pallete(PALLETE p);
70>import void get_pallete_range(PALLETE p, int from, int to);
71>import void generate_332_palette(PALLETE pal);
72>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
73>import int bestfit_color(PALLETE pal, int r, int g, int b);
74>import int makecol(int r, int g, int b);
75>import int makecol8(int r, int g, int b);
76>import int makecol_depth(int color_depth, int r, int g, int b);
77>import int getr(int c);
78>import int getg(int c);
79>import int getb(int c);
80>import int getr_depth(int color_depth, int c);
81>import int getg_depth(int color_depth, int c);
82>import int getb_depth(int color_depth, int c);
83>
84>
85>
86>
87>
88>
89>
90>
91>
92>
93>
94>
95>
96>
97>
98>
99>import void putpixel(BITMAP *bmp, int x, int y, int color);
100>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
101>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
102>import void xor_mode(int xor);
103>import void solid_mode();
104>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
105>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
106>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
107>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
108>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
109>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
110>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
111>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
112>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
113>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
114>import void calc_spline(int *points, int npts, int *x, int *y);
115>import void spline(BITMAP *bmp, int points[8], int color);
116>import void floodfill(BITMAP *bmp, int x, int y, int color);
117>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
118>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
119>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
120>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
121>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
122>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
123>
124>import void clear(BITMAP *bitmap);
125>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
126>
127>import void text_mode(int mode);
128>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
129>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
130>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
131>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
132>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
133>import int text_length(FONT *f,  char *str);
134>import int text_height(FONT *f);
135>import void destroy_font(FONT *f);
136>
137>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
138>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
139>import int open_fli(char *filename);
140>import int open_memory_fli(void *fli_data);
141>import void close_fli();
142>import int next_fli_frame(int loop);
143>import void reset_fli_variables();
144>import BITMAP *fli_bitmap;              
145>import PALLETE fli_pallete;             
146>
147>import int fli_frame;                   
148>
149>
150>
151>
152>
153>
154>
155>import int install_sound(int digi_card, int midi_card, char *cfg_path);
156>import void set_volume(int digi_volume, int midi_volume);
157>
158>import DATAFILE *load_datafile(char *filename);
159>import void unload_datafile(DATAFILE *dat);
160>
161>import SAMPLE *load_sample(char *filename);
162>import SAMPLE *load_wav(char *filename);
163>import SAMPLE *load_voc(char *filename);
164>
165>import void destroy_sample(SAMPLE *spl);
166>
167>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
168>import void stop_sample(SAMPLE *spl);
169>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
170>
171>import MIDI *load_midi(char *filename);
172>import void destroy_midi(MIDI *midi);
173>import int play_midi(MIDI *midi, int loop);
174>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
175>import void stop_midi();
176>import void midi_pause();
177>import void midi_resume();
178>import int midi_seek(int target);
179>import void midi_out( char *data, int length);
180>import int load_midi_patches();
181>
182>import void packfile_password(char *password);
183>import PACKFILE *pack_fopen(char *filename, char *mode);
184>import int pack_fclose(PACKFILE *f);
185>import int pack_fseek(PACKFILE *f, int offset);
186>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
187>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
188>import int pack_igetw(PACKFILE *f);
189>import int pack_igetl(PACKFILE *f);
190>import int pack_iputw(int w, PACKFILE *f);
191>import int pack_iputl(int l, PACKFILE *f);
192>import int pack_mgetw(PACKFILE *f);
193>import int pack_mgetl(PACKFILE *f);
194>import int pack_mputw(int w, PACKFILE *f);
195>import int pack_mputl(int l, PACKFILE *f);
196>import int pack_fread(void *p, int n, PACKFILE *f);
197>import int pack_fwrite(void *p, int n, PACKFILE *f);
198>import char *pack_fgets(char *p, int max, PACKFILE *f);
199>import int pack_fputs(char *p, PACKFILE *f);
200>
201>import char *get_filename(char *path);
202>
203>import BITMAP *load_bitmap(char *filename, RGB *pal);
204>import BITMAP *load_bmp(char *filename, RGB *pal);
205>import BITMAP *load_lbm(char *filename, RGB *pal);
206>import BITMAP *load_pcx(char *filename, RGB *pal);
207>import BITMAP *load_tga(char *filename, RGB *pal);
208>
209>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
210>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
211>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
212>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
213>
214>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
215>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
216>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
217>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
218>
219>
220>
221>import int mouse_x;
222>import int mouse_y;
223>import int mouse_b;
224>import int mouse_pos;
225>
226>import int freeze_mouse_flag;
227>
228>import int keypressed();
229>import int readkey();
230>
231>
232>
233>
234>
235>#! 6 "!!_internal_Script"
236>#! 0 "scripts/imports.sh"
237>
238>
239>
240>
241> 
242>
243>#! 0 "scripts/_imports.sh"
244> 
245> 
246> 
247>
248> 
249>typedef unsigned int msg_t;	       
250>typedef int seer_addr;		       
251>
252> 
253>import        BITMAP *dbuf;		       
254>
255> 
256>import int addressof(char *symbol);	       		
257>import int exec_script(char *filename, char *func);	
258>import int add_script(char *filename);	       		
259>
260> 
261>import void add_tiles_pack(char *filename);   
262>
263> 
264>import int df_get_item_num(DATAFILE *dat, char *name);   	
265>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
266>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
267>import void *df_dat(DATAFILE *d);	       			
268>import int df_count(DATAFILE *dat, int type); 			
269>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
270>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
271>import int bmp_w(BITMAP *b);		
272>import int bmp_h(BITMAP *b);
273>import        int printf (char* format, ...); 
274>
275> 
276>typedef void object_def_t;
277>typedef void object_t;
278>import int create_object_type(char *name, int handler, BITMAP *icon);	
279>
280> 
281>
282>struct player_t {
283>unsigned int x, y;
284>};
285>
286> 
287>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
288>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
289>typedef void weapon_type_t;	       
290>import int create_weapon_type(char *name);    
291>import int assign_weapon_handler(int typenum, seer_addr handler);
292>
293>#! 7 "scripts/imports.sh"
294>
295>
296>#! 7 "!!_internal_Script"
297>
298>export script_main;
299>export script_exit;
300>
301>
302>DATAFILE *dat;
303>BITMAP *ammo, *weapon, *status;
304>int typenum;
305>
306>
307>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
308>{
309>    
310>
311>
312>
313>
314>
315>
316>	
317>}
318>
319>
320>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
321>{
322>    
323>
324>
325>
326>
327>
328>
329>
330>
331>}
332>
333>
334>void shotgun(msg_t msg, player_t *pl)
335>{
336>    
337>
338>
339>
340>
341>
342>
343>
344>
345>}
346>
347>
348>
349>
350>
351>
352>int script_main()
353>{
354>    dat = load_datafile("data/shotgun.dat");
355>    if (!dat)
356>      return -1;
357>
358>    ammo 	= df_dat(df_get_item(dat, "ammo"));
359>    weapon 	= df_dat(df_get_item(dat, "weapon"));
360>    status 	= df_dat(df_get_item(dat, "status"));
361>
362>    typenum = create_weapon_type("shotgun");
363>    assign_weapon_handler(typenum, addressof("shotgun"));
364>    
365>    create_object_type("shotgun;ammo", addressof("ammo_pickup"), ammo);
366>    create_object_type("shotgun;weapon", addressof("weapon_pickup"), weapon);
367>       
368>    return 0;
369>}
370>
371>
372>
373>
374>
375>
376>
377>void script_exit()
378>{
379>    unload_datafile(dat);
380>}
381>
382>
383>   

>#! 0 "scripts/allegro.sh"

>typedef void BITMAP;
Reading declaration:type is a standard `void'
Declaration of `BITMAP'...
Defining type 'BITMAP'

>typedef void MIDI;
Reading declaration:type is a standard `void'
Declaration of `MIDI'...
Defining type 'MIDI'

>typedef void SAMPLE;
Reading declaration:type is a standard `void'
Declaration of `SAMPLE'...
Defining type 'SAMPLE'

>typedef void FONT;
Reading declaration:type is a standard `void'
Declaration of `FONT'...
Defining type 'FONT'

>typedef void PACKFILE;
Reading declaration:type is a standard `void'
Declaration of `PACKFILE'...
Defining type 'PACKFILE'

>typedef void DATAFILE;
Reading declaration:type is a standard `void'
Declaration of `DATAFILE'...
Defining type 'DATAFILE'

>import int allegro_init();
Reading declaration:type is a standard `int'
Declaration of `allegro_init' as <()>...
Count...
End.
Adding import allegro_init with 0 params
Type is:int
at 13

>import void allegro_exit();
Reading declaration:type is a standard `void'
Declaration of `allegro_exit' as <()>...
Count...
End.
Adding import allegro_exit with 0 params
Type is:void
at 34

>import int install_mouse();
Reading declaration:type is a standard `int'
Declaration of `install_mouse' as <()>...
Count...
End.
Adding import install_mouse with 0 params
Type is:int
at 56

>import int install_timer();
Reading declaration:type is a standard `int'
Declaration of `install_timer' as <()>...
Count...
End.
Adding import install_timer with 0 params
Type is:int
at 78

>import int install_keyboard();
Reading declaration:type is a standard `int'
Declaration of `install_keyboard' as <()>...
Count...
End.
Adding import install_keyboard with 0 params
Type is:int
at 103

>import BITMAP *screen;
Reading declaration:type is user-defined `BITMAP'
Declaration of `screen' as <*>...
Adding import screen with 0 params
Type is:pointer
at 118

>import void set_color_depth(int depth);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `depth'...
Declaration of `set_color_depth' as <(81182a8)>...
Count...
End.
Adding import set_color_depth with 4 params
Type is:void
at 142

>import void set_color_conversion(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `set_color_conversion' as <(814b4d0)>...
Count...
End.
Adding import set_color_conversion with 4 params
Type is:void
at 171

>import int set_gfx_mode(int card, int w, int h, int v_w, int v_h);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `card'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Reading declaration:type is a standard `int'
Declaration of `v_w'...
Reading declaration:type is a standard `int'
Declaration of `v_h'...
Declaration of `set_gfx_mode' as <(814b5a8,814b600,814b658,814b6b0,814b708)>...
Count...
End.
Adding import set_gfx_mode with 20 params
Type is:int
at 192

>import BITMAP *create_bitmap(int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap' as <(814b820,814ed38)*>...
Count...
End.
Adding import create_bitmap with 8 params
Type is:pointer
at 214

>import BITMAP *create_bitmap_ex(int color_depth, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_bitmap_ex' as <(814ee20,814ee78,814eed0)*>...
Count...
End.
Adding import create_bitmap_ex with 12 params
Type is:pointer
at 239

>import BITMAP *create_sub_bitmap(BITMAP *parent, int x, int y, int width, int height);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is user-defined `BITMAP'
Declaration of `parent' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `create_sub_bitmap' as <(814efc8,814f030,814f088,814f0e0,814f138)*>...
Count...
End.
Adding import create_sub_bitmap with 20 params
Type is:pointer
at 265

>import void destroy_bitmap(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `destroy_bitmap' as <(814f250)>...
Count...
End.
Adding import destroy_bitmap with 4 params
Type is:void
at 288

>typedef int RGB;
Reading declaration:type is a standard `int'
Declaration of `RGB'...
Defining type 'RGB'

>typedef RGB PALLETE[256];
Reading declaration:type is user-defined `RGB'
Declaration of `PALLETE' as <[256]>...
Defining type 'PALLETE' as [256]

>struct RGB_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[32][32][32]>...
struct:member data added
Declaration of `anonymous'...

>};

>struct COLOR_MAP{
Reading declaration:type is a standard `char'
Declaration of `data' as <[256][256]>...
struct:member data added
Declaration of `anonymous'...

>};

>import RGB_MAP *rgb_map;
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `rgb_map' as <*>...
Adding import rgb_map with 0 params
Type is:pointer
at 304

>import COLOR_MAP *color_map;
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `color_map' as <*>...
Adding import color_map with 0 params
Type is:pointer
at 322

>import void set_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `set_color' as <(814f6d8,814f730)>...
Count...
End.
Adding import set_color with 8 params
Type is:void
at 340

>import void set_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `set_pallete' as <(814f820)>...
Count...
End.
Adding import set_pallete with 1024 params
Type is:void
at 360

>import void set_pallete_range(PALLETE p, int from, int to, int vsync);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Reading declaration:type is a standard `int'
Declaration of `vsync'...
Declaration of `set_pallete_range' as <(814f8f8,814f950,814f9a8,814fa00)>...
Count...
End.
Adding import set_pallete_range with 1036 params
Type is:void
at 386

>import void get_color(int index, RGB *p);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `index'...
Reading declaration:type is user-defined `RGB'
Declaration of `p' as <*>...
Declaration of `get_color' as <(814fb00,814fb58)>...
Count...
End.
Adding import get_color with 8 params
Type is:void
at 404

>import void get_pallete(PALLETE p);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Declaration of `get_pallete' as <(814fc48)>...
Count...
End.
Adding import get_pallete with 1024 params
Type is:void
at 424

>import void get_pallete_range(PALLETE p, int from, int to);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `p'...
Reading declaration:type is a standard `int'
Declaration of `from'...
Reading declaration:type is a standard `int'
Declaration of `to'...
Declaration of `get_pallete_range' as <(814fd20,814fd78,814fdd0)>...
Count...
End.
Adding import get_pallete_range with 1032 params
Type is:void
at 450

>import void generate_332_palette(PALLETE pal);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Declaration of `generate_332_palette' as <(814fed0)>...
Count...
End.
Adding import generate_332_palette with 1024 params
Type is:void
at 479

>import int generate_optimized_palette(BITMAP *image, PALLETE pal, char rsvdcols[256]);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `image' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `char'
Declaration of `rsvdcols' as <[256]>...
Declaration of `generate_optimized_palette' as <(814ffb0,8150018,8150070)>...
Count...
End.
Adding import generate_optimized_palette with 1284 params
Type is:int
at 514

>import int bestfit_color(PALLETE pal, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `bestfit_color' as <(8150178,81501d0,8150228,8150280)>...
Count...
End.
Adding import bestfit_color with 1036 params
Type is:int
at 536

>import int makecol(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol' as <(8150380,81503d8,8150430)>...
Count...
End.
Adding import makecol with 12 params
Type is:int
at 552

>import int makecol8(int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol8' as <(8150520,8150578,81505d0)>...
Count...
End.
Adding import makecol8 with 12 params
Type is:int
at 569

>import int makecol_depth(int color_depth, int r, int g, int b);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Declaration of `makecol_depth' as <(81506c8,8150720,8150778,81507d0)>...
Count...
End.
Adding import makecol_depth with 16 params
Type is:int
at 591

>import int getr(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr' as <(81508d0)>...
Count...
End.
Adding import getr with 4 params
Type is:int
at 604

>import int getg(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg' as <(81509a0)>...
Count...
End.
Adding import getg with 4 params
Type is:int
at 617

>import int getb(int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb' as <(8150a70)>...
Count...
End.
Adding import getb with 4 params
Type is:int
at 630

>import int getr_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getr_depth' as <(8150b40,8150b98)>...
Count...
End.
Adding import getr_depth with 8 params
Type is:int
at 649

>import int getg_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getg_depth' as <(8150c78,8150cd0)>...
Count...
End.
Adding import getg_depth with 8 params
Type is:int
at 668

>import int getb_depth(int color_depth, int c);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `color_depth'...
Reading declaration:type is a standard `int'
Declaration of `c'...
Declaration of `getb_depth' as <(8150db0,8150e08)>...
Count...
End.
Adding import getb_depth with 8 params
Type is:int
at 687

>import void putpixel(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `putpixel' as <(8150ee8,8150f50,8150fa8,8151000)>...
Count...
End.
Adding import putpixel with 16 params
Type is:void
at 704

>import void set_clip(BITMAP *bitmap, int x1, int y1, int x2, int y2);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Declaration of `set_clip' as <(8151100,8151168,81511c0,8151218,8151270)>...
Count...
End.
Adding import set_clip with 20 params
Type is:void
at 721

>import void drawing_mode(int mode, BITMAP *pattern, int x_anchor, int y_anchor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `pattern' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x_anchor'...
Reading declaration:type is a standard `int'
Declaration of `y_anchor'...
Declaration of `drawing_mode' as <(8151388,81513e0,8151448,81514a0)>...
Count...
End.
Adding import drawing_mode with 16 params
Type is:void
at 742

>import void xor_mode(int xor);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `xor'...
Declaration of `xor_mode' as <(81515a0)>...
Count...
End.
Adding import xor_mode with 4 params
Type is:void
at 759

>import void solid_mode();
Reading declaration:type is a standard `void'
Declaration of `solid_mode' as <()>...
Count...
End.
Adding import solid_mode with 0 params
Type is:void
at 778

>import void do_line(BITMAP *bmp, int x1, int y1, int x2, int y2, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8151970,81519c8,8151a10,8151a58)>...
Declaration of `do_line' as <(81516e8,8151750,81517a8,8151800,8151858,81518b0,8151908)>...
Count...
End.
Adding import do_line with 28 params
Type is:void
at 794

>import void triangle(BITMAP *bmp, int x1, int y1, int x2, int y2, int x3, int y3, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `x3'...
Reading declaration:type is a standard `int'
Declaration of `y3'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `triangle' as <(8151bc8,8151c30,8151c88,8151ce0,8151d38,8151d90,8151de8,8151e40)>...
Count...
End.
Adding import triangle with 32 params
Type is:void
at 811

>import void polygon(BITMAP *bmp, int vertices, int *points, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vertices'...
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `polygon' as <(8151f80,8151fe8,8152040,81520a8)>...
Count...
End.
Adding import polygon with 16 params
Type is:void
at 827

>import void rect(BITMAP *bmp, int x1, int y1, int x2, int y2, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `y1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y2'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `rect' as <(81521a8,8152210,8152268,81522c0,8152318,8152370)>...
Count...
End.
Adding import rect with 24 params
Type is:void
at 840

>import void do_circle(BITMAP *bmp, int x, int y, int radius, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(81526c0,8152718,8152760,81527a8)>...
Declaration of `do_circle' as <(8152490,81524f8,8152550,81525a8,8152600,8152658)>...
Count...
End.
Adding import do_circle with 24 params
Type is:void
at 858

>import void circle(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circle' as <(8152908,8152970,81529c8,8152a20,8152a78)>...
Count...
End.
Adding import circle with 20 params
Type is:void
at 873

>import void circlefill(BITMAP *bmp, int x, int y, int radius, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `radius'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `circlefill' as <(8152b88,8152bf0,8152c48,8152ca0,8152cf8)>...
Count...
End.
Adding import circlefill with 20 params
Type is:void
at 892

>import void do_ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int d, void (*proc)(BITMAP *, int, int, int));
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `d'...
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `anonymous' as <*>...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Reading declaration:type is a standard `int'
Declaration of `anonymous'...
Declaration of `proc' as <*(8153090,81530e8,8153130,8153178)>...
Declaration of `do_ellipse' as <(8152e08,8152e70,8152ec8,8152f20,8152f78,8152fd0,8153028)>...
Count...
End.
Adding import do_ellipse with 28 params
Type is:void
at 911

>import void ellipse(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipse' as <(81532e8,8153350,81533a8,8153400,8153458,81534b0)>...
Count...
End.
Adding import ellipse with 24 params
Type is:void
at 927

>import void ellipsefill(BITMAP *bmp, int x, int y, int rx, int ry, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `rx'...
Reading declaration:type is a standard `int'
Declaration of `ry'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `ellipsefill' as <(81535d0,8153638,8153690,81536e8,8153740,8153798)>...
Count...
End.
Adding import ellipsefill with 24 params
Type is:void
at 947

>import void calc_spline(int *points, int npts, int *x, int *y);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `points' as <*>...
Reading declaration:type is a standard `int'
Declaration of `npts'...
Reading declaration:type is a standard `int'
Declaration of `x' as <*>...
Reading declaration:type is a standard `int'
Declaration of `y' as <*>...
Declaration of `calc_spline' as <(81538b8,8153920,8153978,81539e0)>...
Count...
End.
Adding import calc_spline with 16 params
Type is:void
at 967

>import void spline(BITMAP *bmp, int points[8], int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `points' as <[8]>...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `spline' as <(8153af0,8153b58,8153bc0)>...
Count...
End.
Adding import spline with 40 params
Type is:void
at 982

>import void floodfill(BITMAP *bmp, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `floodfill' as <(8153cb0,8153d18,8153d70,8153dc8)>...
Count...
End.
Adding import floodfill with 16 params
Type is:void
at 1000

>import void blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `blit' as <(8153ec8,8153f30,8153f98,8153ff0,8154048,81540a0,81540f8,8154150)>...
Count...
End.
Adding import blit with 32 params
Type is:void
at 1013

>import void masked_blit(BITMAP *source, BITMAP *dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `source' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `dest' as <*>...
Reading declaration:type is a standard `int'
Declaration of `source_x'...
Reading declaration:type is a standard `int'
Declaration of `source_y'...
Reading declaration:type is a standard `int'
Declaration of `dest_x'...
Reading declaration:type is a standard `int'
Declaration of `dest_y'...
Reading declaration:type is a standard `int'
Declaration of `width'...
Reading declaration:type is a standard `int'
Declaration of `height'...
Declaration of `masked_blit' as <(8154290,81542f8,8154360,81543b8,8154410,8154468,81544c0,8154518)>...
Count...
End.
Adding import masked_blit with 32 params
Type is:void
at 1033

>import void stretch_blit(BITMAP *s, BITMAP *d, int s_x, int s_y, int s_w, int s_h, int d_x, int d_y, int d_w, int d_h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `s' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `d' as <*>...
Reading declaration:type is a standard `int'
Declaration of `s_x'...
Reading declaration:type is a standard `int'
Declaration of `s_y'...
Reading declaration:type is a standard `int'
Declaration of `s_w'...
Reading declaration:type is a standard `int'
Declaration of `s_h'...
Reading declaration:type is a standard `int'
Declaration of `d_x'...
Reading declaration:type is a standard `int'
Declaration of `d_y'...
Reading declaration:type is a standard `int'
Declaration of `d_w'...
Reading declaration:type is a standard `int'
Declaration of `d_h'...
Declaration of `stretch_blit' as <(8154660,81546c8,8154730,8154788,81547e0,8154838,8154890,81548e8,8154940,8154998)>...
Count...
End.
Adding import stretch_blit with 40 params
Type is:void
at 1054

>import void stretch_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, int w, int h);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is a standard `int'
Declaration of `h'...
Declaration of `stretch_sprite' as <(8154b00,8154b68,8154bd0,8154c28,8154c80,8154cd8)>...
Count...
End.
Adding import stretch_sprite with 24 params
Type is:void
at 1077

>import void rotate_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Declaration of `rotate_sprite' as <(8154e00,8154e68,8154ed0,8154f28,8154f80)>...
Count...
End.
Adding import rotate_sprite with 20 params
Type is:void
at 1099

>import void rotate_scaled_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y, fixed angle, fixed scale);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `fixed'
Declaration of `angle'...
Reading declaration:type is a standard `fixed'
Declaration of `scale'...
Declaration of `rotate_scaled_sprite' as <(81550a0,8155108,8155170,81551c8,8155220,8155278)>...
Count...
End.
Adding import rotate_scaled_sprite with 24 params
Type is:void
at 1128

>import void clear(BITMAP *bitmap);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bitmap' as <*>...
Declaration of `clear' as <(8155398)>...
Count...
End.
Adding import clear with 4 params
Type is:void
at 1142

>import void draw_trans_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `sprite' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `draw_trans_sprite' as <(8155480,81554e8,8155550,81555a8)>...
Count...
End.
Adding import draw_trans_sprite with 16 params
Type is:void
at 1168

>import void text_mode(int mode);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `mode'...
Declaration of `text_mode' as <(81556a8)>...
Count...
End.
Adding import text_mode with 4 params
Type is:void
at 1186

>import void textout(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout' as <(8155778,81557e0,8155848,81558b0,8155908,8155960)>...
Count...
End.
Adding import textout with 24 params
Type is:void
at 1202

>import void textout_centre(BITMAP *bmp, FONT *f,  char *str, int x, int y, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_centre' as <(8155a88,8155af0,8155b58,8155bc0,8155c18,8155c70)>...
Count...
End.
Adding import textout_centre with 24 params
Type is:void
at 1225

>import void textout_justify(BITMAP *bmp, FONT *f,  char *str, int x1, int x2, int y, int diff, int color);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x1'...
Reading declaration:type is a standard `int'
Declaration of `x2'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `diff'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Declaration of `textout_justify' as <(8155d98,8155e00,8155e68,8155ed0,8155f28,8155f80,8155fd8,8156030)>...
Count...
End.
Adding import textout_justify with 32 params
Type is:void
at 1249

>import void textprintf(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf' as <(8156170,81561d8,8156240,8156298,81562f0,8156348,...)>...
Count...
End.
Adding import textprintf with 24 params
Type is:void
at 1268

>import void textprintf_centre(BITMAP *bmp, FONT *f, int x, int y, int color, char *format, ...);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Reading declaration:type is a standard `int'
Declaration of `color'...
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `textprintf_centre' as <(8156490,81564f8,8156560,81565b8,8156610,8156668,...)>...
Count...
End.
Adding import textprintf_centre with 24 params
Type is:void
at 1294

>import int text_length(FONT *f,  char *str);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Reading declaration:type is a standard `char'
Declaration of `str' as <*>...
Declaration of `text_length' as <(81567a8,8156810)>...
Count...
End.
Adding import text_length with 8 params
Type is:int
at 1314

>import int text_height(FONT *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `text_height' as <(8156900)>...
Count...
End.
Adding import text_height with 4 params
Type is:int
at 1334

>import void destroy_font(FONT *f);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `FONT'
Declaration of `f' as <*>...
Declaration of `destroy_font' as <(81569e8)>...
Count...
End.
Adding import destroy_font with 4 params
Type is:void
at 1355

>import int play_fli(char *filename, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_fli' as <(8156ac8,8156b30,8156b98,8156bf0)>...
Count...
End.
Adding import play_fli with 16 params
Type is:int
at 1372

>import int play_memory_fli(void *fli_data, BITMAP *bmp, int loop, int (*callback)());
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Reading declaration:type is a standard `int'
Declaration of `callback' as <*()>...
Declaration of `play_memory_fli' as <(8156d28,8156d90,8156df8,8156e50)>...
Count...
End.
Adding import play_memory_fli with 16 params
Type is:int
at 1396

>import int open_fli(char *filename);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `open_fli' as <(8156f70)>...
Count...
End.
Adding import open_fli with 4 params
Type is:int
at 1413

>import int open_memory_fli(void *fli_data);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `fli_data' as <*>...
Declaration of `open_memory_fli' as <(8157058)>...
Count...
End.
Adding import open_memory_fli with 4 params
Type is:int
at 1437

>import void close_fli();
Reading declaration:type is a standard `void'
Declaration of `close_fli' as <()>...
Count...
End.
Adding import close_fli with 0 params
Type is:void
at 1455

>import int next_fli_frame(int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `next_fli_frame' as <(81571b8)>...
Count...
End.
Adding import next_fli_frame with 4 params
Type is:int
at 1478

>import void reset_fli_variables();
Reading declaration:type is a standard `void'
Declaration of `reset_fli_variables' as <()>...
Count...
End.
Adding import reset_fli_variables with 0 params
Type is:void
at 1506

>import BITMAP *fli_bitmap;              
Reading declaration:type is user-defined `BITMAP'
Declaration of `fli_bitmap' as <*>...
Adding import fli_bitmap with 0 params
Type is:pointer
at 1525

>import PALLETE fli_pallete;             
Reading declaration:type is user-defined `PALLETE'
Declaration of `fli_pallete'...
Adding import fli_pallete with 0 params
Type is:pointer
at 1545

>import int fli_frame;                   
Reading declaration:type is a standard `int'
Declaration of `fli_frame'...
Adding import fli_frame with 0 params
Type is:int
at 1563

>import int install_sound(int digi_card, int midi_card, char *cfg_path);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `digi_card'...
Reading declaration:type is a standard `int'
Declaration of `midi_card'...
Reading declaration:type is a standard `char'
Declaration of `cfg_path' as <*>...
Declaration of `install_sound' as <(8157428,8157480,81574d8)>...
Count...
End.
Adding import install_sound with 12 params
Type is:int
at 1585

>import void set_volume(int digi_volume, int midi_volume);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `int'
Declaration of `digi_volume'...
Reading declaration:type is a standard `int'
Declaration of `midi_volume'...
Declaration of `set_volume' as <(81575d8,8157630)>...
Count...
End.
Adding import set_volume with 8 params
Type is:void
at 1604

>import DATAFILE *load_datafile(char *filename);
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_datafile' as <(8157718)*>...
Count...
End.
Adding import load_datafile with 4 params
Type is:pointer
at 1626

>import void unload_datafile(DATAFILE *dat);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Declaration of `unload_datafile' as <(8157800)>...
Count...
End.
Adding import unload_datafile with 4 params
Type is:void
at 1650

>import SAMPLE *load_sample(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_sample' as <(81578e0)*>...
Count...
End.
Adding import load_sample with 4 params
Type is:pointer
at 1670

>import SAMPLE *load_wav(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_wav' as <(81579c0)*>...
Count...
End.
Adding import load_wav with 4 params
Type is:pointer
at 1687

>import SAMPLE *load_voc(char *filename);
Reading declaration:type is user-defined `SAMPLE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_voc' as <(8157aa0)*>...
Count...
End.
Adding import load_voc with 4 params
Type is:pointer
at 1704

>import void destroy_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `destroy_sample' as <(8157b88)>...
Count...
End.
Adding import destroy_sample with 4 params
Type is:void
at 1727

>import int play_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_sample' as <(8157c68,8157cd0,8157d28,8157d80,8157dd8)>...
Count...
End.
Adding import play_sample with 20 params
Type is:int
at 1747

>import void stop_sample(SAMPLE *spl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Declaration of `stop_sample' as <(8157ee8)>...
Count...
End.
Adding import stop_sample with 4 params
Type is:void
at 1767

>import void adjust_sample(SAMPLE *spl, int vol, int pan, int freq, int loop);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `SAMPLE'
Declaration of `spl' as <*>...
Reading declaration:type is a standard `int'
Declaration of `vol'...
Reading declaration:type is a standard `int'
Declaration of `pan'...
Reading declaration:type is a standard `int'
Declaration of `freq'...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `adjust_sample' as <(8157fd0,8158038,8158090,81580e8,8158140)>...
Count...
End.
Adding import adjust_sample with 20 params
Type is:void
at 1789

>import MIDI *load_midi(char *filename);
Reading declaration:type is user-defined `MIDI'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `load_midi' as <(8158250)*>...
Count...
End.
Adding import load_midi with 4 params
Type is:pointer
at 1807

>import void destroy_midi(MIDI *midi);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Declaration of `destroy_midi' as <(8158338)>...
Count...
End.
Adding import destroy_midi with 4 params
Type is:void
at 1828

>import int play_midi(MIDI *midi, int loop);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop'...
Declaration of `play_midi' as <(8158418,8158480)>...
Count...
End.
Adding import play_midi with 8 params
Type is:int
at 1846

>import int play_looped_midi(MIDI *midi, int loop_start, int loop_end);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `MIDI'
Declaration of `midi' as <*>...
Reading declaration:type is a standard `int'
Declaration of `loop_start'...
Reading declaration:type is a standard `int'
Declaration of `loop_end'...
Declaration of `play_looped_midi' as <(8158568,81585d0,8158628)>...
Count...
End.
Adding import play_looped_midi with 12 params
Type is:int
at 1871

>import void stop_midi();
Reading declaration:type is a standard `void'
Declaration of `stop_midi' as <()>...
Count...
End.
Adding import stop_midi with 0 params
Type is:void
at 1889

>import void midi_pause();
Reading declaration:type is a standard `void'
Declaration of `midi_pause' as <()>...
Count...
End.
Adding import midi_pause with 0 params
Type is:void
at 1908

>import void midi_resume();
Reading declaration:type is a standard `void'
Declaration of `midi_resume' as <()>...
Count...
End.
Adding import midi_resume with 0 params
Type is:void
at 1928

>import int midi_seek(int target);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `target'...
Declaration of `midi_seek' as <(8158880)>...
Count...
End.
Adding import midi_seek with 4 params
Type is:int
at 1946

>import void midi_out( char *data, int length);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `data' as <*>...
Reading declaration:type is a standard `int'
Declaration of `length'...
Declaration of `midi_out' as <(8158950,81589b8)>...
Count...
End.
Adding import midi_out with 8 params
Type is:void
at 1963

>import int load_midi_patches();
Reading declaration:type is a standard `int'
Declaration of `load_midi_patches' as <()>...
Count...
End.
Adding import load_midi_patches with 0 params
Type is:int
at 1989

>import void packfile_password(char *password);
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `password' as <*>...
Declaration of `packfile_password' as <(8158b20)>...
Count...
End.
Adding import packfile_password with 4 params
Type is:void
at 2015

>import PACKFILE *pack_fopen(char *filename, char *mode);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `mode' as <*>...
Declaration of `pack_fopen' as <(8158c00,8158c68)*>...
Count...
End.
Adding import pack_fopen with 8 params
Type is:pointer
at 2034

>import int pack_fclose(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose' as <(8158d58)>...
Count...
End.
Adding import pack_fclose with 4 params
Type is:int
at 2054

>import int pack_fseek(PACKFILE *f, int offset);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `offset'...
Declaration of `pack_fseek' as <(8158e38,8158ea0)>...
Count...
End.
Adding import pack_fseek with 8 params
Type is:int
at 2073

>import PACKFILE *pack_fopen_chunk(PACKFILE *f, int pack);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Reading declaration:type is a standard `int'
Declaration of `pack'...
Declaration of `pack_fopen_chunk' as <(8158f88,8158ff0)*>...
Count...
End.
Adding import pack_fopen_chunk with 8 params
Type is:pointer
at 2098

>import PACKFILE *pack_fclose_chunk(PACKFILE *f);
Reading declaration:type is user-defined `PACKFILE'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fclose_chunk' as <(81590d8)*>...
Count...
End.
Adding import pack_fclose_chunk with 4 params
Type is:pointer
at 2124

>import int pack_igetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetw' as <(81591a8)>...
Count...
End.
Adding import pack_igetw with 4 params
Type is:int
at 2143

>import int pack_igetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_igetl' as <(8159288)>...
Count...
End.
Adding import pack_igetl with 4 params
Type is:int
at 2162

>import int pack_iputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputw' as <(8159368,81593c0)>...
Count...
End.
Adding import pack_iputw with 8 params
Type is:int
at 2181

>import int pack_iputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_iputl' as <(81594b0,8159508)>...
Count...
End.
Adding import pack_iputl with 8 params
Type is:int
at 2200

>import int pack_mgetw(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetw' as <(81595f8)>...
Count...
End.
Adding import pack_mgetw with 4 params
Type is:int
at 2219

>import int pack_mgetl(PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mgetl' as <(81596d8)>...
Count...
End.
Adding import pack_mgetl with 4 params
Type is:int
at 2238

>import int pack_mputw(int w, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `w'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputw' as <(81597b8,8159810)>...
Count...
End.
Adding import pack_mputw with 8 params
Type is:int
at 2257

>import int pack_mputl(int l, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `l'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_mputl' as <(8159900,8159958)>...
Count...
End.
Adding import pack_mputl with 8 params
Type is:int
at 2276

>import int pack_fread(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fread' as <(8159a48,8159ab0,8159b08)>...
Count...
End.
Adding import pack_fread with 12 params
Type is:int
at 2295

>import int pack_fwrite(void *p, int n, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `void'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `n'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fwrite' as <(8159c08,8159c70,8159cc8)>...
Count...
End.
Adding import pack_fwrite with 12 params
Type is:int
at 2315

>import char *pack_fgets(char *p, int max, PACKFILE *f);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is a standard `int'
Declaration of `max'...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fgets' as <(8159dc8,8159e30,8159e88)*>...
Count...
End.
Adding import pack_fgets with 12 params
Type is:pointer
at 2334

>import int pack_fputs(char *p, PACKFILE *f);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `p' as <*>...
Reading declaration:type is user-defined `PACKFILE'
Declaration of `f' as <*>...
Declaration of `pack_fputs' as <(8159f88,8159ff0)>...
Count...
End.
Adding import pack_fputs with 8 params
Type is:int
at 2353

>import char *get_filename(char *path);
Reading declaration:type is a standard `char'
Reading declaration:type is a standard `char'
Declaration of `path' as <*>...
Declaration of `get_filename' as <(815a0e8)*>...
Count...
End.
Adding import get_filename with 4 params
Type is:pointer
at 2374

>import BITMAP *load_bitmap(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bitmap' as <(815a1c8,815a230)*>...
Count...
End.
Adding import load_bitmap with 8 params
Type is:pointer
at 2394

>import BITMAP *load_bmp(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_bmp' as <(815a308,815a370)*>...
Count...
End.
Adding import load_bmp with 8 params
Type is:pointer
at 2411

>import BITMAP *load_lbm(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_lbm' as <(815a460,815a4c8)*>...
Count...
End.
Adding import load_lbm with 8 params
Type is:pointer
at 2428

>import BITMAP *load_pcx(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_pcx' as <(815a5b8,815a620)*>...
Count...
End.
Adding import load_pcx with 8 params
Type is:pointer
at 2445

>import BITMAP *load_tga(char *filename, RGB *pal);
Reading declaration:type is user-defined `BITMAP'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `load_tga' as <(815a710,815a778)*>...
Count...
End.
Adding import load_tga with 8 params
Type is:pointer
at 2462

>import int save_bitmap(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bitmap' as <(815a868,815a8d0,815a938)>...
Count...
End.
Adding import save_bitmap with 12 params
Type is:int
at 2482

>import int save_bmp(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_bmp' as <(815aa18,815aa80,815aae8)>...
Count...
End.
Adding import save_bmp with 12 params
Type is:int
at 2499

>import int save_pcx(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_pcx' as <(815abe8,815ac50,815acb8)>...
Count...
End.
Adding import save_pcx with 12 params
Type is:int
at 2516

>import int save_tga(char *filename, BITMAP *bmp, RGB *pal);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is user-defined `RGB'
Declaration of `pal' as <*>...
Declaration of `save_tga' as <(815adb8,815ae20,815ae88)>...
Count...
End.
Adding import save_tga with 12 params
Type is:int
at 2533

>import void create_rgb_table(RGB_MAP *table, PALLETE pal, void*);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `RGB_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_rgb_table' as <(815af90,815aff8,815b050)>...
Count...
End.
Adding import create_rgb_table with 1032 params
Type is:void
at 2558

>import void create_light_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_light_table' as <(815b148,815b1b0,815b208,815b260,815b2b8,815b310)>...
Count...
End.
Adding import create_light_table with 1044 params
Type is:void
at 2585

>import void create_trans_table(COLOR_MAP *table, PALLETE pal, int r, int g, int b, void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `r'...
Reading declaration:type is a standard `int'
Declaration of `g'...
Reading declaration:type is a standard `int'
Declaration of `b'...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_trans_table' as <(815b438,815b4a0,815b4f8,815b550,815b5a8,815b600)>...
Count...
End.
Adding import create_trans_table with 1044 params
Type is:void
at 2612

>import void create_color_table(COLOR_MAP *table, PALLETE pal, RGB (*blend)(PALLETE pal, int x, int y), void *);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `COLOR_MAP'
Declaration of `table' as <*>...
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is user-defined `RGB'
Reading declaration:type is user-defined `PALLETE'
Declaration of `pal'...
Reading declaration:type is a standard `int'
Declaration of `x'...
Reading declaration:type is a standard `int'
Declaration of `y'...
Declaration of `blend' as <*(815b850,815b8a8,815b900)>...
Reading declaration:type is a standard `void'
Declaration of `anonymous' as <*>...
Declaration of `create_color_table' as <(815b728,815b790,815b7e8,815b998)>...
Count...
End.
Adding import create_color_table with 1036 params
Type is:void
at 2639

>import int mouse_x;
Reading declaration:type is a standard `int'
Declaration of `mouse_x'...
Adding import mouse_x with 0 params
Type is:int
at 2655

>import int mouse_y;
Reading declaration:type is a standard `int'
Declaration of `mouse_y'...
Adding import mouse_y with 0 params
Type is:int
at 2671

>import int mouse_b;
Reading declaration:type is a standard `int'
Declaration of `mouse_b'...
Adding import mouse_b with 0 params
Type is:int
at 2687

>import int mouse_pos;
Reading declaration:type is a standard `int'
Declaration of `mouse_pos'...
Adding import mouse_pos with 0 params
Type is:int
at 2705

>import int freeze_mouse_flag;
Reading declaration:type is a standard `int'
Declaration of `freeze_mouse_flag'...
Adding import freeze_mouse_flag with 0 params
Type is:int
at 2731

>import int keypressed();
Reading declaration:type is a standard `int'
Declaration of `keypressed' as <()>...
Count...
End.
Adding import keypressed with 0 params
Type is:int
at 2750

>import int readkey();
Reading declaration:type is a standard `int'
Declaration of `readkey' as <()>...
Count...
End.
Adding import readkey with 0 params
Type is:int
at 2766

>#! 6 "!!_internal_Script"

>#! 0 "scripts/imports.sh"

>#! 0 "scripts/_imports.sh"

>typedef unsigned int msg_t;	       
Reading declaration:type is a standard `int'
Declaration of `msg_t'...
Defining type 'msg_t'

>typedef int seer_addr;		       
Reading declaration:type is a standard `int'
Declaration of `seer_addr'...
Defining type 'seer_addr'

>import        BITMAP *dbuf;		       
Reading declaration:type is user-defined `BITMAP'
Declaration of `dbuf' as <*>...
Adding import dbuf with 0 params
Type is:pointer
at 2779

>import int addressof(char *symbol);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `symbol' as <*>...
Declaration of `addressof' as <(815be60)>...
Count...
End.
Adding import addressof with 4 params
Type is:int
at 2797

>import int exec_script(char *filename, char *func);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Reading declaration:type is a standard `char'
Declaration of `func' as <*>...
Declaration of `exec_script' as <(815bf40,815bfa8)>...
Count...
End.
Adding import exec_script with 8 params
Type is:int
at 2817

>import int add_script(char *filename);	       		
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_script' as <(815c098)>...
Count...
End.
Adding import add_script with 4 params
Type is:int
at 2836

>import void add_tiles_pack(char *filename);   
Reading declaration:type is a standard `void'
Reading declaration:type is a standard `char'
Declaration of `filename' as <*>...
Declaration of `add_tiles_pack' as <(815c180)>...
Count...
End.
Adding import add_tiles_pack with 4 params
Type is:void
at 2859

>import int df_get_item_num(DATAFILE *dat, char *name);   	
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item_num' as <(815c268,815c2d0)>...
Count...
End.
Adding import df_get_item_num with 8 params
Type is:int
at 2883

>import DATAFILE *df_get_item(DATAFILE *dat, char *name);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `df_get_item' as <(815c3a8,815c410)*>...
Count...
End.
Adding import df_get_item with 8 params
Type is:pointer
at 2903

>import DATAFILE *df_item(DATAFILE *dat, unsigned int i);   	
Reading declaration:type is user-defined `DATAFILE'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `i'...
Declaration of `df_item' as <(815c500,815c568)*>...
Count...
End.
Adding import df_item with 8 params
Type is:pointer
at 2919

>import void *df_dat(DATAFILE *d);	       			
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `df_dat' as <(815c648)*>...
Count...
End.
Adding import df_dat with 4 params
Type is:pointer
at 2934

>import int df_count(DATAFILE *dat, int type); 			
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Declaration of `type'...
Declaration of `df_count' as <(815c728,815c790)>...
Count...
End.
Adding import df_count with 8 params
Type is:int
at 2951

>import int df_foreach(DATAFILE *dat, int (*callback)(DATAFILE *d));
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `DATAFILE'
Declaration of `d' as <*>...
Declaration of `callback' as <*(815c940)>...
Declaration of `df_foreach' as <(815c870,815c8d8)>...
Count...
End.
Adding import df_foreach with 8 params
Type is:int
at 2970

>import unsigned char *bmp_line(BITMAP *bmp, unsigned int row);	
Reading declaration:type is a standard `char'
Reading declaration:type is user-defined `BITMAP'
Declaration of `bmp' as <*>...
Reading declaration:type is a standard `int'
Declaration of `row'...
Declaration of `bmp_line' as <(815ca50,815cab8)*>...
Count...
End.
Adding import bmp_line with 8 params
Type is:pointer
at 2987

>import int bmp_w(BITMAP *b);		
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_w' as <(815cb98)>...
Count...
End.
Adding import bmp_w with 4 params
Type is:int
at 3001

>import int bmp_h(BITMAP *b);
Reading declaration:type is a standard `int'
Reading declaration:type is user-defined `BITMAP'
Declaration of `b' as <*>...
Declaration of `bmp_h' as <(815cc68)>...
Count...
End.
Adding import bmp_h with 4 params
Type is:int
at 3015

>import        int printf (char* format, ...); 
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `format' as <*>...
Declaration of `printf' as <(815cd48,...)>...
Count...
End.
Adding import printf with 4 params
Type is:int
at 3030

>typedef void object_def_t;
Reading declaration:type is a standard `void'
Declaration of `object_def_t'...
Defining type 'object_def_t'

>typedef void object_t;
Reading declaration:type is a standard `void'
Declaration of `object_t'...
Defining type 'object_t'

>import int create_object_type(char *name, int handler, BITMAP *icon);	
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Reading declaration:type is a standard `int'
Declaration of `handler'...
Reading declaration:type is user-defined `BITMAP'
Declaration of `icon' as <*>...
Declaration of `create_object_type' as <(815cef8,815cf60,815cfb8)>...
Count...
End.
Adding import create_object_type with 12 params
Type is:int
at 3057

>struct player_t {
Reading declaration:type is a standard `int'
Declaration of `x'...
struct:member x added
(Short)Declaration of `y' as (null)...
struct:member y added
Declaration of `anonymous'...

>};

>typedef void (*weapon_handler_t)(msg_t msg, player_t *pl);   
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_handler_t' as <*(815d220,815d278)>...
Defining type 'weapon_handler_t' as *(815d220,815d278)

>typedef void (*object_handler_t)(msg_t msg, object_t *obj, player_t *pl);
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `object_handler_t' as <*(815d380,815d3d8,815d440)>...
Defining type 'object_handler_t' as *(815d380,815d3d8,815d440)

>typedef void weapon_type_t;	       
Reading declaration:type is a standard `void'
Declaration of `weapon_type_t'...
Defining type 'weapon_type_t'

>import int create_weapon_type(char *name);    
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `char'
Declaration of `name' as <*>...
Declaration of `create_weapon_type' as <(815d598)>...
Count...
End.
Adding import create_weapon_type with 4 params
Type is:int
at 3084

>import int assign_weapon_handler(int typenum, seer_addr handler);
Reading declaration:type is a standard `int'
Reading declaration:type is a standard `int'
Declaration of `typenum'...
Reading declaration:type is user-defined `seer_addr'
Declaration of `handler'...
Declaration of `assign_weapon_handler' as <(815d688,815d6e0)>...
Count...
End.
Adding import assign_weapon_handler with 8 params
Type is:int
at 3114

>#! 7 "scripts/imports.sh"

>#! 7 "!!_internal_Script"

>export script_main;

>export script_exit;

>DATAFILE *dat;
Reading declaration:type is user-defined `DATAFILE'
Declaration of `dat' as <*>...
SizeOf:4

>BITMAP *ammo, *weapon, *status;
Reading declaration:type is user-defined `BITMAP'
Declaration of `ammo' as <*>...
SizeOf:4
(Short)Declaration of `weapon' as *...
SizeOf:4
(Short)Declaration of `status' as *...
SizeOf:4

>int typenum;
Reading declaration:type is a standard `int'
Declaration of `typenum'...
SizeOf:4

>void ammo_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `ammo_pickup' as <(815da68,815dac0,815db28)>...
Address:0
=======================>>ENTERING function `ammo_pickup'!
   0: ENTER 
   1: LEAVE 
   2: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `ammo_pickup'!

>void weapon_pickup(msg_t msg, object_t *obj, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `object_t'
Declaration of `obj' as <*>...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `weapon_pickup' as <(815dc30,815dc88,815dcf0)>...
Address:4
=======================>>ENTERING function `weapon_pickup'!
   4: ENTER 
   5: LEAVE 
   6: RET 
+++
Local symbols:
       pl : `*' at BP+16
      obj : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `weapon_pickup'!

>void shotgun(msg_t msg, player_t *pl)
Reading declaration:type is a standard `void'
Reading declaration:type is user-defined `msg_t'
Declaration of `msg'...
Reading declaration:type is user-defined `player_t'
Declaration of `pl' as <*>...
Declaration of `shotgun' as <(815ddf0,815de48)>...
Address:8
=======================>>ENTERING function `shotgun'!
   8: ENTER 
   9: LEAVE 
  10: RET 
+++
Local symbols:
       pl : `*' at BP+12
      msg : at BP+8
=======================>>LEAVING  function `shotgun'!

>int script_main()
Reading declaration:type is a standard `int'
Declaration of `script_main' as <()>...
Address:12
=======================>>ENTERING function `script_main'!
  12: ENTER 

>    dat = load_datafile("data/shotgun.dat");
Symbol:dat
Symbol:load_datafile
  16: MOV a0 , 0
  24: ADD a0 , ES
  28: PUSH a0
  32: CALLEX 1626 , 4
  44: ADD SP , 4
  52: MOV [DS+4] , a0

>    if (!dat)
Symbol:dat
  60: MOV a0 , [DS+4]
  68: NOT a0
  72: JFALSE a0 , 0

>      return -1;
  80: MOV a0 , -1
  88: LEAVE 
  89: RET 
  72: JFALSE a0 , 92

>    ammo 	= df_dat(df_get_item(dat, "ammo"));
Symbol:ammo
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
  92: MOV a0 , 17
 100: ADD a0 , ES
 104: PUSH a0
 108: PUSH [DS+4]
 116: CALLEX 2903 , 8
 128: ADD SP , 8
 136: PUSH a0
 140: CALLEX 2934 , 4
 152: ADD SP , 4
 160: MOV [DS+8] , a0

>    weapon 	= df_dat(df_get_item(dat, "weapon"));
Symbol:weapon
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 168: MOV a0 , 22
 176: ADD a0 , ES
 180: PUSH a0
 184: PUSH [DS+4]
 192: CALLEX 2903 , 8
 204: ADD SP , 8
 212: PUSH a0
 216: CALLEX 2934 , 4
 228: ADD SP , 4
 236: MOV [DS+12] , a0

>    status 	= df_dat(df_get_item(dat, "status"));
Symbol:status
Symbol:df_dat
Symbol:df_get_item
Symbol:dat
 244: MOV a0 , 29
 252: ADD a0 , ES
 256: PUSH a0
 260: PUSH [DS+4]
 268: CALLEX 2903 , 8
 280: ADD SP , 8
 288: PUSH a0
 292: CALLEX 2934 , 4
 304: ADD SP , 4
 312: MOV [DS+16] , a0

>    typenum = create_weapon_type("shotgun");
Symbol:typenum
Symbol:create_weapon_type
 320: MOV a0 , 36
 328: ADD a0 , ES
 332: PUSH a0
 336: CALLEX 3084 , 4
 348: ADD SP , 4
 356: MOV [DS+20] , a0

>    assign_weapon_handler(typenum, addressof("shotgun"));
Symbol:assign_weapon_handler
Symbol:typenum
Symbol:addressof
 364: MOV a0 , 44
 372: ADD a0 , ES
 376: PUSH a0
 380: CALLEX 2797 , 4
 392: ADD SP , 4
 400: PUSH a0
 404: PUSH [DS+20]
 412: CALLEX 3114 , 8
 424: ADD SP , 8

>    create_object_type("shotgun;ammo", addressof("ammo_pickup"), ammo);
Symbol:create_object_type
 432: MOV a0 , 52
 440: ADD a0 , ES
Symbol:addressof
 444: PUSH a0
 448: MOV a1 , 65
 456: ADD a1 , ES
 460: PUSH a1
 464: CALLEX 2797 , 4
 476: MOV a1 , a0
 480: ADD SP , 4
 488: POP a0
Symbol:ammo
 492: PUSH [DS+8]
 500: PUSH a1
 504: PUSH a0
 508: CALLEX 3057 , 12
 520: ADD SP , 12

>    create_object_type("shotgun;weapon", addressof("weapon_pickup"), weapon);
Symbol:create_object_type
 528: MOV a0 , 77
 536: ADD a0 , ES
Symbol:addressof
 540: PUSH a0
 544: MOV a1 , 92
 552: ADD a1 , ES
 556: PUSH a1
 560: CALLEX 2797 , 4
 572: MOV a1 , a0
 576: ADD SP , 4
 584: POP a0
Symbol:weapon
 588: PUSH [DS+12]
 596: PUSH a1
 600: PUSH a0
 604: CALLEX 3057 , 12
 616: ADD SP , 12

>    return 0;
 624: MOV a0 , 0
 632: LEAVE 
 633: RET 
 634: LEAVE 
 635: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_main'!

>void script_exit()
Reading declaration:type is a standard `void'
Declaration of `script_exit' as <()>...
Address:636
=======================>>ENTERING function `script_exit'!
 636: ENTER 

>    unload_datafile(dat);
Symbol:unload_datafile
Symbol:dat
 640: PUSH [DS+4]
 648: CALLEX 1650 , 4
 660: ADD SP , 4
 668: LEAVE 
 669: RET 
+++
Local symbols:
=======================>>LEAVING  function `script_exit'!
*************************
Global SC_types:
 weapon_type_t :
 object_handler_t : `*(815d380,815d3d8,815d440)'
 weapon_handler_t : `*(815d220,815d278)'
 player_t :
 object_t :
 object_def_t :
 seer_addr :
    msg_t :
 COLOR_MAP :
  RGB_MAP :
  PALLETE : `[256]'
      RGB :
 DATAFILE :
 PACKFILE :
     FONT :
   SAMPLE :
     MIDI :
   BITMAP :

Checking Symbols...

Exported Symbols:

-->script_exit

-->script_main

Global Symbols:
 script_exit : `()' at CS+636
 script_main : `()' at CS+12
  shotgun : `(815ddf0,815de48)' at CS+8
 weapon_pickup : `(815dc30,815dc88,815dcf0)' at CS+4
 ammo_pickup : `(815da68,815dac0,815db28)' at CS+0
  typenum : at DS+20
   status : `*' at DS+16
   weapon : `*' at DS+12
     ammo : `*' at DS+8
      dat : `*' at DS+4
 assign_weapon_handler : `(815d688,815d6e0)' at 3114
 create_weapon_type : `(815d598)' at 3084
 create_object_type : `(815cef8,815cf60,815cfb8)' at 3057
   printf : `(815cd48,...)' at 3030
    bmp_h : `(815cc68)' at 3015
    bmp_w : `(815cb98)' at 3001
 bmp_line : `(815ca50,815cab8)*' at 2987
 df_foreach : `(815c870,815c8d8)' at 2970
 df_count : `(815c728,815c790)' at 2951
   df_dat : `(815c648)*' at 2934
  df_item : `(815c500,815c568)*' at 2919
 df_get_item : `(815c3a8,815c410)*' at 2903
 df_get_item_num : `(815c268,815c2d0)' at 2883
 add_tiles_pack : `(815c180)' at 2859
 add_script : `(815c098)' at 2836
 exec_script : `(815bf40,815bfa8)' at 2817
 addressof : `(815be60)' at 2797
     dbuf : `*' at 2779
  readkey : `()' at 2766
 keypressed : `()' at 2750
 freeze_mouse_flag : at 2731
 mouse_pos : at 2705
  mouse_b : at 2687
  mouse_y : at 2671
  mouse_x : at 2655
 create_color_table : `(815b728,815b790,815b7e8,815b998)' at 2639
 create_trans_table : `(815b438,815b4a0,815b4f8,815b550,815b5a8,815b600)' at 2612
 create_light_table : `(815b148,815b1b0,815b208,815b260,815b2b8,815b310)' at 2585
 create_rgb_table : `(815af90,815aff8,815b050)' at 2558
 save_tga : `(815adb8,815ae20,815ae88)' at 2533
 save_pcx : `(815abe8,815ac50,815acb8)' at 2516
 save_bmp : `(815aa18,815aa80,815aae8)' at 2499
 save_bitmap : `(815a868,815a8d0,815a938)' at 2482
 load_tga : `(815a710,815a778)*' at 2462
 load_pcx : `(815a5b8,815a620)*' at 2445
 load_lbm : `(815a460,815a4c8)*' at 2428
 load_bmp : `(815a308,815a370)*' at 2411
 load_bitmap : `(815a1c8,815a230)*' at 2394
 get_filename : `(815a0e8)*' at 2374
 pack_fputs : `(8159f88,8159ff0)' at 2353
 pack_fgets : `(8159dc8,8159e30,8159e88)*' at 2334
 pack_fwrite : `(8159c08,8159c70,8159cc8)' at 2315
 pack_fread : `(8159a48,8159ab0,8159b08)' at 2295
 pack_mputl : `(8159900,8159958)' at 2276
 pack_mputw : `(81597b8,8159810)' at 2257
 pack_mgetl : `(81596d8)' at 2238
 pack_mgetw : `(81595f8)' at 2219
 pack_iputl : `(81594b0,8159508)' at 2200
 pack_iputw : `(8159368,81593c0)' at 2181
 pack_igetl : `(8159288)' at 2162
 pack_igetw : `(81591a8)' at 2143
 pack_fclose_chunk : `(81590d8)*' at 2124
 pack_fopen_chunk : `(8158f88,8158ff0)*' at 2098
 pack_fseek : `(8158e38,8158ea0)' at 2073
 pack_fclose : `(8158d58)' at 2054
 pack_fopen : `(8158c00,8158c68)*' at 2034
 packfile_password : `(8158b20)' at 2015
 load_midi_patches : `()' at 1989
 midi_out : `(8158950,81589b8)' at 1963
 midi_seek : `(8158880)' at 1946
 midi_resume : `()' at 1928
 midi_pause : `()' at 1908
 stop_midi : `()' at 1889
 play_looped_midi : `(8158568,81585d0,8158628)' at 1871
 play_midi : `(8158418,8158480)' at 1846
 destroy_midi : `(8158338)' at 1828
 load_midi : `(8158250)*' at 1807
 adjust_sample : `(8157fd0,8158038,8158090,81580e8,8158140)' at 1789
 stop_sample : `(8157ee8)' at 1767
 play_sample : `(8157c68,8157cd0,8157d28,8157d80,8157dd8)' at 1747
 destroy_sample : `(8157b88)' at 1727
 load_voc : `(8157aa0)*' at 1704
 load_wav : `(81579c0)*' at 1687
 load_sample : `(81578e0)*' at 1670
 unload_datafile : `(8157800)' at 1650
 load_datafile : `(8157718)*' at 1626
 set_volume : `(81575d8,8157630)' at 1604
 install_sound : `(8157428,8157480,81574d8)' at 1585
 fli_frame : at 1563
 fli_pallete : `[256]' at 1545
 fli_bitmap : `*' at 1525
 reset_fli_variables : `()' at 1506
 next_fli_frame : `(81571b8)' at 1478
 close_fli : `()' at 1455
 open_memory_fli : `(8157058)' at 1437
 open_fli : `(8156f70)' at 1413
 play_memory_fli : `(8156d28,8156d90,8156df8,8156e50)' at 1396
 play_fli : `(8156ac8,8156b30,8156b98,8156bf0)' at 1372
 destroy_font : `(81569e8)' at 1355
 text_height : `(8156900)' at 1334
 text_length : `(81567a8,8156810)' at 1314
 textprintf_centre : `(8156490,81564f8,8156560,81565b8,8156610,8156668,...)' at 1294
 textprintf : `(8156170,81561d8,8156240,8156298,81562f0,8156348,...)' at 1268
 textout_justify : `(8155d98,8155e00,8155e68,8155ed0,8155f28,8155f80,8155fd8,8156030)' at 1249
 textout_centre : `(8155a88,8155af0,8155b58,8155bc0,8155c18,8155c70)' at 1225
  textout : `(8155778,81557e0,8155848,81558b0,8155908,8155960)' at 1202
 text_mode : `(81556a8)' at 1186
 draw_trans_sprite : `(8155480,81554e8,8155550,81555a8)' at 1168
    clear : `(8155398)' at 1142
 rotate_scaled_sprite : `(81550a0,8155108,8155170,81551c8,8155220,8155278)' at 1128
 rotate_sprite : `(8154e00,8154e68,8154ed0,8154f28,8154f80)' at 1099
 stretch_sprite : `(8154b00,8154b68,8154bd0,8154c28,8154c80,8154cd8)' at 1077
 stretch_blit : `(8154660,81546c8,8154730,8154788,81547e0,8154838,8154890,81548e8,8154940,8154998)' at 1054
 masked_blit : `(8154290,81542f8,8154360,81543b8,8154410,8154468,81544c0,8154518)' at 1033
     blit : `(8153ec8,8153f30,8153f98,8153ff0,8154048,81540a0,81540f8,8154150)' at 1013
 floodfill : `(8153cb0,8153d18,8153d70,8153dc8)' at 1000
   spline : `(8153af0,8153b58,8153bc0)' at 982
 calc_spline : `(81538b8,8153920,8153978,81539e0)' at 967
 ellipsefill : `(81535d0,8153638,8153690,81536e8,8153740,8153798)' at 947
  ellipse : `(81532e8,8153350,81533a8,8153400,8153458,81534b0)' at 927
 do_ellipse : `(8152e08,8152e70,8152ec8,8152f20,8152f78,8152fd0,8153028)' at 911
 circlefill : `(8152b88,8152bf0,8152c48,8152ca0,8152cf8)' at 892
   circle : `(8152908,8152970,81529c8,8152a20,8152a78)' at 873
 do_circle : `(8152490,81524f8,8152550,81525a8,8152600,8152658)' at 858
     rect : `(81521a8,8152210,8152268,81522c0,8152318,8152370)' at 840
  polygon : `(8151f80,8151fe8,8152040,81520a8)' at 827
 triangle : `(8151bc8,8151c30,8151c88,8151ce0,8151d38,8151d90,8151de8,8151e40)' at 811
  do_line : `(81516e8,8151750,81517a8,8151800,8151858,81518b0,8151908)' at 794
 solid_mode : `()' at 778
 xor_mode : `(81515a0)' at 759
 drawing_mode : `(8151388,81513e0,8151448,81514a0)' at 742
 set_clip : `(8151100,8151168,81511c0,8151218,8151270)' at 721
 putpixel : `(8150ee8,8150f50,8150fa8,8151000)' at 704
 getb_depth : `(8150db0,8150e08)' at 687
 getg_depth : `(8150c78,8150cd0)' at 668
 getr_depth : `(8150b40,8150b98)' at 649
     getb : `(8150a70)' at 630
     getg : `(81509a0)' at 617
     getr : `(81508d0)' at 604
 makecol_depth : `(81506c8,8150720,8150778,81507d0)' at 591
 makecol8 : `(8150520,8150578,81505d0)' at 569
  makecol : `(8150380,81503d8,8150430)' at 552
 bestfit_color : `(8150178,81501d0,8150228,8150280)' at 536
 generate_optimized_palette : `(814ffb0,8150018,8150070)' at 514
 generate_332_palette : `(814fed0)' at 479
 get_pallete_range : `(814fd20,814fd78,814fdd0)' at 450
 get_pallete : `(814fc48)' at 424
 get_color : `(814fb00,814fb58)' at 404
 set_pallete_range : `(814f8f8,814f950,814f9a8,814fa00)' at 386
 set_pallete : `(814f820)' at 360
 set_color : `(814f6d8,814f730)' at 340
 color_map : `*' at 322
  rgb_map : `*' at 304
 destroy_bitmap : `(814f250)' at 288
 create_sub_bitmap : `(814efc8,814f030,814f088,814f0e0,814f138)*' at 265
 create_bitmap_ex : `(814ee20,814ee78,814eed0)*' at 239
 create_bitmap : `(814b820,814ed38)*' at 214
 set_gfx_mode : `(814b5a8,814b600,814b658,814b6b0,814b708)' at 192
 set_color_conversion : `(814b4d0)' at 171
 set_color_depth : `(81182a8)' at 142
   screen : `*' at 118
 install_keyboard : `()' at 103
 install_timer : `()' at 78
 install_mouse : `()' at 56
 allegro_exit : `()' at 34
 allegro_init : `()' at 13
End.
Code size:670
Inits size:0
Consts size:106
Data size:24
Stack size:4000
Doing CleanUp...........................
Done.
Doing CleanUp
Done.
Importing allegro_init at 135655507
with addr:134523620 and params:0
Importing allegro_exit at 135655528
with addr:134523572 and params:0
Importing install_mouse at 135655550
with addr:134522724 and params:0
Importing install_timer at 135655572
with addr:134523556 and params:0
Importing install_keyboard at 135655597
with addr:134523524 and params:0
Importing screen at 135655612
with addr:134718664 and params:-1
Importing set_color_depth at 135655636
with addr:134523604 and params:4
Importing set_color_conversion at 135655665
with addr:134521924 and params:4
Importing set_gfx_mode at 135655686
with addr:134521700 and params:20
Importing create_bitmap at 135655708
with addr:134522932 and params:8
Importing create_bitmap_ex at 135655733
with addr:134522708 and params:12
Importing create_sub_bitmap at 135655759
with addr:134521860 and params:20
Importing destroy_bitmap at 135655782
with addr:134523428 and params:4
Importing rgb_map at 135655798
with addr:134719860 and params:-1
Importing color_map at 135655816
with addr:134719852 and params:-1
Importing set_color at 135655834
with addr:134523380 and params:8
Importing set_pallete at 135655854
with addr:134522148 and params:1024
Importing set_pallete_range at 135655880
with addr:134522228 and params:1036
Importing get_color at 135655898
with addr:134523316 and params:8
Importing get_pallete at 135655918
with addr:134521972 and params:1024
Importing get_pallete_range at 135655944
with addr:134524116 and params:1032
Importing generate_332_palette at 135655973
with addr:134521572 and params:1024
Importing generate_optimized_palette at 135656008
with addr:134523668 and params:1284
Importing bestfit_color at 135656030
with addr:134522820 and params:1036
Importing makecol at 135656046
with addr:134523988 and params:12
Importing makecol8 at 135656063
with addr:134524068 and params:12
Importing makecol_depth at 135656085
with addr:134522564 and params:16
Importing getr at 135656098
with addr:134522788 and params:4
Importing getg at 135656111
with addr:134523636 and params:4
Importing getb at 135656124
with addr:134523812 and params:4
Importing getr_depth at 135656143
with addr:134523716 and params:8
Importing getg_depth at 135656162
with addr:134522180 and params:8
Importing getb_depth at 135656181
with addr:134523140 and params:8
Importing putpixel at 135656198
with addr:134521876 and params:16
Importing set_clip at 135656215
with addr:134523508 and params:20
Importing drawing_mode at 135656236
with addr:134521556 and params:16
Importing xor_mode at 135656253
with addr:134522340 and params:4
Importing solid_mode at 135656272
with addr:134521780 and params:0
Importing do_line at 135656288
with addr:134523188 and params:28
Importing triangle at 135656305
with addr:134521812 and params:32
Importing polygon at 135656321
with addr:134522132 and params:16
Importing rect at 135656334
with addr:134523652 and params:24
Importing do_circle at 135656352
with addr:134521588 and params:24
Importing circle at 135656367
with addr:134522676 and params:20
Importing circlefill at 135656386
with addr:134523700 and params:20
Importing do_ellipse at 135656405
with addr:134522020 and params:28
Importing ellipse at 135656421
with addr:134524036 and params:24
Importing ellipsefill at 135656441
with addr:134521668 and params:24
Importing calc_spline at 135656461
with addr:134522772 and params:16
Importing spline at 135656476
with addr:134521716 and params:40
Importing floodfill at 135656494
with addr:134522996 and params:16
Importing blit at 135656507
with addr:134523172 and params:32
Importing masked_blit at 135656527
with addr:134524132 and params:32
Importing stretch_blit at 135656548
with addr:134524052 and params:40
Importing stretch_sprite at 135656571
with addr:134523492 and params:24
Importing rotate_sprite at 135656593
with addr:134523764 and params:20
Importing rotate_scaled_sprite at 135656622
with addr:134522212 and params:24
Importing clear at 135656636
with addr:134522532 and params:4
Importing draw_trans_sprite at 135656662
with addr:134522100 and params:16
Importing text_mode at 135656680
with addr:134523300 and params:4
Importing textout at 135656696
with addr:134521652 and params:24
Importing textout_centre at 135656719
with addr:134522868 and params:24
Importing textout_justify at 135656743
with addr:134522484 and params:32
Importing textprintf at 135656762
with addr:134521620 and params:24
Importing textprintf_centre at 135656788
with addr:134522612 and params:24
Importing text_length at 135656808
with addr:134522756 and params:8
Importing text_height at 135656828
with addr:134521748 and params:4
Importing destroy_font at 135656849
with addr:134523396 and params:4
Importing play_fli at 135656866
with addr:134523892 and params:16
Importing play_memory_fli at 135656890
with addr:134522372 and params:16
Importing open_fli at 135656907
with addr:134523476 and params:4
Importing open_memory_fli at 135656931
with addr:134521636 and params:4
Importing close_fli at 135656949
with addr:134522404 and params:0
Importing next_fli_frame at 135656972
with addr:134522884 and params:4
Importing reset_fli_variables at 135657000
with addr:134521844 and params:0
Importing fli_bitmap at 135657019
with addr:134718660 and params:-1
Importing fli_pallete at 135657039
with addr:134718680 and params:-1
Importing fli_frame at 135657057
with addr:134719856 and params:-1
Importing install_sound at 135657079
with addr:134523924 and params:12
Importing set_volume at 135657098
with addr:134522116 and params:8
Importing load_datafile at 135657120
with addr:134524084 and params:4
Importing unload_datafile at 135657144
with addr:134523876 and params:4
Importing load_sample at 135657164
with addr:134522276 and params:4
Importing load_wav at 135657181
with addr:134522580 and params:4
Importing load_voc at 135657198
with addr:134522004 and params:4
Importing destroy_sample at 135657221
with addr:134523956 and params:4
Importing play_sample at 135657241
with addr:134522164 and params:20
Importing stop_sample at 135657261
with addr:134523940 and params:4
Importing adjust_sample at 135657283
with addr:134522356 and params:20
Importing load_midi at 135657301
with addr:134523044 and params:4
Importing destroy_midi at 135657322
with addr:134522388 and params:4
Importing play_midi at 135657340
with addr:134522260 and params:8
Importing play_looped_midi at 135657365
with addr:134523236 and params:12
Importing stop_midi at 135657383
with addr:134521956 and params:0
Importing midi_pause at 135657402
with addr:134523092 and params:0
Importing midi_resume at 135657422
with addr:134523364 and params:0
Importing midi_seek at 135657440
with addr:134522500 and params:4
Importing midi_out at 135657457
with addr:134522804 and params:8
Importing load_midi_patches at 135657483
with addr:134522308 and params:0
Importing packfile_password at 135657509
with addr:134523220 and params:4
Importing pack_fopen at 135657528
with addr:134523012 and params:8
Importing pack_fclose at 135657548
with addr:134522964 and params:4
Importing pack_fseek at 135657567
with addr:134523412 and params:8
Importing pack_fopen_chunk at 135657592
with addr:134521828 and params:8
Importing pack_fclose_chunk at 135657618
with addr:134523972 and params:4
Importing pack_igetw at 135657637
with addr:134523108 and params:4
Importing pack_igetl at 135657656
with addr:134522292 and params:4
Importing pack_iputw at 135657675
with addr:134522036 and params:8
Importing pack_iputl at 135657694
with addr:134522052 and params:8
Importing pack_mgetw at 135657713
with addr:134522436 and params:4
Importing pack_mgetl at 135657732
with addr:134524020 and params:4
Importing pack_mputw at 135657751
with addr:134522244 and params:8
Importing pack_mputl at 135657770
with addr:134523268 and params:8
Importing pack_fread at 135657789
with addr:134522948 and params:12
Importing pack_fwrite at 135657809
with addr:134523460 and params:12
Importing pack_fgets at 135657828
with addr:134522068 and params:12
Importing pack_fputs at 135657847
with addr:134522084 and params:8
Importing get_filename at 135657868
with addr:134522548 and params:4
Importing load_bitmap at 135657888
with addr:134522916 and params:8
Importing load_bmp at 135657905
with addr:134521604 and params:8
Importing load_lbm at 135657922
with addr:134523444 and params:8
Importing load_pcx at 135657939
with addr:134522196 and params:8
Importing load_tga at 135657956
with addr:134523204 and params:8
Importing save_bitmap at 135657976
with addr:134522660 and params:12
Importing save_bmp at 135657993
with addr:134523780 and params:12
Importing save_pcx at 135658010
with addr:134522596 and params:12
Importing save_tga at 135658027
with addr:134523076 and params:12
Importing create_rgb_table at 135658052
with addr:134523828 and params:1032
Importing create_light_table at 135658079
with addr:134524100 and params:1044
Importing create_trans_table at 135658106
with addr:134523124 and params:1044
Importing create_color_table at 135658133
with addr:134523028 and params:1036
Importing mouse_x at 135658149
with addr:134718656 and params:-1
Importing mouse_y at 135658165
with addr:134719844 and params:-1
Importing mouse_b at 135658181
with addr:134718676 and params:-1
Importing mouse_pos at 135658199
with addr:134719848 and params:-1
Importing freeze_mouse_flag at 135658225
with addr:134719704 and params:-1
Importing keypressed at 135658244
with addr:134522692 and params:0
Importing readkey at 135658260
with addr:134523748 and params:0
Importing dbuf at 135658273
with addr:134719920 and params:-1
Importing addressof at 135658291
with addr:134525100 and params:4
Importing exec_script at 135658311
with addr:134525120 and params:8
Importing add_script at 135658330
with addr:134524800 and params:4
Importing add_tiles_pack at 135658353
with addr:134525492 and params:4
Importing df_get_item_num at 135658377
with addr:134524416 and params:8
Importing df_get_item at 135658397
with addr:134524504 and params:8
Importing df_item at 135658413
with addr:134524540 and params:8
Importing df_dat at 135658428
with addr:134524564 and params:4
Importing df_count at 135658445
with addr:134524584 and params:8
Importing df_foreach at 135658464
with addr:134524636 and params:8
Importing bmp_line at 135658481
with addr:134524708 and params:8
Importing bmp_w at 135658495
with addr:134524744 and params:4
Importing bmp_h at 135658509
with addr:134524764 and params:4
Importing printf at 135658524
with addr:134523252 and params:4
Importing create_object_type at 135658551
with addr:134530064 and params:12
Importing create_weapon_type at 135658578
with addr:134530336 and params:4
Importing assign_weapon_handler at 135658608
with addr:134530444 and params:8
Importing  at 135658617

0:Address 0, size 0,Calling 109
Size of params:0


Executing function from shotgun.sc!
 12:ENTER 135583964 
NOP 
NOP 
NOP 
 16:{a0(=$1076136184),$0000(=$0)}MOV
 24:{a0(=$0),a242(=$135659295)}ADD
 28:a0(=$135659295) PUSH (SP=3992) 
 32:{$065a(=$1626),$0004(=$4)}CALLEX
 44:{a245(=$3992),$0004(=$4)}ADD
 52:{[4]DS(=$0),a0(=$135653168)}MOV
 60:{a0(=$135653168),[4]DS(=$135653168)}MOV
 68:a0(=$135653168) NOT (0)
 72:{a0(=$0),$005c(=$92)}JFALSE
 92:{a0(=$0),$0011(=$17)}MOV
 100:{a0(=$17),a242(=$135659295)}ADD
 104:a0(=$135659312) PUSH (SP=3992) 
 108:[4]DS(=$135653168) PUSH (SP=3988) 
 116:{$0b57(=$2903),$0008(=$8)}CALLEX
 128:{a245(=$3988),$0008(=$8)}ADD
 136:a0(=$135653168) PUSH (SP=3992) 
 140:{$0b76(=$2934),$0004(=$4)}CALLEX
 152:{a245(=$3992),$0004(=$4)}ADD
 160:{[8]DS(=$0),a0(=$135554128)}MOV
 168:{a0(=$135554128),$0016(=$22)}MOV
 176:{a0(=$22),a242(=$135659295)}ADD
 180:a0(=$135659317) PUSH (SP=3992) 
 184:[4]DS(=$135653168) PUSH (SP=3988) 
 192:{$0b57(=$2903),$0008(=$8)}CALLEX
 204:{a245(=$3988),$0008(=$8)}ADD
 212:a0(=$135653392) PUSH (SP=3992) 
 216:{$0b76(=$2934),$0004(=$4)}CALLEX
 228:{a245(=$3992),$0004(=$4)}ADD
 236:{[12]DS(=$0),a0(=$135669920)}MOV
 244:{a0(=$135669920),$001d(=$29)}MOV
 252:{a0(=$29),a242(=$135659295)}ADD
 256:a0(=$135659324) PUSH (SP=3992) 
 260:[4]DS(=$135653168) PUSH (SP=3988) 
 268:{$0b57(=$2903),$0008(=$8)}CALLEX
 280:{a245(=$3988),$0008(=$8)}ADD
 288:a0(=$135653376) PUSH (SP=3992) 
 292:{$0b76(=$2934),$0004(=$4)}CALLEX
 304:{a245(=$3992),$0004(=$4)}ADD
 312:{[16]DS(=$0),a0(=$135669056)}MOV
 320:{a0(=$135669056),$0024(=$36)}MOV
 328:{a0(=$36),a242(=$135659295)}ADD
 332:a0(=$135659331) PUSH (SP=3992) 
 336:{$0c0c(=$3084),$0004(=$4)}CALLEX
 348:{a245(=$3992),$0004(=$4)}ADD
 356:{[20]DS(=$0),a0(=$1)}MOV
 364:{a0(=$1),$002c(=$44)}MOV
 372:{a0(=$44),a242(=$135659295)}ADD
 376:a0(=$135659339) PUSH (SP=3992) 
 380:{$0aed(=$2797),$0004(=$4)}CALLEX
 392:{a245(=$3992),$0004(=$4)}ADD
 400:a0(=$-1) PUSH (SP=3992) 
 404:[20]DS(=$1) PUSH (SP=3988) 
 412:{$0c2a(=$3114),$0008(=$8)}CALLEX
 424:{a245(=$3988),$0008(=$8)}ADD
 432:{a0(=$0),$0034(=$52)}MOV
 440:{a0(=$52),a242(=$135659295)}ADD
 444:a0(=$135659347) PUSH (SP=3992) 
 448:{a1(=$1076136184),$0041(=$65)}MOV
 456:{a1(=$65),a242(=$135659295)}ADD
 460:a1(=$135659360) PUSH (SP=3988) 
 464:{$0aed(=$2797),$0004(=$4)}CALLEX
 476:{a1(=$135659360),a0(=$-1)}MOV
 480:{a245(=$3988),$0004(=$4)}ADD
 488:a0(=$-1) POP (SP=3996) 
 492:[8]DS(=$135554128) PUSH (SP=3992) 
 500:a1(=$-1) PUSH (SP=3988) 
 504:a0(=$135659347) PUSH (SP=3984) 
 508:{$0bf1(=$3057),$000c(=$12)}CALLEX
 520:{a245(=$3984),$000c(=$12)}ADD
 528:{a0(=$2),$004d(=$77)}MOV
 536:{a0(=$77),a242(=$135659295)}ADD
 540:a0(=$135659372) PUSH (SP=3992) 
 544:{a1(=$-1),$005c(=$92)}MOV
 552:{a1(=$92),a242(=$135659295)}ADD
 556:a1(=$135659387) PUSH (SP=3988) 
 560:{$0aed(=$2797),$0004(=$4)}CALLEX
 572:{a1(=$135659387),a0(=$-1)}MOV
 576:{a245(=$3988),$0004(=$4)}ADD
 584:a0(=$-1) POP (SP=3996) 
 588:[12]DS(=$135669920) PUSH (SP=3992) 
 596:a1(=$-1) PUSH (SP=3988) 
 600:a0(=$135659372) PUSH (SP=3984) 
 604:{$0bf1(=$3057),$000c(=$12)}CALLEX
 616:{a245(=$3984),$000c(=$12)}ADD
 624:{a0(=$3),$0000(=$0)}MOV
 632:LEAVE 
RET SP=4000,CP=4000
EXIT

 140:{a245(=$3992),$0004(=$4)}ADD
 148:{a0(=$0),$0000(=$0)}MOV
 156:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 85
Size of params:0


Executing function from rpg.sc!
 712:ENTER 135364320 
NOP 
NOP 
NOP 
 716:[4]DS(=$135554304) PUSH (SP=3992) 
 724:{$0672(=$1650),$0004(=$4)}CALLEX
 736:{a245(=$3992),$0004(=$4)}ADD
 744:LEAVE 
RET SP=4000,CP=4000
EXIT
Calling 89
Size of params:0


Executing function from shotgun.sc!
 636:ENTER 135583964 
NOP 
NOP 
NOP 
 640:[4]DS(=$135653168) PUSH (SP=3992) 
 648:{$0672(=$1650),$0004(=$4)}CALLEX
 660:{a245(=$3992),$0004(=$4)}ADD
 668:LEAVE 
RET SP=4000,CP=4000
EXIT
