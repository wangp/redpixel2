# configuration file for making Lua 4.1
# see INSTALL for installation instructions

# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================

# ------------------------------------------------------------------ Lua

# Lua uses double for numbers. To change this, uncomment one of the lines below.
# You can also define LUA_USER_H as a header file containing these definitions.
# See etc/luser_*.h for examples.
#NUMBER= -DLUA_NUMBER=double -DLUA_NUMBER_SCAN='"%lf"' -DLUA_NUMBER_FMT='"%.16g"'
#NUMBER= -DLUA_NUMBER=float -DLUA_NUMBER_SCAN='"%f"'  -DLUA_NUMBER_FMT='"%.8g"'
#NUMBER= -DLUA_NUMBER=long  -DLUA_NUMBER_SCAN='"%ld"' -DLUA_NUMBER_FMT='"%ld"'
#NUMBER= -DLUA_NUMBER=int   -DLUA_NUMBER_SCAN='"%d"'  -DLUA_NUMBER_FMT='"%d"'
# Also, define lua_str2number accordingly and perhaps lua_number2str.

# If you want support for pipes, uncomment the following line.
# You need popen in your C library.
#POPEN= -DPOPEN

# ------------------------------------------------------------------ C compiler

# You need an ANSI C compiler. gcc is a popular one.
CC= gcc
WARN= -ansi -pedantic -Wall

# On IRIX, cc is a good ANSI compiler.
#CC= cc
#WARN= -ansi -fullwarn

# On Solaris, cc is an optional software package.
# You may have to add -Dsparc if you use -Xc.
#CC= cc
#WARN= -Xc # -Dsparc

# On AIX, cc may not be ANSI by default. Use c89 or xlc, or cc -qlanglvl=ansi.
#CC= cc
#WARN= -qlanglvl=ansi

# ------------------------------------------------------------------ C options

# Write here any options you may need for your C compiler.
# If you are using gcc, -O3 will get you a faster but larger code.
# You can also add -fomit-frame-pointer.
MYCFLAGS= -O2

# Write here any options you may need for your C linker.
MYLDFLAGS=

# ------------------------------------------------------------------ C library

# If your C library is not POSIX compliant, comment the following line.
# This is only used in the stand-alone Lua interpreter (src/lua/lua.c).
POSIX= -D_POSIX_SOURCE

# If your C library does not have the newer ANSI functions strerror, strcoll,
# and locale support, uncomment the following line. SunOs 4.1.x is one example.
#OLD_ANSI= -DOLD_ANSI
# define LUA_USER_H as a header file containing these definitions.
### TODO: FIX explanation!

# In SunOs 4.1.x, standard headers in /usr/include are not ANSI,
# so uncomment the following line to avoid prototypes warnings.
#EXTRA_INCS= -I/usr/5include

# The stand-alone Lua interpreter needs the math functions, which are usually
# in libm.a (-lm).  If your C library already includes the math functions,
# or if you are using a modified interpreter that does not need them,
# then comment the following line or add the appropriates libraries.
EXTRA_LIBS= -lm

# ------------------------------------------------------------------ librarian

# This should work in all Unix systems.
AR= ar rcu

# If your system doesn't have (or need) ranlib, use RANLIB=true.
# On some systems, "ar s" does what ranlib would do.
RANLIB= ranlib
#RANLIB= ar s
#RANLIB= true

# ------------------------------------------------------------------ stripper

# This should work in all Unix systems, but you may want to add options.
STRIP= strip

# ------------------------------------------------------------------ install

# Locations for "make install". You may need to be root do "make install".
INSTALL_ROOT= /usr/local
INSTALL_BIN= $(INSTALL_ROOT)/bin
INSTALL_INC= $(INSTALL_ROOT)/include
INSTALL_LIB= $(INSTALL_ROOT)/lib
INSTALL_MAN= $(INSTALL_ROOT)/man/man1

# You may prefer to use "install" if you have it.
# If you use "install", you may also want to change the permissions after -m.
INSTALL_EXEC= cp
INSTALL_DATA= cp
#INSTALL_EXEC= install -m 0755
#INSTALL_DATA= install -m 0644

# == END OF USER SETTINGS. DO NOT CHANGE ANYTHING BELOW THIS LINE =============

V=4.1

BIN= $(LUA)/bin
INC= $(LUA)/include
LIB= $(LUA)/lib

INCS= -I$(INC) $(EXTRA_INCS)
DEFS= $(NUMBER) $(EXTRA_DEFS)

CFLAGS= $(MYCFLAGS) $(WARN) $(INCS) $(DEFS)

# (end of config)
